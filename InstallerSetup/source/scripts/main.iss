; Script generated by the Inno Setup Script Wizard.
; SEE THE DOCUMENTATION FOR DETAILS ON CREATING INNO SETUP SCRIPT FILES!

#define MyAppName "XPCode"
#define MyAppVersion "0.1"
#define MyAppPublisher "Oosuke Ren"
#define MyAppURL "https://github.com/RenOosuke"
#define MyAppExeName "xpcode.exe"
#define CLSID "{0865980F-3A31-4FCC-B55D-7844C83029F6}"

[Setup]
; NOTE: The value of AppId uniquely identifies this application.
; Do not use the same AppId value in installers for other applications.
; (To generate a new GUID, click Tools | Generate GUID inside the IDE.)
AppId={{F77A16F9-496C-48E8-B959-506C801E5D53}
AppName={#MyAppName}
AppVersion={#MyAppVersion}
;AppVerName={#MyAppName} {#MyAppVersion}
AppPublisher={#MyAppPublisher}
AppPublisherURL={#MyAppURL}
AppSupportURL={#MyAppURL}
AppUpdatesURL={#MyAppURL}
DefaultDirName={pf}\{#MyAppName}
DefaultGroupName={#MyAppName}
AllowNoIcons=no
InfoBeforeFile=..\Documents\BeforeInstallation.txt
InfoAfterFile=..\Documents\PostInstallation.txt
OutputDir=..\..\output
OutputBaseFilename=XPCodeSetup
Compression=lzma
SolidCompression=yes

[Languages]
Name: "english"; MessagesFile: "compiler:Default.isl"
Name: "brazilianportuguese"; MessagesFile: "compiler:Languages\BrazilianPortuguese.isl"
Name: "catalan"; MessagesFile: "compiler:Languages\Catalan.isl"
Name: "corsican"; MessagesFile: "compiler:Languages\Corsican.isl"
Name: "czech"; MessagesFile: "compiler:Languages\Czech.isl"
Name: "danish"; MessagesFile: "compiler:Languages\Danish.isl"
Name: "dutch"; MessagesFile: "compiler:Languages\Dutch.isl"
Name: "finnish"; MessagesFile: "compiler:Languages\Finnish.isl"
Name: "french"; MessagesFile: "compiler:Languages\French.isl"
Name: "german"; MessagesFile: "compiler:Languages\German.isl"
Name: "greek"; MessagesFile: "compiler:Languages\Greek.isl"
Name: "hebrew"; MessagesFile: "compiler:Languages\Hebrew.isl"
Name: "hungarian"; MessagesFile: "compiler:Languages\Hungarian.isl"
Name: "italian"; MessagesFile: "compiler:Languages\Italian.isl"
Name: "japanese"; MessagesFile: "compiler:Languages\Japanese.isl"
Name: "norwegian"; MessagesFile: "compiler:Languages\Norwegian.isl"
Name: "polish"; MessagesFile: "compiler:Languages\Polish.isl"
Name: "portuguese"; MessagesFile: "compiler:Languages\Portuguese.isl"
Name: "russian"; MessagesFile: "compiler:Languages\Russian.isl"
Name: "scottishgaelic"; MessagesFile: "compiler:Languages\ScottishGaelic.isl"
Name: "serbiancyrillic"; MessagesFile: "compiler:Languages\SerbianCyrillic.isl"
Name: "serbianlatin"; MessagesFile: "compiler:Languages\SerbianLatin.isl"
Name: "slovenian"; MessagesFile: "compiler:Languages\Slovenian.isl"
Name: "spanish"; MessagesFile: "compiler:Languages\Spanish.isl"
Name: "turkish"; MessagesFile: "compiler:Languages\Turkish.isl"
Name: "ukrainian"; MessagesFile: "compiler:Languages\Ukrainian.isl"

[Tasks]
Name: "desktopicon"; Description: "{cm:CreateDesktopIcon}"; GroupDescription: "{cm:AdditionalIcons}"; Flags: unchecked
Name: "quicklaunchicon"; Description: "{cm:CreateQuickLaunchIcon}"; GroupDescription: "{cm:AdditionalIcons}"; OnlyBelowVersion: 0,6.1
Name: "contextmenu"; Description: "Add 'Open with XPCode' to context menu"; GroupDescription: "Additional options";

[Files]
Source: "..\Dependencies\vcruntime140.dll"; DestDir: "{sys}"; Flags: onlyifdoesntexist
Source: "..\..\..\BuiltApp\XPCode\*"; DestDir: "{app}"; Flags: ignoreversion recursesubdirs createallsubdirs
Source: "..\Dependencies\xpcode.exe"; DestDir: "{app}"; Flags: ignoreversion
; NOTE: Don't use "Flags: ignoreversion" on any shared system files

[Icons]
Name: "{group}\{#MyAppName}"; Filename: "{app}\{#MyAppExeName}"
Name: "{group}\{cm:UninstallProgram,{#MyAppName}}"; Filename: "{uninstallexe}"
Name: "{commondesktop}\{#MyAppName}"; Filename: "{app}\{#MyAppExeName}"; Tasks: desktopicon
Name: "{userappdata}\Microsoft\Internet Explorer\Quick Launch\{#MyAppName}"; Filename: "{app}\{#MyAppExeName}"; Tasks: quicklaunchicon

[Run]
Filename: "{app}\{#MyAppExeName}"; Description: "{cm:LaunchProgram,{#StringChange(MyAppName, '&', '&&')}}"; Flags: nowait postinstall skipifsilent

[InstallDelete]
Type: filesandordirs; Name: "{app}"

[Registry]
; Add {app}\bin to the system PATH (system-wide)
Root: HKLM; Subkey: "SYSTEM\CurrentControlSet\Control\Session Manager\Environment"; ValueName: "Path"; \
    ValueType: expandsz; ValueData: "{code:GetUpdatedPath|{olddata}}"

; Add {app} directory as a system variable XPCODE
Root: HKLM; Subkey: "SYSTEM\CurrentControlSet\Control\Session Manager\Environment"; ValueName: "XPCODE"; \
    ValueType: expandsz; ValueData: "{app}"

; Context menu handler

[Files]
Source: "..\Dependencies\ContextMenuHandler.dll"; DestDir: "{app}"; Check: ContextMenuCheck; Flags: ignoreversion
Source: "..\Dependencies\xpcode.ico"; DestDir: "{app}"; Check: ContextMenuCheck; Flags: ignoreversion

[UninstallRun]
Filename: "reg.exe"; Parameters: "delete HKLM\SYSTEM\CurrentControlSet\Control\Session Manager\Environment /v XPCODE /f"; Flags: runhidden
Filename: "{sys}\regsvr32.exe"; Parameters: "/u /s ""{app}\ContextMenuHandler.dll"""; Check: ContextMenuCheck; Flags: runhidden

[Run]
Filename: "{sys}\regsvr32.exe"; Parameters: "/s ""{app}\ContextMenuHandler.dll"""; Check: ContextMenuCheck; Flags: runhidden

[Code]
var
  ContextMenuChecked: Boolean;

function ContextMenuCheck(): Boolean;
begin
  // Return the current state of the checkbox
  Result := ContextMenuChecked;
end;

procedure CurStepChanged(CurStep: TSetupStep);
begin
  if CurStep = ssInstall then
  begin
    // Update the ContextMenuChecked variable after tasks are initialized
    ContextMenuChecked := IsTaskSelected('contextmenu');
  end;
end;

function GetUpdatedPath(OldValue: string): string;
var
  AppBinPath: string;
begin
  AppBinPath := ExpandConstant('{app}\bin');
  if Pos(';' + AppBinPath, OldValue) = 0 then
    Result := OldValue + ';' + AppBinPath
  else
    Result := OldValue;
end;

function RemoveSubstring(InputString, Substring: string): string;
var
  StartPos: Integer;
begin
  StartPos := Pos(Substring, InputString);
  if StartPos > 0 then
  begin
    Result := Copy(InputString, 1, StartPos - 1) + Copy(InputString, StartPos + Length(Substring), Length(InputString));
  end
  else
    Result := InputString;
end;

function RemoveAppBinFromPath(OldValue: string): string;
var
  AppBinPath: string;
begin
  AppBinPath := ';' + ExpandConstant('{app}\bin');
  Result := RemoveSubstring(OldValue, AppBinPath);
end;

procedure CurUninstallStepChanged(CurUninstallStep: TUninstallStep);
var
  OldPath, NewPath: string;
begin
  if CurUninstallStep = usPostUninstall then
  begin
    OldPath := ExpandConstant('{reg:HKLM\SYSTEM\CurrentControlSet\Control\Session Manager\Environment,Path|}');
    NewPath := RemoveAppBinFromPath(OldPath);
    if OldPath <> NewPath then
    begin
      RegWriteExpandStringValue(HKLM, 'SYSTEM\CurrentControlSet\Control\Session Manager\Environment', 'Path', NewPath);
    end;
  end;
end;

var
  WM_SETTINGCHANGE: LongWord;
  SMTO_ABORTIFHUNG: LongWord;

procedure NotifyEnvironmentChange(
  hWnd: LongWord;
  Msg: LongWord;
  wParam: LongWord;
  lParam: PChar; // Changed to PChar for compatibility
  fuFlags: LongWord;
  uTimeout: LongWord;
  lpdwResult: LongWord
); external 'SendMessageTimeoutW@user32.dll stdcall';

procedure ApplyEnvironmentChanges;
var
  Environment: PChar;
begin
  Environment := 'Environment'; // Assign string directly to PChar
  NotifyEnvironmentChange(
    $FFFF, // HWND_BROADCAST
    WM_SETTINGCHANGE,
    0,
    Environment, // Pass Environment directly (as PChar)
    SMTO_ABORTIFHUNG,
    5000,
    0 // Pass 0 if lpdwResult is not needed
  );
end;

procedure InitializeWizard;
begin
  // Initialize global variables
  ContextMenuChecked := False;

  WM_SETTINGCHANGE := $1A;
  SMTO_ABORTIFHUNG := $2;
end;