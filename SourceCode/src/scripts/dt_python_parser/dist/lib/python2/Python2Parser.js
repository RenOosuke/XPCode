"use strict";

// Generated from /Users/ziv/github.com/dt-python-parser/src/grammar/python2/Python2.g4 by ANTLR 4.7.2
// jshint ignore: start
var antlr4 = require('antlr4/index');
var Python2Listener = require('./Python2Listener').Python2Listener;
var Python2Visitor = require('./Python2Visitor').Python2Visitor;
var grammarFileName = "Python2.g4";
var serializedATN = ["\x03\u608B\uA72A\u8133\uB9ED\u417C\u3BE7\u7786\u5964", "\x03X\u0407\x04\x02\t\x02\x04\x03\t\x03\x04\x04\t", "\x04\x04\x05\t\x05\x04\x06\t\x06\x04\x07\t\x07\x04", "\b\t\b\x04\t\t\t\x04\n\t\n\x04\x0B\t\x0B\x04\f\t\f\x04", "\r\t\r\x04\x0E\t\x0E\x04\x0F\t\x0F\x04\x10\t\x10\x04", "\x11\t\x11\x04\x12\t\x12\x04\x13\t\x13\x04\x14\t", "\x14\x04\x15\t\x15\x04\x16\t\x16\x04\x17\t\x17\x04", "\x18\t\x18\x04\x19\t\x19\x04\x1A\t\x1A\x04\x1B\t", "\x1B\x04\x1C\t\x1C\x04\x1D\t\x1D\x04\x1E\t\x1E\x04", "\x1F\t\x1F\x04 \t \x04!\t!\x04\"\t\"\x04#\t#\x04$\t$\x04", "%\t%\x04&\t&\x04'\t'\x04(\t(\x04)\t)\x04*\t*\x04+\t+\x04", ",\t,\x04-\t-\x04.\t.\x04/\t/\x040\t0\x041\t1\x042\t2\x04", "3\t3\x044\t4\x045\t5\x046\t6\x047\t7\x048\t8\x049\t9\x04", ":\t:\x04;\t;\x04<\t<\x04=\t=\x04>\t>\x04?\t?\x04@\t@\x04", "A\tA\x04B\tB\x04C\tC\x04D\tD\x04E\tE\x04F\tF\x04G\tG\x04", "H\tH\x04I\tI\x04J\tJ\x04K\tK\x04L\tL\x04M\tM\x04N\tN\x04", "O\tO\x04P\tP\x04Q\tQ\x04R\tR\x04S\tS\x04T\tT\x04U\tU\x04", "V\tV\x04W\tW\x03\x02\x03\x02\x03\x02\x05\x02\xB2", "\n\x02\x03\x02\x03\x02\x03\x03\x03\x03\x03\x03", "\x03\x03\x03\x03\x05\x03\xBB\n\x03\x03\x04\x03", "\x04\x07\x04\xBF\n\x04\f\x04\x0E\x04\xC2\x0B\x04", "\x03\x04\x03\x04\x03\x05\x03\x05\x07\x05\xC8\n", "\x05\f\x05\x0E\x05\xCB\x0B\x05\x03\x05\x03\x05", "\x03\x06\x03\x06\x03\x06\x03\x06\x05\x06\xD3\n", "\x06\x03\x06\x05\x06\xD6\n\x06\x03\x06\x03\x06", "\x03\x07\x06\x07\xDB\n\x07\r\x07\x0E\x07\xDC\x03", "\b\x03\b\x03\b\x05\b\xE2\n\b\x03\t\x03\t\x03\t\x03\t", "\x03\t\x03\t\x03\n\x03\n\x05\n\xEC\n\n\x03\n\x03\n\x03", "\x0B\x03\x0B\x03\x0B\x05\x0B\xF3\n\x0B\x03\x0B", "\x03\x0B\x07\x0B\xF7\n\x0B\f\x0B\x0E\x0B\xFA\x0B", "\x0B\x03\x0B\x03\x0B\x03\x0B\x03\x0B\x03\x0B\x05", "\x0B\u0101\n\x0B\x03\x0B\x03\x0B\x05\x0B\u0105\n\x0B", "\x03\x0B\x03\x0B\x03\x0B\x05\x0B\u010A\n\x0B\x03", "\x0B\x03\x0B\x03\x0B\x03\x0B\x05\x0B\u0110\n\x0B", "\x07\x0B\u0112\n\x0B\f\x0B\x0E\x0B\u0115\x0B\x0B\x03", "\x0B\x05\x0B\u0118\n\x0B\x05\x0B\u011A\n\x0B\x03\f\x03", "\f\x03\f\x03\f\x03\f\x05\f\u0121\n\f\x03\r\x03\r\x03\r", "\x07\r\u0126\n\r\f\r\x0E\r\u0129\x0B\r\x03\r\x05\r\u012C\n", "\r\x03\x0E\x03\x0E\x05\x0E\u0130\n\x0E\x03\x0F\x03", "\x0F\x03\x0F\x07\x0F\u0135\n\x0F\f\x0F\x0E\x0F\u0138", "\x0B\x0F\x03\x0F\x05\x0F\u013B\n\x0F\x03\x0F\x03", "\x0F\x03\x10\x03\x10\x03\x10\x03\x10\x03\x10\x03", "\x10\x03\x10\x03\x10\x03\x10\x05\x10\u0148\n\x10", "\x03\x11\x03\x11\x03\x11\x03\x11\x05\x11\u014E\n", "\x11\x03\x11\x03\x11\x03\x11\x05\x11\u0153\n\x11", "\x07\x11\u0155\n\x11\f\x11\x0E\x11\u0158\x0B\x11\x05", "\x11\u015A\n\x11\x03\x12\x03\x12\x03\x13\x03\x13", "\x03\x13\x03\x13\x03\x13\x07\x13\u0163\n\x13\f\x13", "\x0E\x13\u0166\x0B\x13\x03\x13\x05\x13\u0169\n\x13", "\x05\x13\u016B\n\x13\x03\x13\x03\x13\x03\x13\x03", "\x13\x06\x13\u0171\n\x13\r\x13\x0E\x13\u0172\x03\x13", "\x05\x13\u0176\n\x13\x05\x13\u0178\n\x13\x05\x13\u017A", "\n\x13\x03\x14\x03\x14\x03\x14\x03\x15\x03\x15", "\x03\x16\x03\x16\x03\x16\x03\x16\x03\x16\x05\x16", "\u0186\n\x16\x03\x17\x03\x17\x03\x18\x03\x18\x03", "\x19\x03\x19\x05\x19\u018E\n\x19\x03\x1A\x03\x1A", "\x03\x1B\x03\x1B\x03\x1B\x03\x1B\x03\x1B\x03\x1B", "\x05\x1B\u0198\n\x1B\x05\x1B\u019A\n\x1B\x05\x1B\u019C", "\n\x1B\x03\x1C\x03\x1C\x05\x1C\u01A0\n\x1C\x03\x1D", "\x03\x1D\x03\x1D\x03\x1E\x03\x1E\x07\x1E\u01A7\n", "\x1E\f\x1E\x0E\x1E\u01AA\x0B\x1E\x03\x1E\x03\x1E", "\x06\x1E\u01AE\n\x1E\r\x1E\x0E\x1E\u01AF\x05\x1E\u01B2", "\n\x1E\x03\x1E\x03\x1E\x03\x1E\x03\x1E\x03\x1E", "\x03\x1E\x03\x1E\x05\x1E\u01BB\n\x1E\x03\x1F\x03", "\x1F\x03\x1F\x05\x1F\u01C0\n\x1F\x03 \x03 \x03 \x05", " \u01C5\n \x03!\x03!\x03!\x07!\u01CA\n!\f!\x0E!\u01CD\x0B", "!\x03!\x05!\u01D0\n!\x03\"\x03\"\x03\"\x07\"\u01D5\n\"\f", "\"\x0E\"\u01D8\x0B\"\x03#\x03#\x03#\x07#\u01DD\n#\f#\x0E", "#\u01E0\x0B#\x03$\x03$\x03$\x03$\x07$\u01E6\n$\f$\x0E", "$\u01E9\x0B$\x03%\x03%\x03%\x03%\x03%\x03%\x05%\u01F1", "\n%\x05%\u01F3\n%\x03&\x03&\x03&\x03&\x05&\u01F9\n&\x03", "'\x03'\x03'\x03'\x03'\x03'\x03'\x03'\x05'\u0203", "\n'\x03(\x03(\x03(\x03(\x03(\x03(\x03(\x03(\x03(", "\x07(\u020E\n(\f(\x0E(\u0211\x0B(\x03(\x03(\x03(\x05(", "\u0216\n(\x03)\x03)\x03)\x03)\x03)\x03)\x03)\x05)\u021F", "\n)\x03*\x03*\x03*\x03*\x03*\x03*\x03*\x03*\x03*\x05", "*\u022A\n*\x03+\x03+\x03+\x03+\x03+\x03+\x03+\x06+\u0233", "\n+\r+\x0E+\u0234\x03+\x03+\x03+\x05+\u023A\n+\x03+\x03", "+\x03+\x05+\u023F\n+\x03+\x03+\x03+\x05+\u0244\n+\x03", ",\x03,\x03,\x03,\x07,\u024A\n,\f,\x0E,\u024D\x0B,\x03", ",\x03,\x03,\x03-\x03-\x03-\x05-\u0255\n-\x03.\x03.\x03", ".\x03.\x05.\u025B\n.\x05.\u025D\n.\x03/\x03/\x03/\x03", "/\x06/\u0263\n/\r/\x0E/\u0264\x03/\x03/\x05/\u0269\n/\x03", "0\x030\x030\x060\u026E\n0\r0\x0E0\u026F\x030\x050\u0273", "\n0\x050\u0275\n0\x031\x031\x051\u0279\n1\x032\x032\x05", "2\u027D\n2\x032\x032\x032\x033\x033\x033\x033\x033\x03", "3\x053\u0288\n3\x033\x053\u028B\n3\x034\x034\x034\x07", "4\u0290\n4\f4\x0E4\u0293\x0B4\x035\x035\x035\x075\u0298", "\n5\f5\x0E5\u029B\x0B5\x036\x036\x036\x056\u02A0\n6\x03", "7\x037\x037\x037\x077\u02A6\n7\f7\x0E7\u02A9\x0B7\x03", "8\x038\x038\x038\x038\x038\x038\x038\x038\x038\x03", "8\x038\x038\x058\u02B8\n8\x039\x039\x039\x079\u02BD\n", "9\f9\x0E9\u02C0\x0B9\x03:\x03:\x03:\x07:\u02C5\n:\f:\x0E", ":\u02C8\x0B:\x03;\x03;\x03;\x07;\u02CD\n;\f;\x0E;\u02D0", "\x0B;\x03<\x03<\x03<\x07<\u02D5\n<\f<\x0E<\u02D8\x0B<", "\x03=\x03=\x03=\x07=\u02DD\n=\f=\x0E=\u02E0\x0B=\x03>", "\x03>\x03>\x07>\u02E5\n>\f>\x0E>\u02E8\x0B>\x03?\x03?", "\x03?\x05?\u02ED\n?\x03@\x03@\x07@\u02F1\n@\f@\x0E@\u02F4", "\x0B@\x03@\x03@\x05@\u02F8\n@\x03A\x03A\x03A\x05A\u02FD", "\nA\x03A\x03A\x03A\x05A\u0302\nA\x03A\x03A\x03A\x05", "A\u0307\nA\x03A\x03A\x03A\x03A\x03A\x03A\x03A\x03A\x03", "A\x03A\x03A\x06A\u0314\nA\rA\x0EA\u0315\x05A\u0318\nA\x03", "B\x03B\x03B\x03B\x07B\u031E\nB\fB\x0EB\u0321\x0BB\x03", "B\x05B\u0324\nB\x05B\u0326\nB\x03C\x03C\x03C\x03C\x07", "C\u032C\nC\fC\x0EC\u032F\x0BC\x03C\x05C\u0332\nC\x05C\u0334", "\nC\x03D\x03D\x05D\u0338\nD\x03D\x03D\x03D\x03E\x03", "E\x05E\u033F\nE\x03E\x03E\x03E\x03E\x03E\x03E\x03E\x05", "E\u0348\nE\x03F\x03F\x03F\x07F\u034D\nF\fF\x0EF\u0350\x0B", "F\x03F\x05F\u0353\nF\x03G\x03G\x03G\x03G\x03G\x05G\u035A", "\nG\x03G\x03G\x05G\u035E\nG\x03G\x05G\u0361\nG\x05G\u0363", "\nG\x03H\x03H\x05H\u0367\nH\x03I\x03I\x03I\x07I\u036C", "\nI\fI\x0EI\u036F\x0BI\x03I\x05I\u0372\nI\x03J\x03J\x03", "J\x07J\u0377\nJ\fJ\x0EJ\u037A\x0BJ\x03J\x05J\u037D\nJ\x03", "K\x03K\x03K\x03K\x03K\x03K\x03K\x03K\x03K\x07K\u0388", "\nK\fK\x0EK\u038B\x0BK\x03K\x05K\u038E\nK\x05K\u0390\nK\x03", "K\x03K\x03K\x03K\x07K\u0396\nK\fK\x0EK\u0399\x0BK\x03", "K\x05K\u039C\nK\x05K\u039E\nK\x05K\u03A0\nK\x03L\x03L\x03", "L\x03L\x05L\u03A6\nL\x03L\x05L\u03A9\nL\x03L\x03L\x03", "L\x03M\x03M\x03M\x07M\u03B1\nM\fM\x0EM\u03B4\x0BM\x03", "M\x03M\x05M\u03B8\nM\x03M\x03M\x03M\x03M\x07M\u03BE\n", "M\fM\x0EM\u03C1\x0BM\x03M\x03M\x03M\x05M\u03C6\nM\x03", "M\x03M\x05M\u03CA\nM\x03N\x03N\x05N\u03CE\nN\x03N\x03", "N\x03N\x03N\x05N\u03D4\nN\x03O\x03O\x05O\u03D8\nO\x03", "P\x03P\x03P\x03P\x03P\x05P\u03DF\nP\x03Q\x03Q\x03Q\x05", "Q\u03E4\nQ\x03R\x03R\x05R\u03E8\nR\x03S\x03S\x03S\x03", "S\x03S\x05S\u03EF\nS\x03T\x03T\x03T\x05T\u03F4\nT\x03", "U\x03U\x03U\x07U\u03F9\nU\fU\x0EU\u03FC\x0BU\x03V\x03", "V\x03W\x03W\x05W\u0402\nW\x03W\x05W\u0405\nW\x03W\x02", "\x02X\x02\x04\x06\b\n\f\x0E\x10\x12\x14\x16\x18", "\x1A\x1C\x1E \"$&(*,.02468:<>@BDFHJLNPRTVXZ\\^`bdfhjlnprtvxz|", "~\x80\x82\x84\x86\x88\x8A\x8C\x8E\x90\x92\x94", "\x96\x98\x9A\x9C\x9E\xA0\xA2\xA4\xA6\xA8\xAA\xAC", "\x02\b\x03\x02\x0B\x16\x04\x02\x07\x07!!\x04\x02", "\x17\x17>>\x03\x02?@\x04\x02\b\bAC\x04\x02?@DD\x02", "\u0466\x02\xB1\x03\x02\x02\x02\x04\xBA\x03\x02\x02", "\x02\x06\xC0\x03\x02\x02\x02\b\xC5\x03\x02\x02", "\x02\n\xCE\x03\x02\x02\x02\f\xDA\x03\x02\x02\x02", "\x0E\xDE\x03\x02\x02\x02\x10\xE3\x03\x02\x02\x02", "\x12\xE9\x03\x02\x02\x02\x14\u0119\x03\x02\x02\x02", "\x16\u0120\x03\x02\x02\x02\x18\u0122\x03\x02\x02\x02", "\x1A\u012F\x03\x02\x02\x02\x1C\u0131\x03\x02\x02\x02", "\x1E\u0147\x03\x02\x02\x02 \u0149\x03\x02\x02\x02", "\"\u015B\x03\x02\x02\x02$\u015D\x03\x02\x02\x02&\u017B", "\x03\x02\x02\x02(\u017E\x03\x02\x02\x02*\u0185\x03", "\x02\x02\x02,\u0187\x03\x02\x02\x02.\u0189\x03\x02", "\x02\x020\u018B\x03\x02\x02\x022\u018F\x03\x02\x02", "\x024\u0191\x03\x02\x02\x026\u019F\x03\x02\x02\x02", "8\u01A1\x03\x02\x02\x02:\u01A4\x03\x02\x02\x02<\u01BC", "\x03\x02\x02\x02>\u01C1\x03\x02\x02\x02@\u01C6\x03", "\x02\x02\x02B\u01D1\x03\x02\x02\x02D\u01D9\x03\x02", "\x02\x02F\u01E1\x03\x02\x02\x02H\u01EA\x03\x02\x02", "\x02J\u01F4\x03\x02\x02\x02L\u0202\x03\x02\x02\x02", "N\u0204\x03\x02\x02\x02P\u0217\x03\x02\x02\x02R\u0220", "\x03\x02\x02\x02T\u022B\x03\x02\x02\x02V\u0245\x03", "\x02\x02\x02X\u0251\x03\x02\x02\x02Z\u0256\x03\x02", "\x02\x02\\\u0268\x03\x02\x02\x02^\u026A\x03\x02\x02", "\x02`\u0278\x03\x02\x02\x02b\u027A\x03\x02\x02\x02", "d\u028A\x03\x02\x02\x02f\u028C\x03\x02\x02\x02h\u0294", "\x03\x02\x02\x02j\u029F\x03\x02\x02\x02l\u02A1\x03", "\x02\x02\x02n\u02B7\x03\x02\x02\x02p\u02B9\x03\x02", "\x02\x02r\u02C1\x03\x02\x02\x02t\u02C9\x03\x02\x02", "\x02v\u02D1\x03\x02\x02\x02x\u02D9\x03\x02\x02\x02", "z\u02E1\x03\x02\x02\x02|\u02EC\x03\x02\x02\x02~\u02EE", "\x03\x02\x02\x02\x80\u0317\x03\x02\x02\x02\x82\u0319", "\x03\x02\x02\x02\x84\u0327\x03\x02\x02\x02\x86\u0335", "\x03\x02\x02\x02\x88\u0347\x03\x02\x02\x02\x8A\u0349", "\x03\x02\x02\x02\x8C\u0362\x03\x02\x02\x02\x8E\u0364", "\x03\x02\x02\x02\x90\u0368\x03\x02\x02\x02\x92\u0373", "\x03\x02\x02\x02\x94\u039F\x03\x02\x02\x02\x96\u03A1", "\x03\x02\x02\x02\x98\u03B2\x03\x02\x02\x02\x9A\u03D3", "\x03\x02\x02\x02\x9C\u03D7\x03\x02\x02\x02\x9E\u03D9", "\x03\x02\x02\x02\xA0\u03E0\x03\x02\x02\x02\xA2\u03E7", "\x03\x02\x02\x02\xA4\u03E9\x03\x02\x02\x02\xA6\u03F0", "\x03\x02\x02\x02\xA8\u03F5\x03\x02\x02\x02\xAA\u03FD", "\x03\x02\x02\x02\xAC\u03FF\x03\x02\x02\x02\xAE\xB2", "\x05\x04\x03\x02\xAF\xB2\x05\x06\x04\x02\xB0\xB2", "\x05\b\x05\x02\xB1\xAE\x03\x02\x02\x02\xB1\xAF", "\x03\x02\x02\x02\xB1\xB0\x03\x02\x02\x02\xB1\xB2", "\x03\x02\x02\x02\xB2\xB3\x03\x02\x02\x02\xB3\xB4", "\x07\x02\x02\x03\xB4\x03\x03\x02\x02\x02\xB5\xBB", "\x07W\x02\x02\xB6\xBB\x05\x1C\x0F\x02\xB7\xB8", "\x05L'\x02\xB8\xB9\x07W\x02\x02\xB9\xBB\x03\x02", "\x02\x02\xBA\xB5\x03\x02\x02\x02\xBA\xB6\x03\x02", "\x02\x02\xBA\xB7\x03\x02\x02\x02\xBB\x05\x03\x02", "\x02\x02\xBC\xBF\x07W\x02\x02\xBD\xBF\x05\x1A", "\x0E\x02\xBE\xBC\x03\x02\x02\x02\xBE\xBD\x03\x02", "\x02\x02\xBF\xC2\x03\x02\x02\x02\xC0\xBE\x03\x02", "\x02\x02\xC0\xC1\x03\x02\x02\x02\xC1\xC3\x03\x02", "\x02\x02\xC2\xC0\x03\x02\x02\x02\xC3\xC4\x07X", "\x02\x02\xC4\x07\x03\x02\x02\x02\xC5\xC9\x05\x92", "J\x02\xC6\xC8\x07W\x02\x02\xC7\xC6\x03\x02\x02", "\x02\xC8\xCB\x03\x02\x02\x02\xC9\xC7\x03\x02\x02", "\x02\xC9\xCA\x03\x02\x02\x02\xCA\xCC\x03\x02\x02", "\x02\xCB\xC9\x03\x02\x02\x02\xCC\xCD\x07X\x02", "\x02\xCD\t\x03\x02\x02\x02\xCE\xCF\x07\x03\x02", "\x02\xCF\xD5\x05D#\x02\xD0\xD2\x07N\x02\x02\xD1", "\xD3\x05\x98M\x02\xD2\xD1\x03\x02\x02\x02\xD2", "\xD3\x03\x02\x02\x02\xD3\xD4\x03\x02\x02\x02\xD4", "\xD6\x07O\x02\x02\xD5\xD0\x03\x02\x02\x02\xD5", "\xD6\x03\x02\x02\x02\xD6\xD7\x03\x02\x02\x02\xD7", "\xD8\x07W\x02\x02\xD8\x0B\x03\x02\x02\x02\xD9", "\xDB\x05\n\x06\x02\xDA\xD9\x03\x02\x02\x02\xDB", "\xDC\x03\x02\x02\x02\xDC\xDA\x03\x02\x02\x02\xDC", "\xDD\x03\x02\x02\x02\xDD\r\x03\x02\x02\x02\xDE", "\xE1\x05\f\x07\x02\xDF\xE2\x05\x96L\x02\xE0\xE2", "\x05\x10\t\x02\xE1\xDF\x03\x02\x02\x02\xE1\xE0", "\x03\x02\x02\x02\xE2\x0F\x03\x02\x02\x02\xE3\xE4", "\x07\x04\x02\x02\xE4\xE5\x07H\x02\x02\xE5\xE6", "\x05\x12\n\x02\xE6\xE7\x07\x05\x02\x02\xE7\xE8", "\x05\\/\x02\xE8\x11\x03\x02\x02\x02\xE9\xEB\x07", "N\x02\x02\xEA\xEC\x05\x14\x0B\x02\xEB\xEA\x03", "\x02\x02\x02\xEB\xEC\x03\x02\x02\x02\xEC\xED\x03", "\x02\x02\x02\xED\xEE\x07O\x02\x02\xEE\x13\x03", "\x02\x02\x02\xEF\xF2\x05\x16\f\x02\xF0\xF1\x07", "\x06\x02\x02\xF1\xF3\x05d3\x02\xF2\xF0\x03\x02", "\x02\x02\xF2\xF3\x03\x02\x02\x02\xF3\xF4\x03\x02", "\x02\x02\xF4\xF5\x07\x07\x02\x02\xF5\xF7\x03\x02", "\x02\x02\xF6\xEF\x03\x02\x02\x02\xF7\xFA\x03\x02", "\x02\x02\xF8\xF6\x03\x02\x02\x02\xF8\xF9\x03\x02", "\x02\x02\xF9\u0104\x03\x02\x02\x02\xFA\xF8\x03\x02", "\x02\x02\xFB\xFC\x07\b\x02\x02\xFC\u0100\x07H\x02", "\x02\xFD\xFE\x07\x07\x02\x02\xFE\xFF\x07\t\x02", "\x02\xFF\u0101\x07H\x02\x02\u0100\xFD\x03\x02\x02", "\x02\u0100\u0101\x03\x02\x02\x02\u0101\u0105\x03\x02\x02", "\x02\u0102\u0103\x07\t\x02\x02\u0103\u0105\x07H\x02\x02", "\u0104\xFB\x03\x02\x02\x02\u0104\u0102\x03\x02\x02\x02", "\u0105\u011A\x03\x02\x02\x02\u0106\u0109\x05\x16\f\x02", "\u0107\u0108\x07\x06\x02\x02\u0108\u010A\x05d3\x02\u0109", "\u0107\x03\x02\x02\x02\u0109\u010A\x03\x02\x02\x02\u010A", "\u0113\x03\x02\x02\x02\u010B\u010C\x07\x07\x02\x02\u010C", "\u010F\x05\x16\f\x02\u010D\u010E\x07\x06\x02\x02\u010E", "\u0110\x05d3\x02\u010F\u010D\x03\x02\x02\x02\u010F\u0110", "\x03\x02\x02\x02\u0110\u0112\x03\x02\x02\x02\u0111\u010B", "\x03\x02\x02\x02\u0112\u0115\x03\x02\x02\x02\u0113\u0111", "\x03\x02\x02\x02\u0113\u0114\x03\x02\x02\x02\u0114\u0117", "\x03\x02\x02\x02\u0115\u0113\x03\x02\x02\x02\u0116\u0118", "\x07\x07\x02\x02\u0117\u0116\x03\x02\x02\x02\u0117\u0118", "\x03\x02\x02\x02\u0118\u011A\x03\x02\x02\x02\u0119\xF8", "\x03\x02\x02\x02\u0119\u0106\x03\x02\x02\x02\u011A\x15", "\x03\x02\x02\x02\u011B\u0121\x07H\x02\x02\u011C\u011D", "\x07N\x02\x02\u011D\u011E\x05\x18\r\x02\u011E\u011F\x07", "O\x02\x02\u011F\u0121\x03\x02\x02\x02\u0120\u011B\x03", "\x02\x02\x02\u0120\u011C\x03\x02\x02\x02\u0121\x17\x03", "\x02\x02\x02\u0122\u0127\x05\x16\f\x02\u0123\u0124\x07", "\x07\x02\x02\u0124\u0126\x05\x16\f\x02\u0125\u0123\x03", "\x02\x02\x02\u0126\u0129\x03\x02\x02\x02\u0127\u0125\x03", "\x02\x02\x02\u0127\u0128\x03\x02\x02\x02\u0128\u012B\x03", "\x02\x02\x02\u0129\u0127\x03\x02\x02\x02\u012A\u012C\x07", "\x07\x02\x02\u012B\u012A\x03\x02\x02\x02\u012B\u012C\x03", "\x02\x02\x02\u012C\x19\x03\x02\x02\x02\u012D\u0130\x05", "\x1C\x0F\x02\u012E\u0130\x05L'\x02\u012F\u012D\x03\x02", "\x02\x02\u012F\u012E\x03\x02\x02\x02\u0130\x1B\x03\x02", "\x02\x02\u0131\u0136\x05\x1E\x10\x02\u0132\u0133\x07\n", "\x02\x02\u0133\u0135\x05\x1E\x10\x02\u0134\u0132\x03\x02", "\x02\x02\u0135\u0138\x03\x02\x02\x02\u0136\u0134\x03\x02", "\x02\x02\u0136\u0137\x03\x02\x02\x02\u0137\u013A\x03\x02", "\x02\x02\u0138\u0136\x03\x02\x02\x02\u0139\u013B\x07\n", "\x02\x02\u013A\u0139\x03\x02\x02\x02\u013A\u013B\x03\x02", "\x02\x02\u013B\u013C\x03\x02\x02\x02\u013C\u013D\x07W", "\x02\x02\u013D\x1D\x03\x02\x02\x02\u013E\u0148\x05 ", "\x11\x02\u013F\u0148\x05$\x13\x02\u0140\u0148\x05&\x14", "\x02\u0141\u0148\x05(\x15\x02\u0142\u0148\x05*\x16\x02", "\u0143\u0148\x056\x1C\x02\u0144\u0148\x05F$\x02\u0145\u0148", "\x05H%\x02\u0146\u0148\x05J&\x02\u0147\u013E\x03\x02\x02", "\x02\u0147\u013F\x03\x02\x02\x02\u0147\u0140\x03\x02\x02", "\x02\u0147\u0141\x03\x02\x02\x02\u0147\u0142\x03\x02\x02", "\x02\u0147\u0143\x03\x02\x02\x02\u0147\u0144\x03\x02\x02", "\x02\u0147\u0145\x03\x02\x02\x02\u0147\u0146\x03\x02\x02", "\x02\u0148\x1F\x03\x02\x02\x02\u0149\u0159\x05\x92J", "\x02\u014A\u014D\x05\"\x12\x02\u014B\u014E\x05\xACW\x02", "\u014C\u014E\x05\x92J\x02\u014D\u014B\x03\x02\x02\x02", "\u014D\u014C\x03\x02\x02\x02\u014E\u015A\x03\x02\x02\x02", "\u014F\u0152\x07\x06\x02\x02\u0150\u0153\x05\xACW\x02", "\u0151\u0153\x05\x92J\x02\u0152\u0150\x03\x02\x02\x02", "\u0152\u0151\x03\x02\x02\x02\u0153\u0155\x03\x02\x02\x02", "\u0154\u014F\x03\x02\x02\x02\u0155\u0158\x03\x02\x02\x02", "\u0156\u0154\x03\x02\x02\x02\u0156\u0157\x03\x02\x02\x02", "\u0157\u015A\x03\x02\x02\x02\u0158\u0156\x03\x02\x02\x02", "\u0159\u014A\x03\x02\x02\x02\u0159\u0156\x03\x02\x02\x02", "\u015A!\x03\x02\x02\x02\u015B\u015C\t\x02\x02\x02\u015C", "#\x03\x02\x02\x02\u015D\u015E\x06\x13\x02\x02\u015E", "\u0179\x07H\x02\x02\u015F\u0164\x05d3\x02\u0160\u0161\x07", "\x07\x02\x02\u0161\u0163\x05d3\x02\u0162\u0160\x03\x02", "\x02\x02\u0163\u0166\x03\x02\x02\x02\u0164\u0162\x03\x02", "\x02\x02\u0164\u0165\x03\x02\x02\x02\u0165\u0168\x03\x02", "\x02\x02\u0166\u0164\x03\x02\x02\x02\u0167\u0169\x07\x07", "\x02\x02\u0168\u0167\x03\x02\x02\x02\u0168\u0169\x03\x02", "\x02\x02\u0169\u016B\x03\x02\x02\x02\u016A\u015F\x03\x02", "\x02\x02\u016A\u016B\x03\x02\x02\x02\u016B\u017A\x03\x02", "\x02\x02\u016C\u016D\x07\x17\x02\x02\u016D\u0177\x05d", "3\x02\u016E\u016F\x07\x07\x02\x02\u016F\u0171\x05d3\x02", "\u0170\u016E\x03\x02\x02\x02\u0171\u0172\x03\x02\x02\x02", "\u0172\u0170\x03\x02\x02\x02\u0172\u0173\x03\x02\x02\x02", "\u0173\u0175\x03\x02\x02\x02\u0174\u0176\x07\x07\x02\x02", "\u0175\u0174\x03\x02\x02\x02\u0175\u0176\x03\x02\x02\x02", "\u0176\u0178\x03\x02\x02\x02\u0177\u0170\x03\x02\x02\x02", "\u0177\u0178\x03\x02\x02\x02\u0178\u017A\x03\x02\x02\x02", "\u0179\u016A\x03\x02\x02\x02\u0179\u016C\x03\x02\x02\x02", "\u017A%\x03\x02\x02\x02\u017B\u017C\x07\x18\x02\x02", "\u017C\u017D\x05\x90I\x02\u017D'\x03\x02\x02\x02\u017E", "\u017F\x07\x19\x02\x02\u017F)\x03\x02\x02\x02\u0180", "\u0186\x05,\x17\x02\u0181\u0186\x05.\x18\x02\u0182\u0186", "\x050\x19\x02\u0183\u0186\x054\x1B\x02\u0184\u0186\x05", "2\x1A\x02\u0185\u0180\x03\x02\x02\x02\u0185\u0181\x03", "\x02\x02\x02\u0185\u0182\x03\x02\x02\x02\u0185\u0183\x03", "\x02\x02\x02\u0185\u0184\x03\x02\x02\x02\u0186+\x03", "\x02\x02\x02\u0187\u0188\x07\x1A\x02\x02\u0188-\x03", "\x02\x02\x02\u0189\u018A\x07\x1B\x02\x02\u018A/\x03", "\x02\x02\x02\u018B\u018D\x07\x1C\x02\x02\u018C\u018E\x05", "\x92J\x02\u018D\u018C\x03\x02\x02\x02\u018D\u018E\x03", "\x02\x02\x02\u018E1\x03\x02\x02\x02\u018F\u0190\x05", "\xACW\x02\u01903\x03\x02\x02\x02\u0191\u019B\x07\x1D", "\x02\x02\u0192\u0199\x05d3\x02\u0193\u0194\x07\x07\x02", "\x02\u0194\u0197\x05d3\x02\u0195\u0196\x07\x07\x02\x02", "\u0196\u0198\x05d3\x02\u0197\u0195\x03\x02\x02\x02\u0197", "\u0198\x03\x02\x02\x02\u0198\u019A\x03\x02\x02\x02\u0199", "\u0193\x03\x02\x02\x02\u0199\u019A\x03\x02\x02\x02\u019A", "\u019C\x03\x02\x02\x02\u019B\u0192\x03\x02\x02\x02\u019B", "\u019C\x03\x02\x02\x02\u019C5\x03\x02\x02\x02\u019D", "\u01A0\x058\x1D\x02\u019E\u01A0\x05:\x1E\x02\u019F\u019D", "\x03\x02\x02\x02\u019F\u019E\x03\x02\x02\x02\u01A07", "\x03\x02\x02\x02\u01A1\u01A2\x07\x1E\x02\x02\u01A2\u01A3", "\x05B\"\x02\u01A39\x03\x02\x02\x02\u01A4\u01B1\x07\x1F", "\x02\x02\u01A5\u01A7\x07 \x02\x02\u01A6\u01A5\x03\x02", "\x02\x02\u01A7\u01AA\x03\x02\x02\x02\u01A8\u01A6\x03\x02", "\x02\x02\u01A8\u01A9\x03\x02\x02\x02\u01A9\u01AB\x03\x02", "\x02\x02\u01AA\u01A8\x03\x02\x02\x02\u01AB\u01B2\x05D", "#\x02\u01AC\u01AE\x07 \x02\x02\u01AD\u01AC\x03\x02\x02", "\x02\u01AE\u01AF\x03\x02\x02\x02\u01AF\u01AD\x03\x02\x02", "\x02\u01AF\u01B0\x03\x02\x02\x02\u01B0\u01B2\x03\x02\x02", "\x02\u01B1\u01A8\x03\x02\x02\x02\u01B1\u01AD\x03\x02\x02", "\x02\u01B2\u01B3\x03\x02\x02\x02\u01B3\u01BA\x07\x1E\x02", "\x02\u01B4\u01BB\x07\b\x02\x02\u01B5\u01B6\x07N\x02\x02", "\u01B6\u01B7\x05@!\x02\u01B7\u01B8\x07O\x02\x02\u01B8\u01BB", "\x03\x02\x02\x02\u01B9\u01BB\x05@!\x02\u01BA\u01B4\x03", "\x02\x02\x02\u01BA\u01B5\x03\x02\x02\x02\u01BA\u01B9\x03", "\x02\x02\x02\u01BB;\x03\x02\x02\x02\u01BC\u01BF\x07", "H\x02\x02\u01BD\u01BE\x07!\x02\x02\u01BE\u01C0\x07H\x02", "\x02\u01BF\u01BD\x03\x02\x02\x02\u01BF\u01C0\x03\x02\x02", "\x02\u01C0=\x03\x02\x02\x02\u01C1\u01C4\x05D#\x02\u01C2", "\u01C3\x07!\x02\x02\u01C3\u01C5\x07H\x02\x02\u01C4\u01C2", "\x03\x02\x02\x02\u01C4\u01C5\x03\x02\x02\x02\u01C5?", "\x03\x02\x02\x02\u01C6\u01CB\x05<\x1F\x02\u01C7\u01C8", "\x07\x07\x02\x02\u01C8\u01CA\x05<\x1F\x02\u01C9\u01C7", "\x03\x02\x02\x02\u01CA\u01CD\x03\x02\x02\x02\u01CB\u01C9", "\x03\x02\x02\x02\u01CB\u01CC\x03\x02\x02\x02\u01CC\u01CF", "\x03\x02\x02\x02\u01CD\u01CB\x03\x02\x02\x02\u01CE\u01D0", "\x07\x07\x02\x02\u01CF\u01CE\x03\x02\x02\x02\u01CF\u01D0", "\x03\x02\x02\x02\u01D0A\x03\x02\x02\x02\u01D1\u01D6", "\x05> \x02\u01D2\u01D3\x07\x07\x02\x02\u01D3\u01D5\x05", "> \x02\u01D4\u01D2\x03\x02\x02\x02\u01D5\u01D8\x03\x02", "\x02\x02\u01D6\u01D4\x03\x02\x02\x02\u01D6\u01D7\x03\x02", "\x02\x02\u01D7C\x03\x02\x02\x02\u01D8\u01D6\x03\x02", "\x02\x02\u01D9\u01DE\x07H\x02\x02\u01DA\u01DB\x07 \x02", "\x02\u01DB\u01DD\x07H\x02\x02\u01DC\u01DA\x03\x02\x02", "\x02\u01DD\u01E0\x03\x02\x02\x02\u01DE\u01DC\x03\x02\x02", "\x02\u01DE\u01DF\x03\x02\x02\x02\u01DFE\x03\x02\x02", "\x02\u01E0\u01DE\x03\x02\x02\x02\u01E1\u01E2\x07\"\x02", "\x02\u01E2\u01E7\x07H\x02\x02\u01E3\u01E4\x07\x07\x02", "\x02\u01E4\u01E6\x07H\x02\x02\u01E5\u01E3\x03\x02\x02", "\x02\u01E6\u01E9\x03\x02\x02\x02\u01E7\u01E5\x03\x02\x02", "\x02\u01E7\u01E8\x03\x02\x02\x02\u01E8G\x03\x02\x02", "\x02\u01E9\u01E7\x03\x02\x02\x02\u01EA\u01EB\x07#\x02", "\x02\u01EB\u01F2\x05p9\x02\u01EC\u01ED\x07$\x02\x02\u01ED", "\u01F0\x05d3\x02\u01EE\u01EF\x07\x07\x02\x02\u01EF\u01F1", "\x05d3\x02\u01F0\u01EE\x03\x02\x02\x02\u01F0\u01F1\x03", "\x02\x02\x02\u01F1\u01F3\x03\x02\x02\x02\u01F2\u01EC\x03", "\x02\x02\x02\u01F2\u01F3\x03\x02\x02\x02\u01F3I\x03", "\x02\x02\x02\u01F4\u01F5\x07%\x02\x02\u01F5\u01F8\x05", "d3\x02\u01F6\u01F7\x07\x07\x02\x02\u01F7\u01F9\x05d3\x02", "\u01F8\u01F6\x03\x02\x02\x02\u01F8\u01F9\x03\x02\x02\x02", "\u01F9K\x03\x02\x02\x02\u01FA\u0203\x05N(\x02\u01FB\u0203", "\x05P)\x02\u01FC\u0203\x05R*\x02\u01FD\u0203\x05T+\x02\u01FE", "\u0203\x05V,\x02\u01FF\u0203\x05\x10\t\x02\u0200\u0203\x05", "\x96L\x02\u0201\u0203\x05\x0E\b\x02\u0202\u01FA\x03\x02", "\x02\x02\u0202\u01FB\x03\x02\x02\x02\u0202\u01FC\x03\x02", "\x02\x02\u0202\u01FD\x03\x02\x02\x02\u0202\u01FE\x03\x02", "\x02\x02\u0202\u01FF\x03\x02\x02\x02\u0202\u0200\x03\x02", "\x02\x02\u0202\u0201\x03\x02\x02\x02\u0203M\x03\x02", "\x02\x02\u0204\u0205\x07&\x02\x02\u0205\u0206\x05d3\x02", "\u0206\u0207\x07\x05\x02\x02\u0207\u020F\x05\\/\x02\u0208", "\u0209\x07'\x02\x02\u0209\u020A\x05d3\x02\u020A\u020B\x07", "\x05\x02\x02\u020B\u020C\x05\\/\x02\u020C\u020E\x03\x02", "\x02\x02\u020D\u0208\x03\x02\x02\x02\u020E\u0211\x03\x02", "\x02\x02\u020F\u020D\x03\x02\x02\x02\u020F\u0210\x03\x02", "\x02\x02\u0210\u0215\x03\x02\x02\x02\u0211\u020F\x03\x02", "\x02\x02\u0212\u0213\x07(\x02\x02\u0213\u0214\x07\x05", "\x02\x02\u0214\u0216\x05\\/\x02\u0215\u0212\x03\x02\x02", "\x02\u0215\u0216\x03\x02\x02\x02\u0216O\x03\x02\x02", "\x02\u0217\u0218\x07)\x02\x02\u0218\u0219\x05d3\x02\u0219", "\u021A\x07\x05\x02\x02\u021A\u021E\x05\\/\x02\u021B\u021C", "\x07(\x02\x02\u021C\u021D\x07\x05\x02\x02\u021D\u021F", "\x05\\/\x02\u021E\u021B\x03\x02\x02\x02\u021E\u021F\x03", "\x02\x02\x02\u021FQ\x03\x02\x02\x02\u0220\u0221\x07", "*\x02\x02\u0221\u0222\x05\x90I\x02\u0222\u0223\x07$\x02", "\x02\u0223\u0224\x05\x92J\x02\u0224\u0225\x07\x05\x02", "\x02\u0225\u0229\x05\\/\x02\u0226\u0227\x07(\x02\x02\u0227", "\u0228\x07\x05\x02\x02\u0228\u022A\x05\\/\x02\u0229\u0226", "\x03\x02\x02\x02\u0229\u022A\x03\x02\x02\x02\u022AS", "\x03\x02\x02\x02\u022B\u022C\x07+\x02\x02\u022C\u022D", "\x07\x05\x02\x02\u022D\u0243\x05\\/\x02\u022E\u022F\x05", "Z.\x02\u022F\u0230\x07\x05\x02\x02\u0230\u0231\x05\\/\x02", "\u0231\u0233\x03\x02\x02\x02\u0232\u022E\x03\x02\x02\x02", "\u0233\u0234\x03\x02\x02\x02\u0234\u0232\x03\x02\x02\x02", "\u0234\u0235\x03\x02\x02\x02\u0235\u0239\x03\x02\x02\x02", "\u0236\u0237\x07(\x02\x02\u0237\u0238\x07\x05\x02\x02", "\u0238\u023A\x05\\/\x02\u0239\u0236\x03\x02\x02\x02\u0239", "\u023A\x03\x02\x02\x02\u023A\u023E\x03\x02\x02\x02\u023B", "\u023C\x07,\x02\x02\u023C\u023D\x07\x05\x02\x02\u023D", "\u023F\x05\\/\x02\u023E\u023B\x03\x02\x02\x02\u023E\u023F", "\x03\x02\x02\x02\u023F\u0244\x03\x02\x02\x02\u0240\u0241", "\x07,\x02\x02\u0241\u0242\x07\x05\x02\x02\u0242\u0244", "\x05\\/\x02\u0243\u0232\x03\x02\x02\x02\u0243\u0240\x03", "\x02\x02\x02\u0244U\x03\x02\x02\x02\u0245\u0246\x07", "-\x02\x02\u0246\u024B\x05X-\x02\u0247\u0248\x07\x07\x02", "\x02\u0248\u024A\x05X-\x02\u0249\u0247\x03\x02\x02\x02", "\u024A\u024D\x03\x02\x02\x02\u024B\u0249\x03\x02\x02\x02", "\u024B\u024C\x03\x02\x02\x02\u024C\u024E\x03\x02\x02\x02", "\u024D\u024B\x03\x02\x02\x02\u024E\u024F\x07\x05\x02\x02", "\u024F\u0250\x05\\/\x02\u0250W\x03\x02\x02\x02\u0251\u0254", "\x05d3\x02\u0252\u0253\x07!\x02\x02\u0253\u0255\x05p9\x02", "\u0254\u0252\x03\x02\x02\x02\u0254\u0255\x03\x02\x02\x02", "\u0255Y\x03\x02\x02\x02\u0256\u025C\x07.\x02\x02\u0257", "\u025A\x05d3\x02\u0258\u0259\t\x03\x02\x02\u0259\u025B\x05", "d3\x02\u025A\u0258\x03\x02\x02\x02\u025A\u025B\x03\x02", "\x02\x02\u025B\u025D\x03\x02\x02\x02\u025C\u0257\x03\x02", "\x02\x02\u025C\u025D\x03\x02\x02\x02\u025D[\x03\x02", "\x02\x02\u025E\u0269\x05\x1C\x0F\x02\u025F\u0260\x07W", "\x02\x02\u0260\u0262\x07U\x02\x02\u0261\u0263\x05\x1A", "\x0E\x02\u0262\u0261\x03\x02\x02\x02\u0263\u0264\x03\x02", "\x02\x02\u0264\u0262\x03\x02\x02\x02\u0264\u0265\x03\x02", "\x02\x02\u0265\u0266\x03\x02\x02\x02\u0266\u0267\x07V", "\x02\x02\u0267\u0269\x03\x02\x02\x02\u0268\u025E\x03\x02", "\x02\x02\u0268\u025F\x03\x02\x02\x02\u0269]\x03\x02", "\x02\x02\u026A\u0274\x05`1\x02\u026B\u026C\x07\x07\x02", "\x02\u026C\u026E\x05`1\x02\u026D\u026B\x03\x02\x02\x02", "\u026E\u026F\x03\x02\x02\x02\u026F\u026D\x03\x02\x02\x02", "\u026F\u0270\x03\x02\x02\x02\u0270\u0272\x03\x02\x02\x02", "\u0271\u0273\x07\x07\x02\x02\u0272\u0271\x03\x02\x02\x02", "\u0272\u0273\x03\x02\x02\x02\u0273\u0275\x03\x02\x02\x02", "\u0274\u026D\x03\x02\x02\x02\u0274\u0275\x03\x02\x02\x02", "\u0275_\x03\x02\x02\x02\u0276\u0279\x05f4\x02\u0277\u0279", "\x05b2\x02\u0278\u0276\x03\x02\x02\x02\u0278\u0277\x03", "\x02\x02\x02\u0279a\x03\x02\x02\x02\u027A\u027C\x07", "/\x02\x02\u027B\u027D\x05\x14\x0B\x02\u027C\u027B\x03", "\x02\x02\x02\u027C\u027D\x03\x02\x02\x02\u027D\u027E\x03", "\x02\x02\x02\u027E\u027F\x07\x05\x02\x02\u027F\u0280\x05", "`1\x02\u0280c\x03\x02\x02\x02\u0281\u0287\x05f4\x02\u0282", "\u0283\x07&\x02\x02\u0283\u0284\x05f4\x02\u0284\u0285\x07", "(\x02\x02\u0285\u0286\x05d3\x02\u0286\u0288\x03\x02\x02", "\x02\u0287\u0282\x03\x02\x02\x02\u0287\u0288\x03\x02\x02", "\x02\u0288\u028B\x03\x02\x02\x02\u0289\u028B\x05\x86D", "\x02\u028A\u0281\x03\x02\x02\x02\u028A\u0289\x03\x02\x02", "\x02\u028Be\x03\x02\x02\x02\u028C\u0291\x05h5\x02\u028D", "\u028E\x070\x02\x02\u028E\u0290\x05h5\x02\u028F\u028D\x03", "\x02\x02\x02\u0290\u0293\x03\x02\x02\x02\u0291\u028F\x03", "\x02\x02\x02\u0291\u0292\x03\x02\x02\x02\u0292g\x03", "\x02\x02\x02\u0293\u0291\x03\x02\x02\x02\u0294\u0299\x05", "j6\x02\u0295\u0296\x071\x02\x02\u0296\u0298\x05j6\x02\u0297", "\u0295\x03\x02\x02\x02\u0298\u029B\x03\x02\x02\x02\u0299", "\u0297\x03\x02\x02\x02\u0299\u029A\x03\x02\x02\x02\u029A", "i\x03\x02\x02\x02\u029B\u0299\x03\x02\x02\x02\u029C", "\u029D\x072\x02\x02\u029D\u02A0\x05j6\x02\u029E\u02A0\x05", "l7\x02\u029F\u029C\x03\x02\x02\x02\u029F\u029E\x03\x02", "\x02\x02\u02A0k\x03\x02\x02\x02\u02A1\u02A7\x05p9\x02", "\u02A2\u02A3\x05n8\x02\u02A3\u02A4\x05p9\x02\u02A4\u02A6\x03", "\x02\x02\x02\u02A5\u02A2\x03\x02\x02\x02\u02A6\u02A9\x03", "\x02\x02\x02\u02A7\u02A5\x03\x02\x02\x02\u02A7\u02A8\x03", "\x02\x02\x02\u02A8m\x03\x02\x02\x02\u02A9\u02A7\x03", "\x02\x02\x02\u02AA\u02B8\x073\x02\x02\u02AB\u02B8\x07", "4\x02\x02\u02AC\u02B8\x075\x02\x02\u02AD\u02B8\x076\x02", "\x02\u02AE\u02B8\x077\x02\x02\u02AF\u02B8\x078\x02\x02", "\u02B0\u02B8\x079\x02\x02\u02B1\u02B8\x07$\x02\x02\u02B2", "\u02B3\x072\x02\x02\u02B3\u02B8\x07$\x02\x02\u02B4\u02B8", "\x07:\x02\x02\u02B5\u02B6\x07:\x02\x02\u02B6\u02B8\x07", "2\x02\x02\u02B7\u02AA\x03\x02\x02\x02\u02B7\u02AB\x03", "\x02\x02\x02\u02B7\u02AC\x03\x02\x02\x02\u02B7\u02AD\x03", "\x02\x02\x02\u02B7\u02AE\x03\x02\x02\x02\u02B7\u02AF\x03", "\x02\x02\x02\u02B7\u02B0\x03\x02\x02\x02\u02B7\u02B1\x03", "\x02\x02\x02\u02B7\u02B2\x03\x02\x02\x02\u02B7\u02B4\x03", "\x02\x02\x02\u02B7\u02B5\x03\x02\x02\x02\u02B8o\x03", "\x02\x02\x02\u02B9\u02BE\x05r:\x02\u02BA\u02BB\x07;\x02", "\x02\u02BB\u02BD\x05r:\x02\u02BC\u02BA\x03\x02\x02\x02", "\u02BD\u02C0\x03\x02\x02\x02\u02BE\u02BC\x03\x02\x02\x02", "\u02BE\u02BF\x03\x02\x02\x02\u02BFq\x03\x02\x02\x02", "\u02C0\u02BE\x03\x02\x02\x02\u02C1\u02C6\x05t;\x02\u02C2", "\u02C3\x07<\x02\x02\u02C3\u02C5\x05t;\x02\u02C4\u02C2\x03", "\x02\x02\x02\u02C5\u02C8\x03\x02\x02\x02\u02C6\u02C4\x03", "\x02\x02\x02\u02C6\u02C7\x03\x02\x02\x02\u02C7s\x03", "\x02\x02\x02\u02C8\u02C6\x03\x02\x02\x02\u02C9\u02CE\x05", "v<\x02\u02CA\u02CB\x07=\x02\x02\u02CB\u02CD\x05v<\x02\u02CC", "\u02CA\x03\x02\x02\x02\u02CD\u02D0\x03\x02\x02\x02\u02CE", "\u02CC\x03\x02\x02\x02\u02CE\u02CF\x03\x02\x02\x02\u02CF", "u\x03\x02\x02\x02\u02D0\u02CE\x03\x02\x02\x02\u02D1", "\u02D6\x05x=\x02\u02D2\u02D3\t\x04\x02\x02\u02D3\u02D5\x05", "x=\x02\u02D4\u02D2\x03\x02\x02\x02\u02D5\u02D8\x03\x02", "\x02\x02\u02D6\u02D4\x03\x02\x02\x02\u02D6\u02D7\x03\x02", "\x02\x02\u02D7w\x03\x02\x02\x02\u02D8\u02D6\x03\x02", "\x02\x02\u02D9\u02DE\x05z>\x02\u02DA\u02DB\t\x05\x02\x02", "\u02DB\u02DD\x05z>\x02\u02DC\u02DA\x03\x02\x02\x02\u02DD", "\u02E0\x03\x02\x02\x02\u02DE\u02DC\x03\x02\x02\x02\u02DE", "\u02DF\x03\x02\x02\x02\u02DFy\x03\x02\x02\x02\u02E0", "\u02DE\x03\x02\x02\x02\u02E1\u02E6\x05|?\x02\u02E2\u02E3", "\t\x06\x02\x02\u02E3\u02E5\x05|?\x02\u02E4\u02E2\x03\x02", "\x02\x02\u02E5\u02E8\x03\x02\x02\x02\u02E6\u02E4\x03\x02", "\x02\x02\u02E6\u02E7\x03\x02\x02\x02\u02E7{\x03\x02", "\x02\x02\u02E8\u02E6\x03\x02\x02\x02\u02E9\u02EA\t\x07", "\x02\x02\u02EA\u02ED\x05|?\x02\u02EB\u02ED\x05~@\x02\u02EC", "\u02E9\x03\x02\x02\x02\u02EC\u02EB\x03\x02\x02\x02\u02ED", "}\x03\x02\x02\x02\u02EE\u02F2\x05\x80A\x02\u02EF\u02F1", "\x05\x88E\x02\u02F0\u02EF\x03\x02\x02\x02\u02F1\u02F4", "\x03\x02\x02\x02\u02F2\u02F0\x03\x02\x02\x02\u02F2\u02F3", "\x03\x02\x02\x02\u02F3\u02F7\x03\x02\x02\x02\u02F4\u02F2", "\x03\x02\x02\x02\u02F5\u02F6\x07\t\x02\x02\u02F6\u02F8", "\x05|?\x02\u02F7\u02F5\x03\x02\x02\x02\u02F7\u02F8\x03", "\x02\x02\x02\u02F8\x7F\x03\x02\x02\x02\u02F9\u02FC\x07", "N\x02\x02\u02FA\u02FD\x05\xACW\x02\u02FB\u02FD\x05\x84", "C\x02\u02FC\u02FA\x03\x02\x02\x02\u02FC\u02FB\x03\x02", "\x02\x02\u02FC\u02FD\x03\x02\x02\x02\u02FD\u02FE\x03\x02", "\x02\x02\u02FE\u0318\x07O\x02\x02\u02FF\u0301\x07R\x02", "\x02\u0300\u0302\x05\x82B\x02\u0301\u0300\x03\x02\x02", "\x02\u0301\u0302\x03\x02\x02\x02\u0302\u0303\x03\x02\x02", "\x02\u0303\u0318\x07S\x02\x02\u0304\u0306\x07P\x02\x02", "\u0305\u0307\x05\x94K\x02\u0306\u0305\x03\x02\x02\x02", "\u0306\u0307\x03\x02\x02\x02\u0307\u0308\x03\x02\x02\x02", "\u0308\u0318\x07Q\x02\x02\u0309\u030A\x07E\x02\x02\u030A", "\u030B\x05\xA8U\x02\u030B\u030C\x07E\x02\x02\u030C\u0318", "\x03\x02\x02\x02\u030D\u030E\x07 \x02\x02\u030E\u030F", "\x07 \x02\x02\u030F\u0318\x07 \x02\x02\u0310\u0318\x07", "H\x02\x02\u0311\u0318\x07I\x02\x02\u0312\u0314\x07J\x02", "\x02\u0313\u0312\x03\x02\x02\x02\u0314\u0315\x03\x02\x02", "\x02\u0315\u0313\x03\x02\x02\x02\u0315\u0316\x03\x02\x02", "\x02\u0316\u0318\x03\x02\x02\x02\u0317\u02F9\x03\x02\x02", "\x02\u0317\u02FF\x03\x02\x02\x02\u0317\u0304\x03\x02\x02", "\x02\u0317\u0309\x03\x02\x02\x02\u0317\u030D\x03\x02\x02", "\x02\u0317\u0310\x03\x02\x02\x02\u0317\u0311\x03\x02\x02", "\x02\u0317\u0313\x03\x02\x02\x02\u0318\x81\x03\x02\x02", "\x02\u0319\u0325\x05d3\x02\u031A\u0326\x05\x9EP\x02\u031B", "\u031C\x07\x07\x02\x02\u031C\u031E\x05d3\x02\u031D\u031B", "\x03\x02\x02\x02\u031E\u0321\x03\x02\x02\x02\u031F\u031D", "\x03\x02\x02\x02\u031F\u0320\x03\x02\x02\x02\u0320\u0323", "\x03\x02\x02\x02\u0321\u031F\x03\x02\x02\x02\u0322\u0324", "\x07\x07\x02\x02\u0323\u0322\x03\x02\x02\x02\u0323\u0324", "\x03\x02\x02\x02\u0324\u0326\x03\x02\x02\x02\u0325\u031A", "\x03\x02\x02\x02\u0325\u031F\x03\x02\x02\x02\u0326\x83", "\x03\x02\x02\x02\u0327\u0333\x05d3\x02\u0328\u0334\x05", "\xA4S\x02\u0329\u032A\x07\x07\x02\x02\u032A\u032C\x05", "d3\x02\u032B\u0329\x03\x02\x02\x02\u032C\u032F\x03\x02", "\x02\x02\u032D\u032B\x03\x02\x02\x02\u032D\u032E\x03\x02", "\x02\x02\u032E\u0331\x03\x02\x02\x02\u032F\u032D\x03\x02", "\x02\x02\u0330\u0332\x07\x07\x02\x02\u0331\u0330\x03\x02", "\x02\x02\u0331\u0332\x03\x02\x02\x02\u0332\u0334\x03\x02", "\x02\x02\u0333\u0328\x03\x02\x02\x02\u0333\u032D\x03\x02", "\x02\x02\u0334\x85\x03\x02\x02\x02\u0335\u0337\x07/", "\x02\x02\u0336\u0338\x05\x14\x0B\x02\u0337\u0336\x03\x02", "\x02\x02\u0337\u0338\x03\x02\x02\x02\u0338\u0339\x03\x02", "\x02\x02\u0339\u033A\x07\x05\x02\x02\u033A\u033B\x05d", "3\x02\u033B\x87\x03\x02\x02\x02\u033C\u033E\x07N\x02", "\x02\u033D\u033F\x05\x98M\x02\u033E\u033D\x03\x02\x02", "\x02\u033E\u033F\x03\x02\x02\x02\u033F\u0340\x03\x02\x02", "\x02\u0340\u0348\x07O\x02\x02\u0341\u0342\x07R\x02\x02", "\u0342\u0343\x05\x8AF\x02\u0343\u0344\x07S\x02\x02\u0344", "\u0348\x03\x02\x02\x02\u0345\u0346\x07 \x02\x02\u0346", "\u0348\x07H\x02\x02\u0347\u033C\x03\x02\x02\x02\u0347", "\u0341\x03\x02\x02\x02\u0347\u0345\x03\x02\x02\x02\u0348", "\x89\x03\x02\x02\x02\u0349\u034E\x05\x8CG\x02\u034A", "\u034B\x07\x07\x02\x02\u034B\u034D\x05\x8CG\x02\u034C", "\u034A\x03\x02\x02\x02\u034D\u0350\x03\x02\x02\x02\u034E", "\u034C\x03\x02\x02\x02\u034E\u034F\x03\x02\x02\x02\u034F", "\u0352\x03\x02\x02\x02\u0350\u034E\x03\x02\x02\x02\u0351", "\u0353\x07\x07\x02\x02\u0352\u0351\x03\x02\x02\x02\u0352", "\u0353\x03\x02\x02\x02\u0353\x8B\x03\x02\x02\x02\u0354", "\u0355\x07 \x02\x02\u0355\u0356\x07 \x02\x02\u0356\u0363", "\x07 \x02\x02\u0357\u0363\x05d3\x02\u0358\u035A\x05d3\x02", "\u0359\u0358\x03\x02\x02\x02\u0359\u035A\x03\x02\x02\x02", "\u035A\u035B\x03\x02\x02\x02\u035B\u035D\x07\x05\x02\x02", "\u035C\u035E\x05d3\x02\u035D\u035C\x03\x02\x02\x02\u035D", "\u035E\x03\x02\x02\x02\u035E\u0360\x03\x02\x02\x02\u035F", "\u0361\x05\x8EH\x02\u0360\u035F\x03\x02\x02\x02\u0360", "\u0361\x03\x02\x02\x02\u0361\u0363\x03\x02\x02\x02\u0362", "\u0354\x03\x02\x02\x02\u0362\u0357\x03\x02\x02\x02\u0362", "\u0359\x03\x02\x02\x02\u0363\x8D\x03\x02\x02\x02\u0364", "\u0366\x07\x05\x02\x02\u0365\u0367\x05d3\x02\u0366\u0365", "\x03\x02\x02\x02\u0366\u0367\x03\x02\x02\x02\u0367\x8F", "\x03\x02\x02\x02\u0368\u036D\x05p9\x02\u0369\u036A\x07", "\x07\x02\x02\u036A\u036C\x05p9\x02\u036B\u0369\x03\x02", "\x02\x02\u036C\u036F\x03\x02\x02\x02\u036D\u036B\x03\x02", "\x02\x02\u036D\u036E\x03\x02\x02\x02\u036E\u0371\x03\x02", "\x02\x02\u036F\u036D\x03\x02\x02\x02\u0370\u0372\x07\x07", "\x02\x02\u0371\u0370\x03\x02\x02\x02\u0371\u0372\x03\x02", "\x02\x02\u0372\x91\x03\x02\x02\x02\u0373\u0378\x05d", "3\x02\u0374\u0375\x07\x07\x02\x02\u0375\u0377\x05d3\x02", "\u0376\u0374\x03\x02\x02\x02\u0377\u037A\x03\x02\x02\x02", "\u0378\u0376\x03\x02\x02\x02\u0378\u0379\x03\x02\x02\x02", "\u0379\u037C\x03\x02\x02\x02\u037A\u0378\x03\x02\x02\x02", "\u037B\u037D\x07\x07\x02\x02\u037C\u037B\x03\x02\x02\x02", "\u037C\u037D\x03\x02\x02\x02\u037D\x93\x03\x02\x02\x02", "\u037E\u037F\x05d3\x02\u037F\u0380\x07\x05\x02\x02\u0380", "\u038F\x05d3\x02\u0381\u0390\x05\xA4S\x02\u0382\u0383\x07", "\x07\x02\x02\u0383\u0384\x05d3\x02\u0384\u0385\x07\x05", "\x02\x02\u0385\u0386\x05d3\x02\u0386\u0388\x03\x02\x02", "\x02\u0387\u0382\x03\x02\x02\x02\u0388\u038B\x03\x02\x02", "\x02\u0389\u0387\x03\x02\x02\x02\u0389\u038A\x03\x02\x02", "\x02\u038A\u038D\x03\x02\x02\x02\u038B\u0389\x03\x02\x02", "\x02\u038C\u038E\x07\x07\x02\x02\u038D\u038C\x03\x02\x02", "\x02\u038D\u038E\x03\x02\x02\x02\u038E\u0390\x03\x02\x02", "\x02\u038F\u0381\x03\x02\x02\x02\u038F\u0389\x03\x02\x02", "\x02\u0390\u03A0\x03\x02\x02\x02\u0391\u039D\x05d3\x02", "\u0392\u039E\x05\xA4S\x02\u0393\u0394\x07\x07\x02\x02", "\u0394\u0396\x05d3\x02\u0395\u0393\x03\x02\x02\x02\u0396", "\u0399\x03\x02\x02\x02\u0397\u0395\x03\x02\x02\x02\u0397", "\u0398\x03\x02\x02\x02\u0398\u039B\x03\x02\x02\x02\u0399", "\u0397\x03\x02\x02\x02\u039A\u039C\x07\x07\x02\x02\u039B", "\u039A\x03\x02\x02\x02\u039B\u039C\x03\x02\x02\x02\u039C", "\u039E\x03\x02\x02\x02\u039D\u0392\x03\x02\x02\x02\u039D", "\u0397\x03\x02\x02\x02\u039E\u03A0\x03\x02\x02\x02\u039F", "\u037E\x03\x02\x02\x02\u039F\u0391\x03\x02\x02\x02\u03A0", "\x95\x03\x02\x02\x02\u03A1\u03A2\x07F\x02\x02\u03A2", "\u03A8\x07H\x02\x02\u03A3\u03A5\x07N\x02\x02\u03A4\u03A6", "\x05\x92J\x02\u03A5\u03A4\x03\x02\x02\x02\u03A5\u03A6", "\x03\x02\x02\x02\u03A6\u03A7\x03\x02\x02\x02\u03A7\u03A9", "\x07O\x02\x02\u03A8\u03A3\x03\x02\x02\x02\u03A8\u03A9", "\x03\x02\x02\x02\u03A9\u03AA\x03\x02\x02\x02\u03AA\u03AB", "\x07\x05\x02\x02\u03AB\u03AC\x05\\/\x02\u03AC\x97\x03", "\x02\x02\x02\u03AD\u03AE\x05\x9AN\x02\u03AE\u03AF\x07", "\x07\x02\x02\u03AF\u03B1\x03\x02\x02\x02\u03B0\u03AD\x03", "\x02\x02\x02\u03B1\u03B4\x03\x02\x02\x02\u03B2\u03B0\x03", "\x02\x02\x02\u03B2\u03B3\x03\x02\x02\x02\u03B3\u03C9\x03", "\x02\x02\x02\u03B4\u03B2\x03\x02\x02\x02\u03B5\u03B7\x05", "\x9AN\x02\u03B6\u03B8\x07\x07\x02\x02\u03B7\u03B6\x03", "\x02\x02\x02\u03B7\u03B8\x03\x02\x02\x02\u03B8\u03CA\x03", "\x02\x02\x02\u03B9\u03BA\x07\b\x02\x02\u03BA\u03BF\x05", "d3\x02\u03BB\u03BC\x07\x07\x02\x02\u03BC\u03BE\x05\x9A", "N\x02\u03BD\u03BB\x03\x02\x02\x02\u03BE\u03C1\x03\x02", "\x02\x02\u03BF\u03BD\x03\x02\x02\x02\u03BF\u03C0\x03\x02", "\x02\x02\u03C0\u03C5\x03\x02\x02\x02\u03C1\u03BF\x03\x02", "\x02\x02\u03C2\u03C3\x07\x07\x02\x02\u03C3\u03C4\x07\t", "\x02\x02\u03C4\u03C6\x05d3\x02\u03C5\u03C2\x03\x02\x02", "\x02\u03C5\u03C6\x03\x02\x02\x02\u03C6\u03CA\x03\x02\x02", "\x02\u03C7\u03C8\x07\t\x02\x02\u03C8\u03CA\x05d3\x02\u03C9", "\u03B5\x03\x02\x02\x02\u03C9\u03B9\x03\x02\x02\x02\u03C9", "\u03C7\x03\x02\x02\x02\u03CA\x99\x03\x02\x02\x02\u03CB", "\u03CD\x05d3\x02\u03CC\u03CE\x05\xA4S\x02\u03CD\u03CC\x03", "\x02\x02\x02\u03CD\u03CE\x03\x02\x02\x02\u03CE\u03D4\x03", "\x02\x02\x02\u03CF\u03D0\x05d3\x02\u03D0\u03D1\x07\x06", "\x02\x02\u03D1\u03D2\x05d3\x02\u03D2\u03D4\x03\x02\x02", "\x02\u03D3\u03CB\x03\x02\x02\x02\u03D3\u03CF\x03\x02\x02", "\x02\u03D4\x9B\x03\x02\x02\x02\u03D5\u03D8\x05\x9EP", "\x02\u03D6\u03D8\x05\xA0Q\x02\u03D7\u03D5\x03\x02\x02", "\x02\u03D7\u03D6\x03\x02\x02\x02\u03D8\x9D\x03\x02\x02", "\x02\u03D9\u03DA\x07*\x02\x02\u03DA\u03DB\x05\x90I\x02", "\u03DB\u03DC\x07$\x02\x02\u03DC\u03DE\x05^0\x02\u03DD\u03DF", "\x05\x9CO\x02\u03DE\u03DD\x03\x02\x02\x02\u03DE\u03DF", "\x03\x02\x02\x02\u03DF\x9F\x03\x02\x02\x02\u03E0\u03E1", "\x07&\x02\x02\u03E1\u03E3\x05`1\x02\u03E2\u03E4\x05\x9C", "O\x02\u03E3\u03E2\x03\x02\x02\x02\u03E3\u03E4\x03\x02", "\x02\x02\u03E4\xA1\x03\x02\x02\x02\u03E5\u03E8\x05\xA4", "S\x02\u03E6\u03E8\x05\xA6T\x02\u03E7\u03E5\x03\x02\x02", "\x02\u03E7\u03E6\x03\x02\x02\x02\u03E8\xA3\x03\x02\x02", "\x02\u03E9\u03EA\x07*\x02\x02\u03EA\u03EB\x05\x90I\x02", "\u03EB\u03EC\x07$\x02\x02\u03EC\u03EE\x05f4\x02\u03ED\u03EF", "\x05\xA2R\x02\u03EE\u03ED\x03\x02\x02\x02\u03EE\u03EF", "\x03\x02\x02\x02\u03EF\xA5\x03\x02\x02\x02\u03F0\u03F1", "\x07&\x02\x02\u03F1\u03F3\x05`1\x02\u03F2\u03F4\x05\xA2", "R\x02\u03F3\u03F2\x03\x02\x02\x02\u03F3\u03F4\x03\x02", "\x02\x02\u03F4\xA7\x03\x02\x02\x02\u03F5\u03FA\x05d", "3\x02\u03F6\u03F7\x07\x07\x02\x02\u03F7\u03F9\x05d3\x02", "\u03F8\u03F6\x03\x02\x02\x02\u03F9\u03FC\x03\x02\x02\x02", "\u03FA\u03F8\x03\x02\x02\x02\u03FA\u03FB\x03\x02\x02\x02", "\u03FB\xA9\x03\x02\x02\x02\u03FC\u03FA\x03\x02\x02\x02", "\u03FD\u03FE\x07H\x02\x02\u03FE\xAB\x03\x02\x02\x02", "\u03FF\u0401\x07G\x02\x02\u0400\u0402\x07\x1F\x02\x02", "\u0401\u0400\x03\x02\x02\x02\u0401\u0402\x03\x02\x02\x02", "\u0402\u0404\x03\x02\x02\x02\u0403\u0405\x05\x92J\x02", "\u0404\u0403\x03\x02\x02\x02\u0404\u0405\x03\x02\x02\x02", "\u0405\xAD\x03\x02\x02\x02\x91\xB1\xBA\xBE\xC0\xC9", "\xD2\xD5\xDC\xE1\xEB\xF2\xF8\u0100\u0104\u0109\u010F\u0113", "\u0117\u0119\u0120\u0127\u012B\u012F\u0136\u013A\u0147\u014D\u0152\u0156", "\u0159\u0164\u0168\u016A\u0172\u0175\u0177\u0179\u0185\u018D\u0197\u0199", "\u019B\u019F\u01A8\u01AF\u01B1\u01BA\u01BF\u01C4\u01CB\u01CF\u01D6\u01DE", "\u01E7\u01F0\u01F2\u01F8\u0202\u020F\u0215\u021E\u0229\u0234\u0239\u023E", "\u0243\u024B\u0254\u025A\u025C\u0264\u0268\u026F\u0272\u0274\u0278\u027C", "\u0287\u028A\u0291\u0299\u029F\u02A7\u02B7\u02BE\u02C6\u02CE\u02D6\u02DE", "\u02E6\u02EC\u02F2\u02F7\u02FC\u0301\u0306\u0315\u0317\u031F\u0323\u0325", "\u032D\u0331\u0333\u0337\u033E\u0347\u034E\u0352\u0359\u035D\u0360\u0362", "\u0366\u036D\u0371\u0378\u037C\u0389\u038D\u038F\u0397\u039B\u039D\u039F", "\u03A5\u03A8\u03B2\u03B7\u03BF\u03C5\u03C9\u03CD\u03D3\u03D7\u03DE\u03E3", "\u03E7\u03EE\u03F3\u03FA\u0401\u0404"].join("");
var atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);
var decisionsToDFA = atn.decisionToState.map(function (ds, index) {
  return new antlr4.dfa.DFA(ds, index);
});
var sharedContextCache = new antlr4.PredictionContextCache();
var literalNames = [null, "'@'", "'def'", "':'", "'='", "','", "'*'", "'**'", "';'", "'+='", "'-='", "'*='", "'/='", "'%='", "'&='", "'|='", "'^='", "'<<='", "'>>='", "'**='", "'//='", "'>>'", "'del'", "'pass'", "'break'", "'continue'", "'return'", "'raise'", "'import'", "'from'", "'.'", "'as'", "'global'", "'exec'", "'in'", "'assert'", "'if'", "'elif'", "'else'", "'while'", "'for'", "'try'", "'finally'", "'with'", "'except'", "'lambda'", "'or'", "'and'", "'not'", "'<'", "'>'", "'=='", "'>='", "'<='", "'<>'", "'!='", "'is'", "'|'", "'^'", "'&'", "'<<'", "'+'", "'-'", "'/'", "'%'", "'//'", "'~'", "'`'", "'class'", "'yield'", null, null, null, null, null, null, "'('", "')'", "'{'", "'}'", "'['", "']'"];
var symbolicNames = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "NAME", "NUMBER", "STRING", "LINENDING", "WHITESPACE", "COMMENT", "OPEN_PAREN", "CLOSE_PAREN", "OPEN_BRACE", "CLOSE_BRACE", "OPEN_BRACKET", "CLOSE_BRACKET", "UNKNOWN", "INDENT", "DEDENT", "NEWLINE", "ENDMARKER"];
var ruleNames = ["root", "single_input", "file_input", "eval_input", "decorator", "decorators", "decorated", "funcdef", "parameters", "varargslist", "fpdef", "fplist", "stmt", "simple_stmt", "small_stmt", "expr_stmt", "augassign", "print_stmt", "del_stmt", "pass_stmt", "flow_stmt", "break_stmt", "continue_stmt", "return_stmt", "yield_stmt", "raise_stmt", "import_stmt", "import_name", "import_from", "import_as_name", "dotted_as_name", "import_as_names", "dotted_as_names", "dotted_name", "global_stmt", "exec_stmt", "assert_stmt", "compound_stmt", "if_stmt", "while_stmt", "for_stmt", "try_stmt", "with_stmt", "with_item", "except_clause", "suite", "testlist_safe", "old_test", "old_lambdef", "test", "or_test", "and_test", "not_test", "comparison", "comp_op", "expr", "xor_expr", "and_expr", "shift_expr", "arith_expr", "term", "factor", "power", "atom", "listmaker", "testlist_comp", "lambdef", "trailer", "subscriptlist", "subscript", "sliceop", "exprlist", "testlist", "dictorsetmaker", "classdef", "arglist", "argument", "list_iter", "list_for", "list_if", "comp_iter", "comp_for", "comp_if", "testlist1", "encoding_decl", "yield_expr"];
function Python2Parser(input) {
  antlr4.Parser.call(this, input);
  this._interp = new antlr4.atn.ParserATNSimulator(this, atn, decisionsToDFA, sharedContextCache);
  this.ruleNames = ruleNames;
  this.literalNames = literalNames;
  this.symbolicNames = symbolicNames;
  return this;
}
Python2Parser.prototype = Object.create(antlr4.Parser.prototype);
Python2Parser.prototype.constructor = Python2Parser;
Object.defineProperty(Python2Parser.prototype, "atn", {
  get: function get() {
    return atn;
  }
});
Python2Parser.EOF = antlr4.Token.EOF;
Python2Parser.T__0 = 1;
Python2Parser.T__1 = 2;
Python2Parser.T__2 = 3;
Python2Parser.T__3 = 4;
Python2Parser.T__4 = 5;
Python2Parser.T__5 = 6;
Python2Parser.T__6 = 7;
Python2Parser.T__7 = 8;
Python2Parser.T__8 = 9;
Python2Parser.T__9 = 10;
Python2Parser.T__10 = 11;
Python2Parser.T__11 = 12;
Python2Parser.T__12 = 13;
Python2Parser.T__13 = 14;
Python2Parser.T__14 = 15;
Python2Parser.T__15 = 16;
Python2Parser.T__16 = 17;
Python2Parser.T__17 = 18;
Python2Parser.T__18 = 19;
Python2Parser.T__19 = 20;
Python2Parser.T__20 = 21;
Python2Parser.T__21 = 22;
Python2Parser.T__22 = 23;
Python2Parser.T__23 = 24;
Python2Parser.T__24 = 25;
Python2Parser.T__25 = 26;
Python2Parser.T__26 = 27;
Python2Parser.T__27 = 28;
Python2Parser.T__28 = 29;
Python2Parser.T__29 = 30;
Python2Parser.T__30 = 31;
Python2Parser.T__31 = 32;
Python2Parser.T__32 = 33;
Python2Parser.T__33 = 34;
Python2Parser.T__34 = 35;
Python2Parser.T__35 = 36;
Python2Parser.T__36 = 37;
Python2Parser.T__37 = 38;
Python2Parser.T__38 = 39;
Python2Parser.T__39 = 40;
Python2Parser.T__40 = 41;
Python2Parser.T__41 = 42;
Python2Parser.T__42 = 43;
Python2Parser.T__43 = 44;
Python2Parser.T__44 = 45;
Python2Parser.T__45 = 46;
Python2Parser.T__46 = 47;
Python2Parser.T__47 = 48;
Python2Parser.T__48 = 49;
Python2Parser.T__49 = 50;
Python2Parser.T__50 = 51;
Python2Parser.T__51 = 52;
Python2Parser.T__52 = 53;
Python2Parser.T__53 = 54;
Python2Parser.T__54 = 55;
Python2Parser.T__55 = 56;
Python2Parser.T__56 = 57;
Python2Parser.T__57 = 58;
Python2Parser.T__58 = 59;
Python2Parser.T__59 = 60;
Python2Parser.T__60 = 61;
Python2Parser.T__61 = 62;
Python2Parser.T__62 = 63;
Python2Parser.T__63 = 64;
Python2Parser.T__64 = 65;
Python2Parser.T__65 = 66;
Python2Parser.T__66 = 67;
Python2Parser.T__67 = 68;
Python2Parser.T__68 = 69;
Python2Parser.NAME = 70;
Python2Parser.NUMBER = 71;
Python2Parser.STRING = 72;
Python2Parser.LINENDING = 73;
Python2Parser.WHITESPACE = 74;
Python2Parser.COMMENT = 75;
Python2Parser.OPEN_PAREN = 76;
Python2Parser.CLOSE_PAREN = 77;
Python2Parser.OPEN_BRACE = 78;
Python2Parser.CLOSE_BRACE = 79;
Python2Parser.OPEN_BRACKET = 80;
Python2Parser.CLOSE_BRACKET = 81;
Python2Parser.UNKNOWN = 82;
Python2Parser.INDENT = 83;
Python2Parser.DEDENT = 84;
Python2Parser.NEWLINE = 85;
Python2Parser.ENDMARKER = 86;
Python2Parser.RULE_root = 0;
Python2Parser.RULE_single_input = 1;
Python2Parser.RULE_file_input = 2;
Python2Parser.RULE_eval_input = 3;
Python2Parser.RULE_decorator = 4;
Python2Parser.RULE_decorators = 5;
Python2Parser.RULE_decorated = 6;
Python2Parser.RULE_funcdef = 7;
Python2Parser.RULE_parameters = 8;
Python2Parser.RULE_varargslist = 9;
Python2Parser.RULE_fpdef = 10;
Python2Parser.RULE_fplist = 11;
Python2Parser.RULE_stmt = 12;
Python2Parser.RULE_simple_stmt = 13;
Python2Parser.RULE_small_stmt = 14;
Python2Parser.RULE_expr_stmt = 15;
Python2Parser.RULE_augassign = 16;
Python2Parser.RULE_print_stmt = 17;
Python2Parser.RULE_del_stmt = 18;
Python2Parser.RULE_pass_stmt = 19;
Python2Parser.RULE_flow_stmt = 20;
Python2Parser.RULE_break_stmt = 21;
Python2Parser.RULE_continue_stmt = 22;
Python2Parser.RULE_return_stmt = 23;
Python2Parser.RULE_yield_stmt = 24;
Python2Parser.RULE_raise_stmt = 25;
Python2Parser.RULE_import_stmt = 26;
Python2Parser.RULE_import_name = 27;
Python2Parser.RULE_import_from = 28;
Python2Parser.RULE_import_as_name = 29;
Python2Parser.RULE_dotted_as_name = 30;
Python2Parser.RULE_import_as_names = 31;
Python2Parser.RULE_dotted_as_names = 32;
Python2Parser.RULE_dotted_name = 33;
Python2Parser.RULE_global_stmt = 34;
Python2Parser.RULE_exec_stmt = 35;
Python2Parser.RULE_assert_stmt = 36;
Python2Parser.RULE_compound_stmt = 37;
Python2Parser.RULE_if_stmt = 38;
Python2Parser.RULE_while_stmt = 39;
Python2Parser.RULE_for_stmt = 40;
Python2Parser.RULE_try_stmt = 41;
Python2Parser.RULE_with_stmt = 42;
Python2Parser.RULE_with_item = 43;
Python2Parser.RULE_except_clause = 44;
Python2Parser.RULE_suite = 45;
Python2Parser.RULE_testlist_safe = 46;
Python2Parser.RULE_old_test = 47;
Python2Parser.RULE_old_lambdef = 48;
Python2Parser.RULE_test = 49;
Python2Parser.RULE_or_test = 50;
Python2Parser.RULE_and_test = 51;
Python2Parser.RULE_not_test = 52;
Python2Parser.RULE_comparison = 53;
Python2Parser.RULE_comp_op = 54;
Python2Parser.RULE_expr = 55;
Python2Parser.RULE_xor_expr = 56;
Python2Parser.RULE_and_expr = 57;
Python2Parser.RULE_shift_expr = 58;
Python2Parser.RULE_arith_expr = 59;
Python2Parser.RULE_term = 60;
Python2Parser.RULE_factor = 61;
Python2Parser.RULE_power = 62;
Python2Parser.RULE_atom = 63;
Python2Parser.RULE_listmaker = 64;
Python2Parser.RULE_testlist_comp = 65;
Python2Parser.RULE_lambdef = 66;
Python2Parser.RULE_trailer = 67;
Python2Parser.RULE_subscriptlist = 68;
Python2Parser.RULE_subscript = 69;
Python2Parser.RULE_sliceop = 70;
Python2Parser.RULE_exprlist = 71;
Python2Parser.RULE_testlist = 72;
Python2Parser.RULE_dictorsetmaker = 73;
Python2Parser.RULE_classdef = 74;
Python2Parser.RULE_arglist = 75;
Python2Parser.RULE_argument = 76;
Python2Parser.RULE_list_iter = 77;
Python2Parser.RULE_list_for = 78;
Python2Parser.RULE_list_if = 79;
Python2Parser.RULE_comp_iter = 80;
Python2Parser.RULE_comp_for = 81;
Python2Parser.RULE_comp_if = 82;
Python2Parser.RULE_testlist1 = 83;
Python2Parser.RULE_encoding_decl = 84;
Python2Parser.RULE_yield_expr = 85;
function RootContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null;
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = Python2Parser.RULE_root;
  return this;
}
RootContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
RootContext.prototype.constructor = RootContext;
RootContext.prototype.EOF = function () {
  return this.getToken(Python2Parser.EOF, 0);
};
RootContext.prototype.single_input = function () {
  return this.getTypedRuleContext(Single_inputContext, 0);
};
RootContext.prototype.file_input = function () {
  return this.getTypedRuleContext(File_inputContext, 0);
};
RootContext.prototype.eval_input = function () {
  return this.getTypedRuleContext(Eval_inputContext, 0);
};
RootContext.prototype.enterRule = function (listener) {
  if (listener instanceof Python2Listener) {
    listener.enterRoot(this);
  }
};
RootContext.prototype.exitRule = function (listener) {
  if (listener instanceof Python2Listener) {
    listener.exitRoot(this);
  }
};
RootContext.prototype.accept = function (visitor) {
  if (visitor instanceof Python2Visitor) {
    return visitor.visitRoot(this);
  } else {
    return visitor.visitChildren(this);
  }
};
Python2Parser.RootContext = RootContext;
Python2Parser.prototype.root = function () {
  var localctx = new RootContext(this, this._ctx, this.state);
  this.enterRule(localctx, 0, Python2Parser.RULE_root);
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 175;
    this._errHandler.sync(this);
    var la_ = this._interp.adaptivePredict(this._input, 0, this._ctx);
    if (la_ === 1) {
      this.state = 172;
      this.single_input();
    } else if (la_ === 2) {
      this.state = 173;
      this.file_input();
    } else if (la_ === 3) {
      this.state = 174;
      this.eval_input();
    }
    this.state = 177;
    this.match(Python2Parser.EOF);
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};
function Single_inputContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null;
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = Python2Parser.RULE_single_input;
  return this;
}
Single_inputContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Single_inputContext.prototype.constructor = Single_inputContext;
Single_inputContext.prototype.NEWLINE = function () {
  return this.getToken(Python2Parser.NEWLINE, 0);
};
Single_inputContext.prototype.simple_stmt = function () {
  return this.getTypedRuleContext(Simple_stmtContext, 0);
};
Single_inputContext.prototype.compound_stmt = function () {
  return this.getTypedRuleContext(Compound_stmtContext, 0);
};
Single_inputContext.prototype.enterRule = function (listener) {
  if (listener instanceof Python2Listener) {
    listener.enterSingle_input(this);
  }
};
Single_inputContext.prototype.exitRule = function (listener) {
  if (listener instanceof Python2Listener) {
    listener.exitSingle_input(this);
  }
};
Single_inputContext.prototype.accept = function (visitor) {
  if (visitor instanceof Python2Visitor) {
    return visitor.visitSingle_input(this);
  } else {
    return visitor.visitChildren(this);
  }
};
Python2Parser.Single_inputContext = Single_inputContext;
Python2Parser.prototype.single_input = function () {
  var localctx = new Single_inputContext(this, this._ctx, this.state);
  this.enterRule(localctx, 2, Python2Parser.RULE_single_input);
  try {
    this.state = 184;
    this._errHandler.sync(this);
    var la_ = this._interp.adaptivePredict(this._input, 1, this._ctx);
    switch (la_) {
      case 1:
        this.enterOuterAlt(localctx, 1);
        this.state = 179;
        this.match(Python2Parser.NEWLINE);
        break;
      case 2:
        this.enterOuterAlt(localctx, 2);
        this.state = 180;
        this.simple_stmt();
        break;
      case 3:
        this.enterOuterAlt(localctx, 3);
        this.state = 181;
        this.compound_stmt();
        this.state = 182;
        this.match(Python2Parser.NEWLINE);
        break;
    }
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};
function File_inputContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null;
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = Python2Parser.RULE_file_input;
  return this;
}
File_inputContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
File_inputContext.prototype.constructor = File_inputContext;
File_inputContext.prototype.ENDMARKER = function () {
  return this.getToken(Python2Parser.ENDMARKER, 0);
};
File_inputContext.prototype.NEWLINE = function (i) {
  if (i === undefined) {
    i = null;
  }
  if (i === null) {
    return this.getTokens(Python2Parser.NEWLINE);
  } else {
    return this.getToken(Python2Parser.NEWLINE, i);
  }
};
File_inputContext.prototype.stmt = function (i) {
  if (i === undefined) {
    i = null;
  }
  if (i === null) {
    return this.getTypedRuleContexts(StmtContext);
  } else {
    return this.getTypedRuleContext(StmtContext, i);
  }
};
File_inputContext.prototype.enterRule = function (listener) {
  if (listener instanceof Python2Listener) {
    listener.enterFile_input(this);
  }
};
File_inputContext.prototype.exitRule = function (listener) {
  if (listener instanceof Python2Listener) {
    listener.exitFile_input(this);
  }
};
File_inputContext.prototype.accept = function (visitor) {
  if (visitor instanceof Python2Visitor) {
    return visitor.visitFile_input(this);
  } else {
    return visitor.visitChildren(this);
  }
};
Python2Parser.File_inputContext = File_inputContext;
Python2Parser.prototype.file_input = function () {
  var localctx = new File_inputContext(this, this._ctx, this.state);
  this.enterRule(localctx, 4, Python2Parser.RULE_file_input);
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 190;
    this._errHandler.sync(this);
    var _alt = this._interp.adaptivePredict(this._input, 3, this._ctx);
    while (_alt != 2 && _alt != antlr4.atn.ATN.INVALID_ALT_NUMBER) {
      if (_alt === 1) {
        this.state = 188;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input, 2, this._ctx);
        switch (la_) {
          case 1:
            this.state = 186;
            this.match(Python2Parser.NEWLINE);
            break;
          case 2:
            this.state = 187;
            this.stmt();
            break;
        }
      }
      this.state = 192;
      this._errHandler.sync(this);
      _alt = this._interp.adaptivePredict(this._input, 3, this._ctx);
    }
    this.state = 193;
    this.match(Python2Parser.ENDMARKER);
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};
function Eval_inputContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null;
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = Python2Parser.RULE_eval_input;
  return this;
}
Eval_inputContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Eval_inputContext.prototype.constructor = Eval_inputContext;
Eval_inputContext.prototype.testlist = function () {
  return this.getTypedRuleContext(TestlistContext, 0);
};
Eval_inputContext.prototype.ENDMARKER = function () {
  return this.getToken(Python2Parser.ENDMARKER, 0);
};
Eval_inputContext.prototype.NEWLINE = function (i) {
  if (i === undefined) {
    i = null;
  }
  if (i === null) {
    return this.getTokens(Python2Parser.NEWLINE);
  } else {
    return this.getToken(Python2Parser.NEWLINE, i);
  }
};
Eval_inputContext.prototype.enterRule = function (listener) {
  if (listener instanceof Python2Listener) {
    listener.enterEval_input(this);
  }
};
Eval_inputContext.prototype.exitRule = function (listener) {
  if (listener instanceof Python2Listener) {
    listener.exitEval_input(this);
  }
};
Eval_inputContext.prototype.accept = function (visitor) {
  if (visitor instanceof Python2Visitor) {
    return visitor.visitEval_input(this);
  } else {
    return visitor.visitChildren(this);
  }
};
Python2Parser.Eval_inputContext = Eval_inputContext;
Python2Parser.prototype.eval_input = function () {
  var localctx = new Eval_inputContext(this, this._ctx, this.state);
  this.enterRule(localctx, 6, Python2Parser.RULE_eval_input);
  var _la = 0; // Token type
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 195;
    this.testlist();
    this.state = 199;
    this._errHandler.sync(this);
    _la = this._input.LA(1);
    while (_la === Python2Parser.NEWLINE) {
      this.state = 196;
      this.match(Python2Parser.NEWLINE);
      this.state = 201;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
    }
    this.state = 202;
    this.match(Python2Parser.ENDMARKER);
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};
function DecoratorContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null;
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = Python2Parser.RULE_decorator;
  return this;
}
DecoratorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DecoratorContext.prototype.constructor = DecoratorContext;
DecoratorContext.prototype.dotted_name = function () {
  return this.getTypedRuleContext(Dotted_nameContext, 0);
};
DecoratorContext.prototype.NEWLINE = function () {
  return this.getToken(Python2Parser.NEWLINE, 0);
};
DecoratorContext.prototype.OPEN_PAREN = function () {
  return this.getToken(Python2Parser.OPEN_PAREN, 0);
};
DecoratorContext.prototype.CLOSE_PAREN = function () {
  return this.getToken(Python2Parser.CLOSE_PAREN, 0);
};
DecoratorContext.prototype.arglist = function () {
  return this.getTypedRuleContext(ArglistContext, 0);
};
DecoratorContext.prototype.enterRule = function (listener) {
  if (listener instanceof Python2Listener) {
    listener.enterDecorator(this);
  }
};
DecoratorContext.prototype.exitRule = function (listener) {
  if (listener instanceof Python2Listener) {
    listener.exitDecorator(this);
  }
};
DecoratorContext.prototype.accept = function (visitor) {
  if (visitor instanceof Python2Visitor) {
    return visitor.visitDecorator(this);
  } else {
    return visitor.visitChildren(this);
  }
};
Python2Parser.DecoratorContext = DecoratorContext;
Python2Parser.prototype.decorator = function () {
  var localctx = new DecoratorContext(this, this._ctx, this.state);
  this.enterRule(localctx, 8, Python2Parser.RULE_decorator);
  var _la = 0; // Token type
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 204;
    this.match(Python2Parser.T__0);
    this.state = 205;
    this.dotted_name();
    this.state = 211;
    this._errHandler.sync(this);
    _la = this._input.LA(1);
    if (_la === Python2Parser.OPEN_PAREN) {
      this.state = 206;
      this.match(Python2Parser.OPEN_PAREN);
      this.state = 208;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if ((_la & ~0x1f) == 0 && (1 << _la & (1 << Python2Parser.T__5 | 1 << Python2Parser.T__6 | 1 << Python2Parser.T__29)) !== 0 || (_la - 45 & ~0x1f) == 0 && (1 << _la - 45 & (1 << Python2Parser.T__44 - 45 | 1 << Python2Parser.T__47 - 45 | 1 << Python2Parser.T__60 - 45 | 1 << Python2Parser.T__61 - 45 | 1 << Python2Parser.T__65 - 45 | 1 << Python2Parser.T__66 - 45 | 1 << Python2Parser.NAME - 45 | 1 << Python2Parser.NUMBER - 45 | 1 << Python2Parser.STRING - 45 | 1 << Python2Parser.OPEN_PAREN - 45)) !== 0 || _la === Python2Parser.OPEN_BRACE || _la === Python2Parser.OPEN_BRACKET) {
        this.state = 207;
        this.arglist();
      }
      this.state = 210;
      this.match(Python2Parser.CLOSE_PAREN);
    }
    this.state = 213;
    this.match(Python2Parser.NEWLINE);
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};
function DecoratorsContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null;
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = Python2Parser.RULE_decorators;
  return this;
}
DecoratorsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DecoratorsContext.prototype.constructor = DecoratorsContext;
DecoratorsContext.prototype.decorator = function (i) {
  if (i === undefined) {
    i = null;
  }
  if (i === null) {
    return this.getTypedRuleContexts(DecoratorContext);
  } else {
    return this.getTypedRuleContext(DecoratorContext, i);
  }
};
DecoratorsContext.prototype.enterRule = function (listener) {
  if (listener instanceof Python2Listener) {
    listener.enterDecorators(this);
  }
};
DecoratorsContext.prototype.exitRule = function (listener) {
  if (listener instanceof Python2Listener) {
    listener.exitDecorators(this);
  }
};
DecoratorsContext.prototype.accept = function (visitor) {
  if (visitor instanceof Python2Visitor) {
    return visitor.visitDecorators(this);
  } else {
    return visitor.visitChildren(this);
  }
};
Python2Parser.DecoratorsContext = DecoratorsContext;
Python2Parser.prototype.decorators = function () {
  var localctx = new DecoratorsContext(this, this._ctx, this.state);
  this.enterRule(localctx, 10, Python2Parser.RULE_decorators);
  var _la = 0; // Token type
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 216;
    this._errHandler.sync(this);
    _la = this._input.LA(1);
    do {
      this.state = 215;
      this.decorator();
      this.state = 218;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
    } while (_la === Python2Parser.T__0);
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};
function DecoratedContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null;
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = Python2Parser.RULE_decorated;
  return this;
}
DecoratedContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DecoratedContext.prototype.constructor = DecoratedContext;
DecoratedContext.prototype.decorators = function () {
  return this.getTypedRuleContext(DecoratorsContext, 0);
};
DecoratedContext.prototype.classdef = function () {
  return this.getTypedRuleContext(ClassdefContext, 0);
};
DecoratedContext.prototype.funcdef = function () {
  return this.getTypedRuleContext(FuncdefContext, 0);
};
DecoratedContext.prototype.enterRule = function (listener) {
  if (listener instanceof Python2Listener) {
    listener.enterDecorated(this);
  }
};
DecoratedContext.prototype.exitRule = function (listener) {
  if (listener instanceof Python2Listener) {
    listener.exitDecorated(this);
  }
};
DecoratedContext.prototype.accept = function (visitor) {
  if (visitor instanceof Python2Visitor) {
    return visitor.visitDecorated(this);
  } else {
    return visitor.visitChildren(this);
  }
};
Python2Parser.DecoratedContext = DecoratedContext;
Python2Parser.prototype.decorated = function () {
  var localctx = new DecoratedContext(this, this._ctx, this.state);
  this.enterRule(localctx, 12, Python2Parser.RULE_decorated);
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 220;
    this.decorators();
    this.state = 223;
    this._errHandler.sync(this);
    switch (this._input.LA(1)) {
      case Python2Parser.T__67:
        this.state = 221;
        this.classdef();
        break;
      case Python2Parser.T__1:
        this.state = 222;
        this.funcdef();
        break;
      default:
        throw new antlr4.error.NoViableAltException(this);
    }
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};
function FuncdefContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null;
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = Python2Parser.RULE_funcdef;
  return this;
}
FuncdefContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FuncdefContext.prototype.constructor = FuncdefContext;
FuncdefContext.prototype.NAME = function () {
  return this.getToken(Python2Parser.NAME, 0);
};
FuncdefContext.prototype.parameters = function () {
  return this.getTypedRuleContext(ParametersContext, 0);
};
FuncdefContext.prototype.suite = function () {
  return this.getTypedRuleContext(SuiteContext, 0);
};
FuncdefContext.prototype.enterRule = function (listener) {
  if (listener instanceof Python2Listener) {
    listener.enterFuncdef(this);
  }
};
FuncdefContext.prototype.exitRule = function (listener) {
  if (listener instanceof Python2Listener) {
    listener.exitFuncdef(this);
  }
};
FuncdefContext.prototype.accept = function (visitor) {
  if (visitor instanceof Python2Visitor) {
    return visitor.visitFuncdef(this);
  } else {
    return visitor.visitChildren(this);
  }
};
Python2Parser.FuncdefContext = FuncdefContext;
Python2Parser.prototype.funcdef = function () {
  var localctx = new FuncdefContext(this, this._ctx, this.state);
  this.enterRule(localctx, 14, Python2Parser.RULE_funcdef);
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 225;
    this.match(Python2Parser.T__1);
    this.state = 226;
    this.match(Python2Parser.NAME);
    this.state = 227;
    this.parameters();
    this.state = 228;
    this.match(Python2Parser.T__2);
    this.state = 229;
    this.suite();
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};
function ParametersContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null;
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = Python2Parser.RULE_parameters;
  return this;
}
ParametersContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ParametersContext.prototype.constructor = ParametersContext;
ParametersContext.prototype.OPEN_PAREN = function () {
  return this.getToken(Python2Parser.OPEN_PAREN, 0);
};
ParametersContext.prototype.CLOSE_PAREN = function () {
  return this.getToken(Python2Parser.CLOSE_PAREN, 0);
};
ParametersContext.prototype.varargslist = function () {
  return this.getTypedRuleContext(VarargslistContext, 0);
};
ParametersContext.prototype.enterRule = function (listener) {
  if (listener instanceof Python2Listener) {
    listener.enterParameters(this);
  }
};
ParametersContext.prototype.exitRule = function (listener) {
  if (listener instanceof Python2Listener) {
    listener.exitParameters(this);
  }
};
ParametersContext.prototype.accept = function (visitor) {
  if (visitor instanceof Python2Visitor) {
    return visitor.visitParameters(this);
  } else {
    return visitor.visitChildren(this);
  }
};
Python2Parser.ParametersContext = ParametersContext;
Python2Parser.prototype.parameters = function () {
  var localctx = new ParametersContext(this, this._ctx, this.state);
  this.enterRule(localctx, 16, Python2Parser.RULE_parameters);
  var _la = 0; // Token type
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 231;
    this.match(Python2Parser.OPEN_PAREN);
    this.state = 233;
    this._errHandler.sync(this);
    _la = this._input.LA(1);
    if (_la === Python2Parser.T__5 || _la === Python2Parser.T__6 || _la === Python2Parser.NAME || _la === Python2Parser.OPEN_PAREN) {
      this.state = 232;
      this.varargslist();
    }
    this.state = 235;
    this.match(Python2Parser.CLOSE_PAREN);
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};
function VarargslistContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null;
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = Python2Parser.RULE_varargslist;
  return this;
}
VarargslistContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
VarargslistContext.prototype.constructor = VarargslistContext;
VarargslistContext.prototype.fpdef = function (i) {
  if (i === undefined) {
    i = null;
  }
  if (i === null) {
    return this.getTypedRuleContexts(FpdefContext);
  } else {
    return this.getTypedRuleContext(FpdefContext, i);
  }
};
VarargslistContext.prototype.NAME = function (i) {
  if (i === undefined) {
    i = null;
  }
  if (i === null) {
    return this.getTokens(Python2Parser.NAME);
  } else {
    return this.getToken(Python2Parser.NAME, i);
  }
};
VarargslistContext.prototype.test = function (i) {
  if (i === undefined) {
    i = null;
  }
  if (i === null) {
    return this.getTypedRuleContexts(TestContext);
  } else {
    return this.getTypedRuleContext(TestContext, i);
  }
};
VarargslistContext.prototype.enterRule = function (listener) {
  if (listener instanceof Python2Listener) {
    listener.enterVarargslist(this);
  }
};
VarargslistContext.prototype.exitRule = function (listener) {
  if (listener instanceof Python2Listener) {
    listener.exitVarargslist(this);
  }
};
VarargslistContext.prototype.accept = function (visitor) {
  if (visitor instanceof Python2Visitor) {
    return visitor.visitVarargslist(this);
  } else {
    return visitor.visitChildren(this);
  }
};
Python2Parser.VarargslistContext = VarargslistContext;
Python2Parser.prototype.varargslist = function () {
  var localctx = new VarargslistContext(this, this._ctx, this.state);
  this.enterRule(localctx, 18, Python2Parser.RULE_varargslist);
  var _la = 0; // Token type
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 279;
    this._errHandler.sync(this);
    var la_ = this._interp.adaptivePredict(this._input, 18, this._ctx);
    switch (la_) {
      case 1:
        this.state = 246;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while (_la === Python2Parser.NAME || _la === Python2Parser.OPEN_PAREN) {
          this.state = 237;
          this.fpdef();
          this.state = 240;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          if (_la === Python2Parser.T__3) {
            this.state = 238;
            this.match(Python2Parser.T__3);
            this.state = 239;
            this.test();
          }
          this.state = 242;
          this.match(Python2Parser.T__4);
          this.state = 248;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
        }
        this.state = 258;
        this._errHandler.sync(this);
        switch (this._input.LA(1)) {
          case Python2Parser.T__5:
            this.state = 249;
            this.match(Python2Parser.T__5);
            this.state = 250;
            this.match(Python2Parser.NAME);
            this.state = 254;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === Python2Parser.T__4) {
              this.state = 251;
              this.match(Python2Parser.T__4);
              this.state = 252;
              this.match(Python2Parser.T__6);
              this.state = 253;
              this.match(Python2Parser.NAME);
            }
            break;
          case Python2Parser.T__6:
            this.state = 256;
            this.match(Python2Parser.T__6);
            this.state = 257;
            this.match(Python2Parser.NAME);
            break;
          default:
            throw new antlr4.error.NoViableAltException(this);
        }
        break;
      case 2:
        this.state = 260;
        this.fpdef();
        this.state = 263;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if (_la === Python2Parser.T__3) {
          this.state = 261;
          this.match(Python2Parser.T__3);
          this.state = 262;
          this.test();
        }
        this.state = 273;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input, 16, this._ctx);
        while (_alt != 2 && _alt != antlr4.atn.ATN.INVALID_ALT_NUMBER) {
          if (_alt === 1) {
            this.state = 265;
            this.match(Python2Parser.T__4);
            this.state = 266;
            this.fpdef();
            this.state = 269;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === Python2Parser.T__3) {
              this.state = 267;
              this.match(Python2Parser.T__3);
              this.state = 268;
              this.test();
            }
          }
          this.state = 275;
          this._errHandler.sync(this);
          _alt = this._interp.adaptivePredict(this._input, 16, this._ctx);
        }
        this.state = 277;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if (_la === Python2Parser.T__4) {
          this.state = 276;
          this.match(Python2Parser.T__4);
        }
        break;
    }
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};
function FpdefContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null;
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = Python2Parser.RULE_fpdef;
  return this;
}
FpdefContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FpdefContext.prototype.constructor = FpdefContext;
FpdefContext.prototype.NAME = function () {
  return this.getToken(Python2Parser.NAME, 0);
};
FpdefContext.prototype.OPEN_PAREN = function () {
  return this.getToken(Python2Parser.OPEN_PAREN, 0);
};
FpdefContext.prototype.fplist = function () {
  return this.getTypedRuleContext(FplistContext, 0);
};
FpdefContext.prototype.CLOSE_PAREN = function () {
  return this.getToken(Python2Parser.CLOSE_PAREN, 0);
};
FpdefContext.prototype.enterRule = function (listener) {
  if (listener instanceof Python2Listener) {
    listener.enterFpdef(this);
  }
};
FpdefContext.prototype.exitRule = function (listener) {
  if (listener instanceof Python2Listener) {
    listener.exitFpdef(this);
  }
};
FpdefContext.prototype.accept = function (visitor) {
  if (visitor instanceof Python2Visitor) {
    return visitor.visitFpdef(this);
  } else {
    return visitor.visitChildren(this);
  }
};
Python2Parser.FpdefContext = FpdefContext;
Python2Parser.prototype.fpdef = function () {
  var localctx = new FpdefContext(this, this._ctx, this.state);
  this.enterRule(localctx, 20, Python2Parser.RULE_fpdef);
  try {
    this.state = 286;
    this._errHandler.sync(this);
    switch (this._input.LA(1)) {
      case Python2Parser.NAME:
        this.enterOuterAlt(localctx, 1);
        this.state = 281;
        this.match(Python2Parser.NAME);
        break;
      case Python2Parser.OPEN_PAREN:
        this.enterOuterAlt(localctx, 2);
        this.state = 282;
        this.match(Python2Parser.OPEN_PAREN);
        this.state = 283;
        this.fplist();
        this.state = 284;
        this.match(Python2Parser.CLOSE_PAREN);
        break;
      default:
        throw new antlr4.error.NoViableAltException(this);
    }
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};
function FplistContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null;
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = Python2Parser.RULE_fplist;
  return this;
}
FplistContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FplistContext.prototype.constructor = FplistContext;
FplistContext.prototype.fpdef = function (i) {
  if (i === undefined) {
    i = null;
  }
  if (i === null) {
    return this.getTypedRuleContexts(FpdefContext);
  } else {
    return this.getTypedRuleContext(FpdefContext, i);
  }
};
FplistContext.prototype.enterRule = function (listener) {
  if (listener instanceof Python2Listener) {
    listener.enterFplist(this);
  }
};
FplistContext.prototype.exitRule = function (listener) {
  if (listener instanceof Python2Listener) {
    listener.exitFplist(this);
  }
};
FplistContext.prototype.accept = function (visitor) {
  if (visitor instanceof Python2Visitor) {
    return visitor.visitFplist(this);
  } else {
    return visitor.visitChildren(this);
  }
};
Python2Parser.FplistContext = FplistContext;
Python2Parser.prototype.fplist = function () {
  var localctx = new FplistContext(this, this._ctx, this.state);
  this.enterRule(localctx, 22, Python2Parser.RULE_fplist);
  var _la = 0; // Token type
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 288;
    this.fpdef();
    this.state = 293;
    this._errHandler.sync(this);
    var _alt = this._interp.adaptivePredict(this._input, 20, this._ctx);
    while (_alt != 2 && _alt != antlr4.atn.ATN.INVALID_ALT_NUMBER) {
      if (_alt === 1) {
        this.state = 289;
        this.match(Python2Parser.T__4);
        this.state = 290;
        this.fpdef();
      }
      this.state = 295;
      this._errHandler.sync(this);
      _alt = this._interp.adaptivePredict(this._input, 20, this._ctx);
    }
    this.state = 297;
    this._errHandler.sync(this);
    _la = this._input.LA(1);
    if (_la === Python2Parser.T__4) {
      this.state = 296;
      this.match(Python2Parser.T__4);
    }
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};
function StmtContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null;
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = Python2Parser.RULE_stmt;
  return this;
}
StmtContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
StmtContext.prototype.constructor = StmtContext;
StmtContext.prototype.simple_stmt = function () {
  return this.getTypedRuleContext(Simple_stmtContext, 0);
};
StmtContext.prototype.compound_stmt = function () {
  return this.getTypedRuleContext(Compound_stmtContext, 0);
};
StmtContext.prototype.enterRule = function (listener) {
  if (listener instanceof Python2Listener) {
    listener.enterStmt(this);
  }
};
StmtContext.prototype.exitRule = function (listener) {
  if (listener instanceof Python2Listener) {
    listener.exitStmt(this);
  }
};
StmtContext.prototype.accept = function (visitor) {
  if (visitor instanceof Python2Visitor) {
    return visitor.visitStmt(this);
  } else {
    return visitor.visitChildren(this);
  }
};
Python2Parser.StmtContext = StmtContext;
Python2Parser.prototype.stmt = function () {
  var localctx = new StmtContext(this, this._ctx, this.state);
  this.enterRule(localctx, 24, Python2Parser.RULE_stmt);
  try {
    this.state = 301;
    this._errHandler.sync(this);
    var la_ = this._interp.adaptivePredict(this._input, 22, this._ctx);
    switch (la_) {
      case 1:
        this.enterOuterAlt(localctx, 1);
        this.state = 299;
        this.simple_stmt();
        break;
      case 2:
        this.enterOuterAlt(localctx, 2);
        this.state = 300;
        this.compound_stmt();
        break;
    }
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};
function Simple_stmtContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null;
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = Python2Parser.RULE_simple_stmt;
  return this;
}
Simple_stmtContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Simple_stmtContext.prototype.constructor = Simple_stmtContext;
Simple_stmtContext.prototype.small_stmt = function (i) {
  if (i === undefined) {
    i = null;
  }
  if (i === null) {
    return this.getTypedRuleContexts(Small_stmtContext);
  } else {
    return this.getTypedRuleContext(Small_stmtContext, i);
  }
};
Simple_stmtContext.prototype.NEWLINE = function () {
  return this.getToken(Python2Parser.NEWLINE, 0);
};
Simple_stmtContext.prototype.enterRule = function (listener) {
  if (listener instanceof Python2Listener) {
    listener.enterSimple_stmt(this);
  }
};
Simple_stmtContext.prototype.exitRule = function (listener) {
  if (listener instanceof Python2Listener) {
    listener.exitSimple_stmt(this);
  }
};
Simple_stmtContext.prototype.accept = function (visitor) {
  if (visitor instanceof Python2Visitor) {
    return visitor.visitSimple_stmt(this);
  } else {
    return visitor.visitChildren(this);
  }
};
Python2Parser.Simple_stmtContext = Simple_stmtContext;
Python2Parser.prototype.simple_stmt = function () {
  var localctx = new Simple_stmtContext(this, this._ctx, this.state);
  this.enterRule(localctx, 26, Python2Parser.RULE_simple_stmt);
  var _la = 0; // Token type
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 303;
    this.small_stmt();
    this.state = 308;
    this._errHandler.sync(this);
    var _alt = this._interp.adaptivePredict(this._input, 23, this._ctx);
    while (_alt != 2 && _alt != antlr4.atn.ATN.INVALID_ALT_NUMBER) {
      if (_alt === 1) {
        this.state = 304;
        this.match(Python2Parser.T__7);
        this.state = 305;
        this.small_stmt();
      }
      this.state = 310;
      this._errHandler.sync(this);
      _alt = this._interp.adaptivePredict(this._input, 23, this._ctx);
    }
    this.state = 312;
    this._errHandler.sync(this);
    _la = this._input.LA(1);
    if (_la === Python2Parser.T__7) {
      this.state = 311;
      this.match(Python2Parser.T__7);
    }
    this.state = 314;
    this.match(Python2Parser.NEWLINE);
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};
function Small_stmtContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null;
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = Python2Parser.RULE_small_stmt;
  return this;
}
Small_stmtContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Small_stmtContext.prototype.constructor = Small_stmtContext;
Small_stmtContext.prototype.expr_stmt = function () {
  return this.getTypedRuleContext(Expr_stmtContext, 0);
};
Small_stmtContext.prototype.print_stmt = function () {
  return this.getTypedRuleContext(Print_stmtContext, 0);
};
Small_stmtContext.prototype.del_stmt = function () {
  return this.getTypedRuleContext(Del_stmtContext, 0);
};
Small_stmtContext.prototype.pass_stmt = function () {
  return this.getTypedRuleContext(Pass_stmtContext, 0);
};
Small_stmtContext.prototype.flow_stmt = function () {
  return this.getTypedRuleContext(Flow_stmtContext, 0);
};
Small_stmtContext.prototype.import_stmt = function () {
  return this.getTypedRuleContext(Import_stmtContext, 0);
};
Small_stmtContext.prototype.global_stmt = function () {
  return this.getTypedRuleContext(Global_stmtContext, 0);
};
Small_stmtContext.prototype.exec_stmt = function () {
  return this.getTypedRuleContext(Exec_stmtContext, 0);
};
Small_stmtContext.prototype.assert_stmt = function () {
  return this.getTypedRuleContext(Assert_stmtContext, 0);
};
Small_stmtContext.prototype.enterRule = function (listener) {
  if (listener instanceof Python2Listener) {
    listener.enterSmall_stmt(this);
  }
};
Small_stmtContext.prototype.exitRule = function (listener) {
  if (listener instanceof Python2Listener) {
    listener.exitSmall_stmt(this);
  }
};
Small_stmtContext.prototype.accept = function (visitor) {
  if (visitor instanceof Python2Visitor) {
    return visitor.visitSmall_stmt(this);
  } else {
    return visitor.visitChildren(this);
  }
};
Python2Parser.Small_stmtContext = Small_stmtContext;
Python2Parser.prototype.small_stmt = function () {
  var localctx = new Small_stmtContext(this, this._ctx, this.state);
  this.enterRule(localctx, 28, Python2Parser.RULE_small_stmt);
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 325;
    this._errHandler.sync(this);
    var la_ = this._interp.adaptivePredict(this._input, 25, this._ctx);
    switch (la_) {
      case 1:
        this.state = 316;
        this.expr_stmt();
        break;
      case 2:
        this.state = 317;
        this.print_stmt();
        break;
      case 3:
        this.state = 318;
        this.del_stmt();
        break;
      case 4:
        this.state = 319;
        this.pass_stmt();
        break;
      case 5:
        this.state = 320;
        this.flow_stmt();
        break;
      case 6:
        this.state = 321;
        this.import_stmt();
        break;
      case 7:
        this.state = 322;
        this.global_stmt();
        break;
      case 8:
        this.state = 323;
        this.exec_stmt();
        break;
      case 9:
        this.state = 324;
        this.assert_stmt();
        break;
    }
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};
function Expr_stmtContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null;
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = Python2Parser.RULE_expr_stmt;
  return this;
}
Expr_stmtContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Expr_stmtContext.prototype.constructor = Expr_stmtContext;
Expr_stmtContext.prototype.testlist = function (i) {
  if (i === undefined) {
    i = null;
  }
  if (i === null) {
    return this.getTypedRuleContexts(TestlistContext);
  } else {
    return this.getTypedRuleContext(TestlistContext, i);
  }
};
Expr_stmtContext.prototype.augassign = function () {
  return this.getTypedRuleContext(AugassignContext, 0);
};
Expr_stmtContext.prototype.yield_expr = function (i) {
  if (i === undefined) {
    i = null;
  }
  if (i === null) {
    return this.getTypedRuleContexts(Yield_exprContext);
  } else {
    return this.getTypedRuleContext(Yield_exprContext, i);
  }
};
Expr_stmtContext.prototype.enterRule = function (listener) {
  if (listener instanceof Python2Listener) {
    listener.enterExpr_stmt(this);
  }
};
Expr_stmtContext.prototype.exitRule = function (listener) {
  if (listener instanceof Python2Listener) {
    listener.exitExpr_stmt(this);
  }
};
Expr_stmtContext.prototype.accept = function (visitor) {
  if (visitor instanceof Python2Visitor) {
    return visitor.visitExpr_stmt(this);
  } else {
    return visitor.visitChildren(this);
  }
};
Python2Parser.Expr_stmtContext = Expr_stmtContext;
Python2Parser.prototype.expr_stmt = function () {
  var localctx = new Expr_stmtContext(this, this._ctx, this.state);
  this.enterRule(localctx, 30, Python2Parser.RULE_expr_stmt);
  var _la = 0; // Token type
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 327;
    this.testlist();
    this.state = 343;
    this._errHandler.sync(this);
    switch (this._input.LA(1)) {
      case Python2Parser.T__8:
      case Python2Parser.T__9:
      case Python2Parser.T__10:
      case Python2Parser.T__11:
      case Python2Parser.T__12:
      case Python2Parser.T__13:
      case Python2Parser.T__14:
      case Python2Parser.T__15:
      case Python2Parser.T__16:
      case Python2Parser.T__17:
      case Python2Parser.T__18:
      case Python2Parser.T__19:
        this.state = 328;
        this.augassign();
        this.state = 331;
        this._errHandler.sync(this);
        switch (this._input.LA(1)) {
          case Python2Parser.T__68:
            this.state = 329;
            this.yield_expr();
            break;
          case Python2Parser.T__29:
          case Python2Parser.T__44:
          case Python2Parser.T__47:
          case Python2Parser.T__60:
          case Python2Parser.T__61:
          case Python2Parser.T__65:
          case Python2Parser.T__66:
          case Python2Parser.NAME:
          case Python2Parser.NUMBER:
          case Python2Parser.STRING:
          case Python2Parser.OPEN_PAREN:
          case Python2Parser.OPEN_BRACE:
          case Python2Parser.OPEN_BRACKET:
            this.state = 330;
            this.testlist();
            break;
          default:
            throw new antlr4.error.NoViableAltException(this);
        }
        break;
      case Python2Parser.T__3:
      case Python2Parser.T__7:
      case Python2Parser.NEWLINE:
        this.state = 340;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while (_la === Python2Parser.T__3) {
          this.state = 333;
          this.match(Python2Parser.T__3);
          this.state = 336;
          this._errHandler.sync(this);
          switch (this._input.LA(1)) {
            case Python2Parser.T__68:
              this.state = 334;
              this.yield_expr();
              break;
            case Python2Parser.T__29:
            case Python2Parser.T__44:
            case Python2Parser.T__47:
            case Python2Parser.T__60:
            case Python2Parser.T__61:
            case Python2Parser.T__65:
            case Python2Parser.T__66:
            case Python2Parser.NAME:
            case Python2Parser.NUMBER:
            case Python2Parser.STRING:
            case Python2Parser.OPEN_PAREN:
            case Python2Parser.OPEN_BRACE:
            case Python2Parser.OPEN_BRACKET:
              this.state = 335;
              this.testlist();
              break;
            default:
              throw new antlr4.error.NoViableAltException(this);
          }
          this.state = 342;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
        }
        break;
      default:
        throw new antlr4.error.NoViableAltException(this);
    }
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};
function AugassignContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null;
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = Python2Parser.RULE_augassign;
  return this;
}
AugassignContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AugassignContext.prototype.constructor = AugassignContext;
AugassignContext.prototype.enterRule = function (listener) {
  if (listener instanceof Python2Listener) {
    listener.enterAugassign(this);
  }
};
AugassignContext.prototype.exitRule = function (listener) {
  if (listener instanceof Python2Listener) {
    listener.exitAugassign(this);
  }
};
AugassignContext.prototype.accept = function (visitor) {
  if (visitor instanceof Python2Visitor) {
    return visitor.visitAugassign(this);
  } else {
    return visitor.visitChildren(this);
  }
};
Python2Parser.AugassignContext = AugassignContext;
Python2Parser.prototype.augassign = function () {
  var localctx = new AugassignContext(this, this._ctx, this.state);
  this.enterRule(localctx, 32, Python2Parser.RULE_augassign);
  var _la = 0; // Token type
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 345;
    _la = this._input.LA(1);
    if (!((_la & ~0x1f) == 0 && (1 << _la & (1 << Python2Parser.T__8 | 1 << Python2Parser.T__9 | 1 << Python2Parser.T__10 | 1 << Python2Parser.T__11 | 1 << Python2Parser.T__12 | 1 << Python2Parser.T__13 | 1 << Python2Parser.T__14 | 1 << Python2Parser.T__15 | 1 << Python2Parser.T__16 | 1 << Python2Parser.T__17 | 1 << Python2Parser.T__18 | 1 << Python2Parser.T__19)) !== 0)) {
      this._errHandler.recoverInline(this);
    } else {
      this._errHandler.reportMatch(this);
      this.consume();
    }
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};
function Print_stmtContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null;
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = Python2Parser.RULE_print_stmt;
  return this;
}
Print_stmtContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Print_stmtContext.prototype.constructor = Print_stmtContext;
Print_stmtContext.prototype.NAME = function () {
  return this.getToken(Python2Parser.NAME, 0);
};
Print_stmtContext.prototype.test = function (i) {
  if (i === undefined) {
    i = null;
  }
  if (i === null) {
    return this.getTypedRuleContexts(TestContext);
  } else {
    return this.getTypedRuleContext(TestContext, i);
  }
};
Print_stmtContext.prototype.enterRule = function (listener) {
  if (listener instanceof Python2Listener) {
    listener.enterPrint_stmt(this);
  }
};
Print_stmtContext.prototype.exitRule = function (listener) {
  if (listener instanceof Python2Listener) {
    listener.exitPrint_stmt(this);
  }
};
Print_stmtContext.prototype.accept = function (visitor) {
  if (visitor instanceof Python2Visitor) {
    return visitor.visitPrint_stmt(this);
  } else {
    return visitor.visitChildren(this);
  }
};
Python2Parser.Print_stmtContext = Print_stmtContext;
Python2Parser.prototype.print_stmt = function () {
  var localctx = new Print_stmtContext(this, this._ctx, this.state);
  this.enterRule(localctx, 34, Python2Parser.RULE_print_stmt);
  var _la = 0; // Token type
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 347;
    if (!(this._input.LT(1).text == 'print')) {
      throw new antlr4.error.FailedPredicateException(this, "this._input.LT(1).text=='print'");
    }
    this.state = 348;
    this.match(Python2Parser.NAME);
    this.state = 375;
    this._errHandler.sync(this);
    switch (this._input.LA(1)) {
      case Python2Parser.T__7:
      case Python2Parser.T__29:
      case Python2Parser.T__44:
      case Python2Parser.T__47:
      case Python2Parser.T__60:
      case Python2Parser.T__61:
      case Python2Parser.T__65:
      case Python2Parser.T__66:
      case Python2Parser.NAME:
      case Python2Parser.NUMBER:
      case Python2Parser.STRING:
      case Python2Parser.OPEN_PAREN:
      case Python2Parser.OPEN_BRACE:
      case Python2Parser.OPEN_BRACKET:
      case Python2Parser.NEWLINE:
        this.state = 360;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if ((_la - 30 & ~0x1f) == 0 && (1 << _la - 30 & (1 << Python2Parser.T__29 - 30 | 1 << Python2Parser.T__44 - 30 | 1 << Python2Parser.T__47 - 30 | 1 << Python2Parser.T__60 - 30)) !== 0 || (_la - 62 & ~0x1f) == 0 && (1 << _la - 62 & (1 << Python2Parser.T__61 - 62 | 1 << Python2Parser.T__65 - 62 | 1 << Python2Parser.T__66 - 62 | 1 << Python2Parser.NAME - 62 | 1 << Python2Parser.NUMBER - 62 | 1 << Python2Parser.STRING - 62 | 1 << Python2Parser.OPEN_PAREN - 62 | 1 << Python2Parser.OPEN_BRACE - 62 | 1 << Python2Parser.OPEN_BRACKET - 62)) !== 0) {
          this.state = 349;
          this.test();
          this.state = 354;
          this._errHandler.sync(this);
          var _alt = this._interp.adaptivePredict(this._input, 30, this._ctx);
          while (_alt != 2 && _alt != antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if (_alt === 1) {
              this.state = 350;
              this.match(Python2Parser.T__4);
              this.state = 351;
              this.test();
            }
            this.state = 356;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input, 30, this._ctx);
          }
          this.state = 358;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          if (_la === Python2Parser.T__4) {
            this.state = 357;
            this.match(Python2Parser.T__4);
          }
        }
        break;
      case Python2Parser.T__20:
        this.state = 362;
        this.match(Python2Parser.T__20);
        this.state = 363;
        this.test();
        this.state = 373;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if (_la === Python2Parser.T__4) {
          this.state = 366;
          this._errHandler.sync(this);
          var _alt = 1;
          do {
            switch (_alt) {
              case 1:
                this.state = 364;
                this.match(Python2Parser.T__4);
                this.state = 365;
                this.test();
                break;
              default:
                throw new antlr4.error.NoViableAltException(this);
            }
            this.state = 368;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input, 33, this._ctx);
          } while (_alt != 2 && _alt != antlr4.atn.ATN.INVALID_ALT_NUMBER);
          this.state = 371;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
          if (_la === Python2Parser.T__4) {
            this.state = 370;
            this.match(Python2Parser.T__4);
          }
        }
        break;
      default:
        throw new antlr4.error.NoViableAltException(this);
    }
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};
function Del_stmtContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null;
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = Python2Parser.RULE_del_stmt;
  return this;
}
Del_stmtContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Del_stmtContext.prototype.constructor = Del_stmtContext;
Del_stmtContext.prototype.exprlist = function () {
  return this.getTypedRuleContext(ExprlistContext, 0);
};
Del_stmtContext.prototype.enterRule = function (listener) {
  if (listener instanceof Python2Listener) {
    listener.enterDel_stmt(this);
  }
};
Del_stmtContext.prototype.exitRule = function (listener) {
  if (listener instanceof Python2Listener) {
    listener.exitDel_stmt(this);
  }
};
Del_stmtContext.prototype.accept = function (visitor) {
  if (visitor instanceof Python2Visitor) {
    return visitor.visitDel_stmt(this);
  } else {
    return visitor.visitChildren(this);
  }
};
Python2Parser.Del_stmtContext = Del_stmtContext;
Python2Parser.prototype.del_stmt = function () {
  var localctx = new Del_stmtContext(this, this._ctx, this.state);
  this.enterRule(localctx, 36, Python2Parser.RULE_del_stmt);
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 377;
    this.match(Python2Parser.T__21);
    this.state = 378;
    this.exprlist();
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};
function Pass_stmtContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null;
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = Python2Parser.RULE_pass_stmt;
  return this;
}
Pass_stmtContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Pass_stmtContext.prototype.constructor = Pass_stmtContext;
Pass_stmtContext.prototype.enterRule = function (listener) {
  if (listener instanceof Python2Listener) {
    listener.enterPass_stmt(this);
  }
};
Pass_stmtContext.prototype.exitRule = function (listener) {
  if (listener instanceof Python2Listener) {
    listener.exitPass_stmt(this);
  }
};
Pass_stmtContext.prototype.accept = function (visitor) {
  if (visitor instanceof Python2Visitor) {
    return visitor.visitPass_stmt(this);
  } else {
    return visitor.visitChildren(this);
  }
};
Python2Parser.Pass_stmtContext = Pass_stmtContext;
Python2Parser.prototype.pass_stmt = function () {
  var localctx = new Pass_stmtContext(this, this._ctx, this.state);
  this.enterRule(localctx, 38, Python2Parser.RULE_pass_stmt);
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 380;
    this.match(Python2Parser.T__22);
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};
function Flow_stmtContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null;
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = Python2Parser.RULE_flow_stmt;
  return this;
}
Flow_stmtContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Flow_stmtContext.prototype.constructor = Flow_stmtContext;
Flow_stmtContext.prototype.break_stmt = function () {
  return this.getTypedRuleContext(Break_stmtContext, 0);
};
Flow_stmtContext.prototype.continue_stmt = function () {
  return this.getTypedRuleContext(Continue_stmtContext, 0);
};
Flow_stmtContext.prototype.return_stmt = function () {
  return this.getTypedRuleContext(Return_stmtContext, 0);
};
Flow_stmtContext.prototype.raise_stmt = function () {
  return this.getTypedRuleContext(Raise_stmtContext, 0);
};
Flow_stmtContext.prototype.yield_stmt = function () {
  return this.getTypedRuleContext(Yield_stmtContext, 0);
};
Flow_stmtContext.prototype.enterRule = function (listener) {
  if (listener instanceof Python2Listener) {
    listener.enterFlow_stmt(this);
  }
};
Flow_stmtContext.prototype.exitRule = function (listener) {
  if (listener instanceof Python2Listener) {
    listener.exitFlow_stmt(this);
  }
};
Flow_stmtContext.prototype.accept = function (visitor) {
  if (visitor instanceof Python2Visitor) {
    return visitor.visitFlow_stmt(this);
  } else {
    return visitor.visitChildren(this);
  }
};
Python2Parser.Flow_stmtContext = Flow_stmtContext;
Python2Parser.prototype.flow_stmt = function () {
  var localctx = new Flow_stmtContext(this, this._ctx, this.state);
  this.enterRule(localctx, 40, Python2Parser.RULE_flow_stmt);
  try {
    this.state = 387;
    this._errHandler.sync(this);
    switch (this._input.LA(1)) {
      case Python2Parser.T__23:
        this.enterOuterAlt(localctx, 1);
        this.state = 382;
        this.break_stmt();
        break;
      case Python2Parser.T__24:
        this.enterOuterAlt(localctx, 2);
        this.state = 383;
        this.continue_stmt();
        break;
      case Python2Parser.T__25:
        this.enterOuterAlt(localctx, 3);
        this.state = 384;
        this.return_stmt();
        break;
      case Python2Parser.T__26:
        this.enterOuterAlt(localctx, 4);
        this.state = 385;
        this.raise_stmt();
        break;
      case Python2Parser.T__68:
        this.enterOuterAlt(localctx, 5);
        this.state = 386;
        this.yield_stmt();
        break;
      default:
        throw new antlr4.error.NoViableAltException(this);
    }
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};
function Break_stmtContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null;
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = Python2Parser.RULE_break_stmt;
  return this;
}
Break_stmtContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Break_stmtContext.prototype.constructor = Break_stmtContext;
Break_stmtContext.prototype.enterRule = function (listener) {
  if (listener instanceof Python2Listener) {
    listener.enterBreak_stmt(this);
  }
};
Break_stmtContext.prototype.exitRule = function (listener) {
  if (listener instanceof Python2Listener) {
    listener.exitBreak_stmt(this);
  }
};
Break_stmtContext.prototype.accept = function (visitor) {
  if (visitor instanceof Python2Visitor) {
    return visitor.visitBreak_stmt(this);
  } else {
    return visitor.visitChildren(this);
  }
};
Python2Parser.Break_stmtContext = Break_stmtContext;
Python2Parser.prototype.break_stmt = function () {
  var localctx = new Break_stmtContext(this, this._ctx, this.state);
  this.enterRule(localctx, 42, Python2Parser.RULE_break_stmt);
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 389;
    this.match(Python2Parser.T__23);
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};
function Continue_stmtContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null;
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = Python2Parser.RULE_continue_stmt;
  return this;
}
Continue_stmtContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Continue_stmtContext.prototype.constructor = Continue_stmtContext;
Continue_stmtContext.prototype.enterRule = function (listener) {
  if (listener instanceof Python2Listener) {
    listener.enterContinue_stmt(this);
  }
};
Continue_stmtContext.prototype.exitRule = function (listener) {
  if (listener instanceof Python2Listener) {
    listener.exitContinue_stmt(this);
  }
};
Continue_stmtContext.prototype.accept = function (visitor) {
  if (visitor instanceof Python2Visitor) {
    return visitor.visitContinue_stmt(this);
  } else {
    return visitor.visitChildren(this);
  }
};
Python2Parser.Continue_stmtContext = Continue_stmtContext;
Python2Parser.prototype.continue_stmt = function () {
  var localctx = new Continue_stmtContext(this, this._ctx, this.state);
  this.enterRule(localctx, 44, Python2Parser.RULE_continue_stmt);
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 391;
    this.match(Python2Parser.T__24);
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};
function Return_stmtContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null;
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = Python2Parser.RULE_return_stmt;
  return this;
}
Return_stmtContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Return_stmtContext.prototype.constructor = Return_stmtContext;
Return_stmtContext.prototype.testlist = function () {
  return this.getTypedRuleContext(TestlistContext, 0);
};
Return_stmtContext.prototype.enterRule = function (listener) {
  if (listener instanceof Python2Listener) {
    listener.enterReturn_stmt(this);
  }
};
Return_stmtContext.prototype.exitRule = function (listener) {
  if (listener instanceof Python2Listener) {
    listener.exitReturn_stmt(this);
  }
};
Return_stmtContext.prototype.accept = function (visitor) {
  if (visitor instanceof Python2Visitor) {
    return visitor.visitReturn_stmt(this);
  } else {
    return visitor.visitChildren(this);
  }
};
Python2Parser.Return_stmtContext = Return_stmtContext;
Python2Parser.prototype.return_stmt = function () {
  var localctx = new Return_stmtContext(this, this._ctx, this.state);
  this.enterRule(localctx, 46, Python2Parser.RULE_return_stmt);
  var _la = 0; // Token type
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 393;
    this.match(Python2Parser.T__25);
    this.state = 395;
    this._errHandler.sync(this);
    _la = this._input.LA(1);
    if ((_la - 30 & ~0x1f) == 0 && (1 << _la - 30 & (1 << Python2Parser.T__29 - 30 | 1 << Python2Parser.T__44 - 30 | 1 << Python2Parser.T__47 - 30 | 1 << Python2Parser.T__60 - 30)) !== 0 || (_la - 62 & ~0x1f) == 0 && (1 << _la - 62 & (1 << Python2Parser.T__61 - 62 | 1 << Python2Parser.T__65 - 62 | 1 << Python2Parser.T__66 - 62 | 1 << Python2Parser.NAME - 62 | 1 << Python2Parser.NUMBER - 62 | 1 << Python2Parser.STRING - 62 | 1 << Python2Parser.OPEN_PAREN - 62 | 1 << Python2Parser.OPEN_BRACE - 62 | 1 << Python2Parser.OPEN_BRACKET - 62)) !== 0) {
      this.state = 394;
      this.testlist();
    }
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};
function Yield_stmtContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null;
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = Python2Parser.RULE_yield_stmt;
  return this;
}
Yield_stmtContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Yield_stmtContext.prototype.constructor = Yield_stmtContext;
Yield_stmtContext.prototype.yield_expr = function () {
  return this.getTypedRuleContext(Yield_exprContext, 0);
};
Yield_stmtContext.prototype.enterRule = function (listener) {
  if (listener instanceof Python2Listener) {
    listener.enterYield_stmt(this);
  }
};
Yield_stmtContext.prototype.exitRule = function (listener) {
  if (listener instanceof Python2Listener) {
    listener.exitYield_stmt(this);
  }
};
Yield_stmtContext.prototype.accept = function (visitor) {
  if (visitor instanceof Python2Visitor) {
    return visitor.visitYield_stmt(this);
  } else {
    return visitor.visitChildren(this);
  }
};
Python2Parser.Yield_stmtContext = Yield_stmtContext;
Python2Parser.prototype.yield_stmt = function () {
  var localctx = new Yield_stmtContext(this, this._ctx, this.state);
  this.enterRule(localctx, 48, Python2Parser.RULE_yield_stmt);
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 397;
    this.yield_expr();
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};
function Raise_stmtContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null;
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = Python2Parser.RULE_raise_stmt;
  return this;
}
Raise_stmtContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Raise_stmtContext.prototype.constructor = Raise_stmtContext;
Raise_stmtContext.prototype.test = function (i) {
  if (i === undefined) {
    i = null;
  }
  if (i === null) {
    return this.getTypedRuleContexts(TestContext);
  } else {
    return this.getTypedRuleContext(TestContext, i);
  }
};
Raise_stmtContext.prototype.enterRule = function (listener) {
  if (listener instanceof Python2Listener) {
    listener.enterRaise_stmt(this);
  }
};
Raise_stmtContext.prototype.exitRule = function (listener) {
  if (listener instanceof Python2Listener) {
    listener.exitRaise_stmt(this);
  }
};
Raise_stmtContext.prototype.accept = function (visitor) {
  if (visitor instanceof Python2Visitor) {
    return visitor.visitRaise_stmt(this);
  } else {
    return visitor.visitChildren(this);
  }
};
Python2Parser.Raise_stmtContext = Raise_stmtContext;
Python2Parser.prototype.raise_stmt = function () {
  var localctx = new Raise_stmtContext(this, this._ctx, this.state);
  this.enterRule(localctx, 50, Python2Parser.RULE_raise_stmt);
  var _la = 0; // Token type
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 399;
    this.match(Python2Parser.T__26);
    this.state = 409;
    this._errHandler.sync(this);
    _la = this._input.LA(1);
    if ((_la - 30 & ~0x1f) == 0 && (1 << _la - 30 & (1 << Python2Parser.T__29 - 30 | 1 << Python2Parser.T__44 - 30 | 1 << Python2Parser.T__47 - 30 | 1 << Python2Parser.T__60 - 30)) !== 0 || (_la - 62 & ~0x1f) == 0 && (1 << _la - 62 & (1 << Python2Parser.T__61 - 62 | 1 << Python2Parser.T__65 - 62 | 1 << Python2Parser.T__66 - 62 | 1 << Python2Parser.NAME - 62 | 1 << Python2Parser.NUMBER - 62 | 1 << Python2Parser.STRING - 62 | 1 << Python2Parser.OPEN_PAREN - 62 | 1 << Python2Parser.OPEN_BRACE - 62 | 1 << Python2Parser.OPEN_BRACKET - 62)) !== 0) {
      this.state = 400;
      this.test();
      this.state = 407;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === Python2Parser.T__4) {
        this.state = 401;
        this.match(Python2Parser.T__4);
        this.state = 402;
        this.test();
        this.state = 405;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if (_la === Python2Parser.T__4) {
          this.state = 403;
          this.match(Python2Parser.T__4);
          this.state = 404;
          this.test();
        }
      }
    }
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};
function Import_stmtContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null;
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = Python2Parser.RULE_import_stmt;
  return this;
}
Import_stmtContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Import_stmtContext.prototype.constructor = Import_stmtContext;
Import_stmtContext.prototype.import_name = function () {
  return this.getTypedRuleContext(Import_nameContext, 0);
};
Import_stmtContext.prototype.import_from = function () {
  return this.getTypedRuleContext(Import_fromContext, 0);
};
Import_stmtContext.prototype.enterRule = function (listener) {
  if (listener instanceof Python2Listener) {
    listener.enterImport_stmt(this);
  }
};
Import_stmtContext.prototype.exitRule = function (listener) {
  if (listener instanceof Python2Listener) {
    listener.exitImport_stmt(this);
  }
};
Import_stmtContext.prototype.accept = function (visitor) {
  if (visitor instanceof Python2Visitor) {
    return visitor.visitImport_stmt(this);
  } else {
    return visitor.visitChildren(this);
  }
};
Python2Parser.Import_stmtContext = Import_stmtContext;
Python2Parser.prototype.import_stmt = function () {
  var localctx = new Import_stmtContext(this, this._ctx, this.state);
  this.enterRule(localctx, 52, Python2Parser.RULE_import_stmt);
  try {
    this.state = 413;
    this._errHandler.sync(this);
    switch (this._input.LA(1)) {
      case Python2Parser.T__27:
        this.enterOuterAlt(localctx, 1);
        this.state = 411;
        this.import_name();
        break;
      case Python2Parser.T__28:
        this.enterOuterAlt(localctx, 2);
        this.state = 412;
        this.import_from();
        break;
      default:
        throw new antlr4.error.NoViableAltException(this);
    }
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};
function Import_nameContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null;
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = Python2Parser.RULE_import_name;
  return this;
}
Import_nameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Import_nameContext.prototype.constructor = Import_nameContext;
Import_nameContext.prototype.dotted_as_names = function () {
  return this.getTypedRuleContext(Dotted_as_namesContext, 0);
};
Import_nameContext.prototype.enterRule = function (listener) {
  if (listener instanceof Python2Listener) {
    listener.enterImport_name(this);
  }
};
Import_nameContext.prototype.exitRule = function (listener) {
  if (listener instanceof Python2Listener) {
    listener.exitImport_name(this);
  }
};
Import_nameContext.prototype.accept = function (visitor) {
  if (visitor instanceof Python2Visitor) {
    return visitor.visitImport_name(this);
  } else {
    return visitor.visitChildren(this);
  }
};
Python2Parser.Import_nameContext = Import_nameContext;
Python2Parser.prototype.import_name = function () {
  var localctx = new Import_nameContext(this, this._ctx, this.state);
  this.enterRule(localctx, 54, Python2Parser.RULE_import_name);
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 415;
    this.match(Python2Parser.T__27);
    this.state = 416;
    this.dotted_as_names();
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};
function Import_fromContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null;
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = Python2Parser.RULE_import_from;
  return this;
}
Import_fromContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Import_fromContext.prototype.constructor = Import_fromContext;
Import_fromContext.prototype.dotted_name = function () {
  return this.getTypedRuleContext(Dotted_nameContext, 0);
};
Import_fromContext.prototype.OPEN_PAREN = function () {
  return this.getToken(Python2Parser.OPEN_PAREN, 0);
};
Import_fromContext.prototype.import_as_names = function () {
  return this.getTypedRuleContext(Import_as_namesContext, 0);
};
Import_fromContext.prototype.CLOSE_PAREN = function () {
  return this.getToken(Python2Parser.CLOSE_PAREN, 0);
};
Import_fromContext.prototype.enterRule = function (listener) {
  if (listener instanceof Python2Listener) {
    listener.enterImport_from(this);
  }
};
Import_fromContext.prototype.exitRule = function (listener) {
  if (listener instanceof Python2Listener) {
    listener.exitImport_from(this);
  }
};
Import_fromContext.prototype.accept = function (visitor) {
  if (visitor instanceof Python2Visitor) {
    return visitor.visitImport_from(this);
  } else {
    return visitor.visitChildren(this);
  }
};
Python2Parser.Import_fromContext = Import_fromContext;
Python2Parser.prototype.import_from = function () {
  var localctx = new Import_fromContext(this, this._ctx, this.state);
  this.enterRule(localctx, 56, Python2Parser.RULE_import_from);
  var _la = 0; // Token type
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 418;
    this.match(Python2Parser.T__28);
    this.state = 431;
    this._errHandler.sync(this);
    var la_ = this._interp.adaptivePredict(this._input, 45, this._ctx);
    switch (la_) {
      case 1:
        this.state = 422;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while (_la === Python2Parser.T__29) {
          this.state = 419;
          this.match(Python2Parser.T__29);
          this.state = 424;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
        }
        this.state = 425;
        this.dotted_name();
        break;
      case 2:
        this.state = 427;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
          this.state = 426;
          this.match(Python2Parser.T__29);
          this.state = 429;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
        } while (_la === Python2Parser.T__29);
        break;
    }
    this.state = 433;
    this.match(Python2Parser.T__27);
    this.state = 440;
    this._errHandler.sync(this);
    switch (this._input.LA(1)) {
      case Python2Parser.T__5:
        this.state = 434;
        this.match(Python2Parser.T__5);
        break;
      case Python2Parser.OPEN_PAREN:
        this.state = 435;
        this.match(Python2Parser.OPEN_PAREN);
        this.state = 436;
        this.import_as_names();
        this.state = 437;
        this.match(Python2Parser.CLOSE_PAREN);
        break;
      case Python2Parser.NAME:
        this.state = 439;
        this.import_as_names();
        break;
      default:
        throw new antlr4.error.NoViableAltException(this);
    }
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};
function Import_as_nameContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null;
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = Python2Parser.RULE_import_as_name;
  return this;
}
Import_as_nameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Import_as_nameContext.prototype.constructor = Import_as_nameContext;
Import_as_nameContext.prototype.NAME = function (i) {
  if (i === undefined) {
    i = null;
  }
  if (i === null) {
    return this.getTokens(Python2Parser.NAME);
  } else {
    return this.getToken(Python2Parser.NAME, i);
  }
};
Import_as_nameContext.prototype.enterRule = function (listener) {
  if (listener instanceof Python2Listener) {
    listener.enterImport_as_name(this);
  }
};
Import_as_nameContext.prototype.exitRule = function (listener) {
  if (listener instanceof Python2Listener) {
    listener.exitImport_as_name(this);
  }
};
Import_as_nameContext.prototype.accept = function (visitor) {
  if (visitor instanceof Python2Visitor) {
    return visitor.visitImport_as_name(this);
  } else {
    return visitor.visitChildren(this);
  }
};
Python2Parser.Import_as_nameContext = Import_as_nameContext;
Python2Parser.prototype.import_as_name = function () {
  var localctx = new Import_as_nameContext(this, this._ctx, this.state);
  this.enterRule(localctx, 58, Python2Parser.RULE_import_as_name);
  var _la = 0; // Token type
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 442;
    this.match(Python2Parser.NAME);
    this.state = 445;
    this._errHandler.sync(this);
    _la = this._input.LA(1);
    if (_la === Python2Parser.T__30) {
      this.state = 443;
      this.match(Python2Parser.T__30);
      this.state = 444;
      this.match(Python2Parser.NAME);
    }
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};
function Dotted_as_nameContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null;
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = Python2Parser.RULE_dotted_as_name;
  return this;
}
Dotted_as_nameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Dotted_as_nameContext.prototype.constructor = Dotted_as_nameContext;
Dotted_as_nameContext.prototype.dotted_name = function () {
  return this.getTypedRuleContext(Dotted_nameContext, 0);
};
Dotted_as_nameContext.prototype.NAME = function () {
  return this.getToken(Python2Parser.NAME, 0);
};
Dotted_as_nameContext.prototype.enterRule = function (listener) {
  if (listener instanceof Python2Listener) {
    listener.enterDotted_as_name(this);
  }
};
Dotted_as_nameContext.prototype.exitRule = function (listener) {
  if (listener instanceof Python2Listener) {
    listener.exitDotted_as_name(this);
  }
};
Dotted_as_nameContext.prototype.accept = function (visitor) {
  if (visitor instanceof Python2Visitor) {
    return visitor.visitDotted_as_name(this);
  } else {
    return visitor.visitChildren(this);
  }
};
Python2Parser.Dotted_as_nameContext = Dotted_as_nameContext;
Python2Parser.prototype.dotted_as_name = function () {
  var localctx = new Dotted_as_nameContext(this, this._ctx, this.state);
  this.enterRule(localctx, 60, Python2Parser.RULE_dotted_as_name);
  var _la = 0; // Token type
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 447;
    this.dotted_name();
    this.state = 450;
    this._errHandler.sync(this);
    _la = this._input.LA(1);
    if (_la === Python2Parser.T__30) {
      this.state = 448;
      this.match(Python2Parser.T__30);
      this.state = 449;
      this.match(Python2Parser.NAME);
    }
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};
function Import_as_namesContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null;
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = Python2Parser.RULE_import_as_names;
  return this;
}
Import_as_namesContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Import_as_namesContext.prototype.constructor = Import_as_namesContext;
Import_as_namesContext.prototype.import_as_name = function (i) {
  if (i === undefined) {
    i = null;
  }
  if (i === null) {
    return this.getTypedRuleContexts(Import_as_nameContext);
  } else {
    return this.getTypedRuleContext(Import_as_nameContext, i);
  }
};
Import_as_namesContext.prototype.enterRule = function (listener) {
  if (listener instanceof Python2Listener) {
    listener.enterImport_as_names(this);
  }
};
Import_as_namesContext.prototype.exitRule = function (listener) {
  if (listener instanceof Python2Listener) {
    listener.exitImport_as_names(this);
  }
};
Import_as_namesContext.prototype.accept = function (visitor) {
  if (visitor instanceof Python2Visitor) {
    return visitor.visitImport_as_names(this);
  } else {
    return visitor.visitChildren(this);
  }
};
Python2Parser.Import_as_namesContext = Import_as_namesContext;
Python2Parser.prototype.import_as_names = function () {
  var localctx = new Import_as_namesContext(this, this._ctx, this.state);
  this.enterRule(localctx, 62, Python2Parser.RULE_import_as_names);
  var _la = 0; // Token type
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 452;
    this.import_as_name();
    this.state = 457;
    this._errHandler.sync(this);
    var _alt = this._interp.adaptivePredict(this._input, 49, this._ctx);
    while (_alt != 2 && _alt != antlr4.atn.ATN.INVALID_ALT_NUMBER) {
      if (_alt === 1) {
        this.state = 453;
        this.match(Python2Parser.T__4);
        this.state = 454;
        this.import_as_name();
      }
      this.state = 459;
      this._errHandler.sync(this);
      _alt = this._interp.adaptivePredict(this._input, 49, this._ctx);
    }
    this.state = 461;
    this._errHandler.sync(this);
    _la = this._input.LA(1);
    if (_la === Python2Parser.T__4) {
      this.state = 460;
      this.match(Python2Parser.T__4);
    }
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};
function Dotted_as_namesContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null;
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = Python2Parser.RULE_dotted_as_names;
  return this;
}
Dotted_as_namesContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Dotted_as_namesContext.prototype.constructor = Dotted_as_namesContext;
Dotted_as_namesContext.prototype.dotted_as_name = function (i) {
  if (i === undefined) {
    i = null;
  }
  if (i === null) {
    return this.getTypedRuleContexts(Dotted_as_nameContext);
  } else {
    return this.getTypedRuleContext(Dotted_as_nameContext, i);
  }
};
Dotted_as_namesContext.prototype.enterRule = function (listener) {
  if (listener instanceof Python2Listener) {
    listener.enterDotted_as_names(this);
  }
};
Dotted_as_namesContext.prototype.exitRule = function (listener) {
  if (listener instanceof Python2Listener) {
    listener.exitDotted_as_names(this);
  }
};
Dotted_as_namesContext.prototype.accept = function (visitor) {
  if (visitor instanceof Python2Visitor) {
    return visitor.visitDotted_as_names(this);
  } else {
    return visitor.visitChildren(this);
  }
};
Python2Parser.Dotted_as_namesContext = Dotted_as_namesContext;
Python2Parser.prototype.dotted_as_names = function () {
  var localctx = new Dotted_as_namesContext(this, this._ctx, this.state);
  this.enterRule(localctx, 64, Python2Parser.RULE_dotted_as_names);
  var _la = 0; // Token type
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 463;
    this.dotted_as_name();
    this.state = 468;
    this._errHandler.sync(this);
    _la = this._input.LA(1);
    while (_la === Python2Parser.T__4) {
      this.state = 464;
      this.match(Python2Parser.T__4);
      this.state = 465;
      this.dotted_as_name();
      this.state = 470;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
    }
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};
function Dotted_nameContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null;
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = Python2Parser.RULE_dotted_name;
  return this;
}
Dotted_nameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Dotted_nameContext.prototype.constructor = Dotted_nameContext;
Dotted_nameContext.prototype.NAME = function (i) {
  if (i === undefined) {
    i = null;
  }
  if (i === null) {
    return this.getTokens(Python2Parser.NAME);
  } else {
    return this.getToken(Python2Parser.NAME, i);
  }
};
Dotted_nameContext.prototype.enterRule = function (listener) {
  if (listener instanceof Python2Listener) {
    listener.enterDotted_name(this);
  }
};
Dotted_nameContext.prototype.exitRule = function (listener) {
  if (listener instanceof Python2Listener) {
    listener.exitDotted_name(this);
  }
};
Dotted_nameContext.prototype.accept = function (visitor) {
  if (visitor instanceof Python2Visitor) {
    return visitor.visitDotted_name(this);
  } else {
    return visitor.visitChildren(this);
  }
};
Python2Parser.Dotted_nameContext = Dotted_nameContext;
Python2Parser.prototype.dotted_name = function () {
  var localctx = new Dotted_nameContext(this, this._ctx, this.state);
  this.enterRule(localctx, 66, Python2Parser.RULE_dotted_name);
  var _la = 0; // Token type
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 471;
    this.match(Python2Parser.NAME);
    this.state = 476;
    this._errHandler.sync(this);
    _la = this._input.LA(1);
    while (_la === Python2Parser.T__29) {
      this.state = 472;
      this.match(Python2Parser.T__29);
      this.state = 473;
      this.match(Python2Parser.NAME);
      this.state = 478;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
    }
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};
function Global_stmtContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null;
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = Python2Parser.RULE_global_stmt;
  return this;
}
Global_stmtContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Global_stmtContext.prototype.constructor = Global_stmtContext;
Global_stmtContext.prototype.NAME = function (i) {
  if (i === undefined) {
    i = null;
  }
  if (i === null) {
    return this.getTokens(Python2Parser.NAME);
  } else {
    return this.getToken(Python2Parser.NAME, i);
  }
};
Global_stmtContext.prototype.enterRule = function (listener) {
  if (listener instanceof Python2Listener) {
    listener.enterGlobal_stmt(this);
  }
};
Global_stmtContext.prototype.exitRule = function (listener) {
  if (listener instanceof Python2Listener) {
    listener.exitGlobal_stmt(this);
  }
};
Global_stmtContext.prototype.accept = function (visitor) {
  if (visitor instanceof Python2Visitor) {
    return visitor.visitGlobal_stmt(this);
  } else {
    return visitor.visitChildren(this);
  }
};
Python2Parser.Global_stmtContext = Global_stmtContext;
Python2Parser.prototype.global_stmt = function () {
  var localctx = new Global_stmtContext(this, this._ctx, this.state);
  this.enterRule(localctx, 68, Python2Parser.RULE_global_stmt);
  var _la = 0; // Token type
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 479;
    this.match(Python2Parser.T__31);
    this.state = 480;
    this.match(Python2Parser.NAME);
    this.state = 485;
    this._errHandler.sync(this);
    _la = this._input.LA(1);
    while (_la === Python2Parser.T__4) {
      this.state = 481;
      this.match(Python2Parser.T__4);
      this.state = 482;
      this.match(Python2Parser.NAME);
      this.state = 487;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
    }
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};
function Exec_stmtContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null;
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = Python2Parser.RULE_exec_stmt;
  return this;
}
Exec_stmtContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Exec_stmtContext.prototype.constructor = Exec_stmtContext;
Exec_stmtContext.prototype.expr = function () {
  return this.getTypedRuleContext(ExprContext, 0);
};
Exec_stmtContext.prototype.test = function (i) {
  if (i === undefined) {
    i = null;
  }
  if (i === null) {
    return this.getTypedRuleContexts(TestContext);
  } else {
    return this.getTypedRuleContext(TestContext, i);
  }
};
Exec_stmtContext.prototype.enterRule = function (listener) {
  if (listener instanceof Python2Listener) {
    listener.enterExec_stmt(this);
  }
};
Exec_stmtContext.prototype.exitRule = function (listener) {
  if (listener instanceof Python2Listener) {
    listener.exitExec_stmt(this);
  }
};
Exec_stmtContext.prototype.accept = function (visitor) {
  if (visitor instanceof Python2Visitor) {
    return visitor.visitExec_stmt(this);
  } else {
    return visitor.visitChildren(this);
  }
};
Python2Parser.Exec_stmtContext = Exec_stmtContext;
Python2Parser.prototype.exec_stmt = function () {
  var localctx = new Exec_stmtContext(this, this._ctx, this.state);
  this.enterRule(localctx, 70, Python2Parser.RULE_exec_stmt);
  var _la = 0; // Token type
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 488;
    this.match(Python2Parser.T__32);
    this.state = 489;
    this.expr();
    this.state = 496;
    this._errHandler.sync(this);
    _la = this._input.LA(1);
    if (_la === Python2Parser.T__33) {
      this.state = 490;
      this.match(Python2Parser.T__33);
      this.state = 491;
      this.test();
      this.state = 494;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === Python2Parser.T__4) {
        this.state = 492;
        this.match(Python2Parser.T__4);
        this.state = 493;
        this.test();
      }
    }
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};
function Assert_stmtContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null;
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = Python2Parser.RULE_assert_stmt;
  return this;
}
Assert_stmtContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Assert_stmtContext.prototype.constructor = Assert_stmtContext;
Assert_stmtContext.prototype.test = function (i) {
  if (i === undefined) {
    i = null;
  }
  if (i === null) {
    return this.getTypedRuleContexts(TestContext);
  } else {
    return this.getTypedRuleContext(TestContext, i);
  }
};
Assert_stmtContext.prototype.enterRule = function (listener) {
  if (listener instanceof Python2Listener) {
    listener.enterAssert_stmt(this);
  }
};
Assert_stmtContext.prototype.exitRule = function (listener) {
  if (listener instanceof Python2Listener) {
    listener.exitAssert_stmt(this);
  }
};
Assert_stmtContext.prototype.accept = function (visitor) {
  if (visitor instanceof Python2Visitor) {
    return visitor.visitAssert_stmt(this);
  } else {
    return visitor.visitChildren(this);
  }
};
Python2Parser.Assert_stmtContext = Assert_stmtContext;
Python2Parser.prototype.assert_stmt = function () {
  var localctx = new Assert_stmtContext(this, this._ctx, this.state);
  this.enterRule(localctx, 72, Python2Parser.RULE_assert_stmt);
  var _la = 0; // Token type
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 498;
    this.match(Python2Parser.T__34);
    this.state = 499;
    this.test();
    this.state = 502;
    this._errHandler.sync(this);
    _la = this._input.LA(1);
    if (_la === Python2Parser.T__4) {
      this.state = 500;
      this.match(Python2Parser.T__4);
      this.state = 501;
      this.test();
    }
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};
function Compound_stmtContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null;
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = Python2Parser.RULE_compound_stmt;
  return this;
}
Compound_stmtContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Compound_stmtContext.prototype.constructor = Compound_stmtContext;
Compound_stmtContext.prototype.if_stmt = function () {
  return this.getTypedRuleContext(If_stmtContext, 0);
};
Compound_stmtContext.prototype.while_stmt = function () {
  return this.getTypedRuleContext(While_stmtContext, 0);
};
Compound_stmtContext.prototype.for_stmt = function () {
  return this.getTypedRuleContext(For_stmtContext, 0);
};
Compound_stmtContext.prototype.try_stmt = function () {
  return this.getTypedRuleContext(Try_stmtContext, 0);
};
Compound_stmtContext.prototype.with_stmt = function () {
  return this.getTypedRuleContext(With_stmtContext, 0);
};
Compound_stmtContext.prototype.funcdef = function () {
  return this.getTypedRuleContext(FuncdefContext, 0);
};
Compound_stmtContext.prototype.classdef = function () {
  return this.getTypedRuleContext(ClassdefContext, 0);
};
Compound_stmtContext.prototype.decorated = function () {
  return this.getTypedRuleContext(DecoratedContext, 0);
};
Compound_stmtContext.prototype.enterRule = function (listener) {
  if (listener instanceof Python2Listener) {
    listener.enterCompound_stmt(this);
  }
};
Compound_stmtContext.prototype.exitRule = function (listener) {
  if (listener instanceof Python2Listener) {
    listener.exitCompound_stmt(this);
  }
};
Compound_stmtContext.prototype.accept = function (visitor) {
  if (visitor instanceof Python2Visitor) {
    return visitor.visitCompound_stmt(this);
  } else {
    return visitor.visitChildren(this);
  }
};
Python2Parser.Compound_stmtContext = Compound_stmtContext;
Python2Parser.prototype.compound_stmt = function () {
  var localctx = new Compound_stmtContext(this, this._ctx, this.state);
  this.enterRule(localctx, 74, Python2Parser.RULE_compound_stmt);
  try {
    this.state = 512;
    this._errHandler.sync(this);
    switch (this._input.LA(1)) {
      case Python2Parser.T__35:
        this.enterOuterAlt(localctx, 1);
        this.state = 504;
        this.if_stmt();
        break;
      case Python2Parser.T__38:
        this.enterOuterAlt(localctx, 2);
        this.state = 505;
        this.while_stmt();
        break;
      case Python2Parser.T__39:
        this.enterOuterAlt(localctx, 3);
        this.state = 506;
        this.for_stmt();
        break;
      case Python2Parser.T__40:
        this.enterOuterAlt(localctx, 4);
        this.state = 507;
        this.try_stmt();
        break;
      case Python2Parser.T__42:
        this.enterOuterAlt(localctx, 5);
        this.state = 508;
        this.with_stmt();
        break;
      case Python2Parser.T__1:
        this.enterOuterAlt(localctx, 6);
        this.state = 509;
        this.funcdef();
        break;
      case Python2Parser.T__67:
        this.enterOuterAlt(localctx, 7);
        this.state = 510;
        this.classdef();
        break;
      case Python2Parser.T__0:
        this.enterOuterAlt(localctx, 8);
        this.state = 511;
        this.decorated();
        break;
      default:
        throw new antlr4.error.NoViableAltException(this);
    }
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};
function If_stmtContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null;
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = Python2Parser.RULE_if_stmt;
  return this;
}
If_stmtContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
If_stmtContext.prototype.constructor = If_stmtContext;
If_stmtContext.prototype.test = function (i) {
  if (i === undefined) {
    i = null;
  }
  if (i === null) {
    return this.getTypedRuleContexts(TestContext);
  } else {
    return this.getTypedRuleContext(TestContext, i);
  }
};
If_stmtContext.prototype.suite = function (i) {
  if (i === undefined) {
    i = null;
  }
  if (i === null) {
    return this.getTypedRuleContexts(SuiteContext);
  } else {
    return this.getTypedRuleContext(SuiteContext, i);
  }
};
If_stmtContext.prototype.enterRule = function (listener) {
  if (listener instanceof Python2Listener) {
    listener.enterIf_stmt(this);
  }
};
If_stmtContext.prototype.exitRule = function (listener) {
  if (listener instanceof Python2Listener) {
    listener.exitIf_stmt(this);
  }
};
If_stmtContext.prototype.accept = function (visitor) {
  if (visitor instanceof Python2Visitor) {
    return visitor.visitIf_stmt(this);
  } else {
    return visitor.visitChildren(this);
  }
};
Python2Parser.If_stmtContext = If_stmtContext;
Python2Parser.prototype.if_stmt = function () {
  var localctx = new If_stmtContext(this, this._ctx, this.state);
  this.enterRule(localctx, 76, Python2Parser.RULE_if_stmt);
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 514;
    this.match(Python2Parser.T__35);
    this.state = 515;
    this.test();
    this.state = 516;
    this.match(Python2Parser.T__2);
    this.state = 517;
    this.suite();
    this.state = 525;
    this._errHandler.sync(this);
    var _alt = this._interp.adaptivePredict(this._input, 58, this._ctx);
    while (_alt != 2 && _alt != antlr4.atn.ATN.INVALID_ALT_NUMBER) {
      if (_alt === 1) {
        this.state = 518;
        this.match(Python2Parser.T__36);
        this.state = 519;
        this.test();
        this.state = 520;
        this.match(Python2Parser.T__2);
        this.state = 521;
        this.suite();
      }
      this.state = 527;
      this._errHandler.sync(this);
      _alt = this._interp.adaptivePredict(this._input, 58, this._ctx);
    }
    this.state = 531;
    this._errHandler.sync(this);
    var la_ = this._interp.adaptivePredict(this._input, 59, this._ctx);
    if (la_ === 1) {
      this.state = 528;
      this.match(Python2Parser.T__37);
      this.state = 529;
      this.match(Python2Parser.T__2);
      this.state = 530;
      this.suite();
    }
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};
function While_stmtContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null;
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = Python2Parser.RULE_while_stmt;
  return this;
}
While_stmtContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
While_stmtContext.prototype.constructor = While_stmtContext;
While_stmtContext.prototype.test = function () {
  return this.getTypedRuleContext(TestContext, 0);
};
While_stmtContext.prototype.suite = function (i) {
  if (i === undefined) {
    i = null;
  }
  if (i === null) {
    return this.getTypedRuleContexts(SuiteContext);
  } else {
    return this.getTypedRuleContext(SuiteContext, i);
  }
};
While_stmtContext.prototype.enterRule = function (listener) {
  if (listener instanceof Python2Listener) {
    listener.enterWhile_stmt(this);
  }
};
While_stmtContext.prototype.exitRule = function (listener) {
  if (listener instanceof Python2Listener) {
    listener.exitWhile_stmt(this);
  }
};
While_stmtContext.prototype.accept = function (visitor) {
  if (visitor instanceof Python2Visitor) {
    return visitor.visitWhile_stmt(this);
  } else {
    return visitor.visitChildren(this);
  }
};
Python2Parser.While_stmtContext = While_stmtContext;
Python2Parser.prototype.while_stmt = function () {
  var localctx = new While_stmtContext(this, this._ctx, this.state);
  this.enterRule(localctx, 78, Python2Parser.RULE_while_stmt);
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 533;
    this.match(Python2Parser.T__38);
    this.state = 534;
    this.test();
    this.state = 535;
    this.match(Python2Parser.T__2);
    this.state = 536;
    this.suite();
    this.state = 540;
    this._errHandler.sync(this);
    var la_ = this._interp.adaptivePredict(this._input, 60, this._ctx);
    if (la_ === 1) {
      this.state = 537;
      this.match(Python2Parser.T__37);
      this.state = 538;
      this.match(Python2Parser.T__2);
      this.state = 539;
      this.suite();
    }
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};
function For_stmtContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null;
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = Python2Parser.RULE_for_stmt;
  return this;
}
For_stmtContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
For_stmtContext.prototype.constructor = For_stmtContext;
For_stmtContext.prototype.exprlist = function () {
  return this.getTypedRuleContext(ExprlistContext, 0);
};
For_stmtContext.prototype.testlist = function () {
  return this.getTypedRuleContext(TestlistContext, 0);
};
For_stmtContext.prototype.suite = function (i) {
  if (i === undefined) {
    i = null;
  }
  if (i === null) {
    return this.getTypedRuleContexts(SuiteContext);
  } else {
    return this.getTypedRuleContext(SuiteContext, i);
  }
};
For_stmtContext.prototype.enterRule = function (listener) {
  if (listener instanceof Python2Listener) {
    listener.enterFor_stmt(this);
  }
};
For_stmtContext.prototype.exitRule = function (listener) {
  if (listener instanceof Python2Listener) {
    listener.exitFor_stmt(this);
  }
};
For_stmtContext.prototype.accept = function (visitor) {
  if (visitor instanceof Python2Visitor) {
    return visitor.visitFor_stmt(this);
  } else {
    return visitor.visitChildren(this);
  }
};
Python2Parser.For_stmtContext = For_stmtContext;
Python2Parser.prototype.for_stmt = function () {
  var localctx = new For_stmtContext(this, this._ctx, this.state);
  this.enterRule(localctx, 80, Python2Parser.RULE_for_stmt);
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 542;
    this.match(Python2Parser.T__39);
    this.state = 543;
    this.exprlist();
    this.state = 544;
    this.match(Python2Parser.T__33);
    this.state = 545;
    this.testlist();
    this.state = 546;
    this.match(Python2Parser.T__2);
    this.state = 547;
    this.suite();
    this.state = 551;
    this._errHandler.sync(this);
    var la_ = this._interp.adaptivePredict(this._input, 61, this._ctx);
    if (la_ === 1) {
      this.state = 548;
      this.match(Python2Parser.T__37);
      this.state = 549;
      this.match(Python2Parser.T__2);
      this.state = 550;
      this.suite();
    }
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};
function Try_stmtContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null;
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = Python2Parser.RULE_try_stmt;
  return this;
}
Try_stmtContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Try_stmtContext.prototype.constructor = Try_stmtContext;
Try_stmtContext.prototype.suite = function (i) {
  if (i === undefined) {
    i = null;
  }
  if (i === null) {
    return this.getTypedRuleContexts(SuiteContext);
  } else {
    return this.getTypedRuleContext(SuiteContext, i);
  }
};
Try_stmtContext.prototype.except_clause = function (i) {
  if (i === undefined) {
    i = null;
  }
  if (i === null) {
    return this.getTypedRuleContexts(Except_clauseContext);
  } else {
    return this.getTypedRuleContext(Except_clauseContext, i);
  }
};
Try_stmtContext.prototype.enterRule = function (listener) {
  if (listener instanceof Python2Listener) {
    listener.enterTry_stmt(this);
  }
};
Try_stmtContext.prototype.exitRule = function (listener) {
  if (listener instanceof Python2Listener) {
    listener.exitTry_stmt(this);
  }
};
Try_stmtContext.prototype.accept = function (visitor) {
  if (visitor instanceof Python2Visitor) {
    return visitor.visitTry_stmt(this);
  } else {
    return visitor.visitChildren(this);
  }
};
Python2Parser.Try_stmtContext = Try_stmtContext;
Python2Parser.prototype.try_stmt = function () {
  var localctx = new Try_stmtContext(this, this._ctx, this.state);
  this.enterRule(localctx, 82, Python2Parser.RULE_try_stmt);
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 553;
    this.match(Python2Parser.T__40);
    this.state = 554;
    this.match(Python2Parser.T__2);
    this.state = 555;
    this.suite();
    this.state = 577;
    this._errHandler.sync(this);
    switch (this._input.LA(1)) {
      case Python2Parser.T__43:
        this.state = 560;
        this._errHandler.sync(this);
        var _alt = 1;
        do {
          switch (_alt) {
            case 1:
              this.state = 556;
              this.except_clause();
              this.state = 557;
              this.match(Python2Parser.T__2);
              this.state = 558;
              this.suite();
              break;
            default:
              throw new antlr4.error.NoViableAltException(this);
          }
          this.state = 562;
          this._errHandler.sync(this);
          _alt = this._interp.adaptivePredict(this._input, 62, this._ctx);
        } while (_alt != 2 && _alt != antlr4.atn.ATN.INVALID_ALT_NUMBER);
        this.state = 567;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input, 63, this._ctx);
        if (la_ === 1) {
          this.state = 564;
          this.match(Python2Parser.T__37);
          this.state = 565;
          this.match(Python2Parser.T__2);
          this.state = 566;
          this.suite();
        }
        this.state = 572;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input, 64, this._ctx);
        if (la_ === 1) {
          this.state = 569;
          this.match(Python2Parser.T__41);
          this.state = 570;
          this.match(Python2Parser.T__2);
          this.state = 571;
          this.suite();
        }
        break;
      case Python2Parser.T__41:
        this.state = 574;
        this.match(Python2Parser.T__41);
        this.state = 575;
        this.match(Python2Parser.T__2);
        this.state = 576;
        this.suite();
        break;
      default:
        throw new antlr4.error.NoViableAltException(this);
    }
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};
function With_stmtContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null;
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = Python2Parser.RULE_with_stmt;
  return this;
}
With_stmtContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
With_stmtContext.prototype.constructor = With_stmtContext;
With_stmtContext.prototype.with_item = function (i) {
  if (i === undefined) {
    i = null;
  }
  if (i === null) {
    return this.getTypedRuleContexts(With_itemContext);
  } else {
    return this.getTypedRuleContext(With_itemContext, i);
  }
};
With_stmtContext.prototype.suite = function () {
  return this.getTypedRuleContext(SuiteContext, 0);
};
With_stmtContext.prototype.enterRule = function (listener) {
  if (listener instanceof Python2Listener) {
    listener.enterWith_stmt(this);
  }
};
With_stmtContext.prototype.exitRule = function (listener) {
  if (listener instanceof Python2Listener) {
    listener.exitWith_stmt(this);
  }
};
With_stmtContext.prototype.accept = function (visitor) {
  if (visitor instanceof Python2Visitor) {
    return visitor.visitWith_stmt(this);
  } else {
    return visitor.visitChildren(this);
  }
};
Python2Parser.With_stmtContext = With_stmtContext;
Python2Parser.prototype.with_stmt = function () {
  var localctx = new With_stmtContext(this, this._ctx, this.state);
  this.enterRule(localctx, 84, Python2Parser.RULE_with_stmt);
  var _la = 0; // Token type
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 579;
    this.match(Python2Parser.T__42);
    this.state = 580;
    this.with_item();
    this.state = 585;
    this._errHandler.sync(this);
    _la = this._input.LA(1);
    while (_la === Python2Parser.T__4) {
      this.state = 581;
      this.match(Python2Parser.T__4);
      this.state = 582;
      this.with_item();
      this.state = 587;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
    }
    this.state = 588;
    this.match(Python2Parser.T__2);
    this.state = 589;
    this.suite();
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};
function With_itemContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null;
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = Python2Parser.RULE_with_item;
  return this;
}
With_itemContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
With_itemContext.prototype.constructor = With_itemContext;
With_itemContext.prototype.test = function () {
  return this.getTypedRuleContext(TestContext, 0);
};
With_itemContext.prototype.expr = function () {
  return this.getTypedRuleContext(ExprContext, 0);
};
With_itemContext.prototype.enterRule = function (listener) {
  if (listener instanceof Python2Listener) {
    listener.enterWith_item(this);
  }
};
With_itemContext.prototype.exitRule = function (listener) {
  if (listener instanceof Python2Listener) {
    listener.exitWith_item(this);
  }
};
With_itemContext.prototype.accept = function (visitor) {
  if (visitor instanceof Python2Visitor) {
    return visitor.visitWith_item(this);
  } else {
    return visitor.visitChildren(this);
  }
};
Python2Parser.With_itemContext = With_itemContext;
Python2Parser.prototype.with_item = function () {
  var localctx = new With_itemContext(this, this._ctx, this.state);
  this.enterRule(localctx, 86, Python2Parser.RULE_with_item);
  var _la = 0; // Token type
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 591;
    this.test();
    this.state = 594;
    this._errHandler.sync(this);
    _la = this._input.LA(1);
    if (_la === Python2Parser.T__30) {
      this.state = 592;
      this.match(Python2Parser.T__30);
      this.state = 593;
      this.expr();
    }
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};
function Except_clauseContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null;
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = Python2Parser.RULE_except_clause;
  return this;
}
Except_clauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Except_clauseContext.prototype.constructor = Except_clauseContext;
Except_clauseContext.prototype.test = function (i) {
  if (i === undefined) {
    i = null;
  }
  if (i === null) {
    return this.getTypedRuleContexts(TestContext);
  } else {
    return this.getTypedRuleContext(TestContext, i);
  }
};
Except_clauseContext.prototype.enterRule = function (listener) {
  if (listener instanceof Python2Listener) {
    listener.enterExcept_clause(this);
  }
};
Except_clauseContext.prototype.exitRule = function (listener) {
  if (listener instanceof Python2Listener) {
    listener.exitExcept_clause(this);
  }
};
Except_clauseContext.prototype.accept = function (visitor) {
  if (visitor instanceof Python2Visitor) {
    return visitor.visitExcept_clause(this);
  } else {
    return visitor.visitChildren(this);
  }
};
Python2Parser.Except_clauseContext = Except_clauseContext;
Python2Parser.prototype.except_clause = function () {
  var localctx = new Except_clauseContext(this, this._ctx, this.state);
  this.enterRule(localctx, 88, Python2Parser.RULE_except_clause);
  var _la = 0; // Token type
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 596;
    this.match(Python2Parser.T__43);
    this.state = 602;
    this._errHandler.sync(this);
    _la = this._input.LA(1);
    if ((_la - 30 & ~0x1f) == 0 && (1 << _la - 30 & (1 << Python2Parser.T__29 - 30 | 1 << Python2Parser.T__44 - 30 | 1 << Python2Parser.T__47 - 30 | 1 << Python2Parser.T__60 - 30)) !== 0 || (_la - 62 & ~0x1f) == 0 && (1 << _la - 62 & (1 << Python2Parser.T__61 - 62 | 1 << Python2Parser.T__65 - 62 | 1 << Python2Parser.T__66 - 62 | 1 << Python2Parser.NAME - 62 | 1 << Python2Parser.NUMBER - 62 | 1 << Python2Parser.STRING - 62 | 1 << Python2Parser.OPEN_PAREN - 62 | 1 << Python2Parser.OPEN_BRACE - 62 | 1 << Python2Parser.OPEN_BRACKET - 62)) !== 0) {
      this.state = 597;
      this.test();
      this.state = 600;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === Python2Parser.T__4 || _la === Python2Parser.T__30) {
        this.state = 598;
        _la = this._input.LA(1);
        if (!(_la === Python2Parser.T__4 || _la === Python2Parser.T__30)) {
          this._errHandler.recoverInline(this);
        } else {
          this._errHandler.reportMatch(this);
          this.consume();
        }
        this.state = 599;
        this.test();
      }
    }
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};
function SuiteContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null;
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = Python2Parser.RULE_suite;
  return this;
}
SuiteContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SuiteContext.prototype.constructor = SuiteContext;
SuiteContext.prototype.simple_stmt = function () {
  return this.getTypedRuleContext(Simple_stmtContext, 0);
};
SuiteContext.prototype.NEWLINE = function () {
  return this.getToken(Python2Parser.NEWLINE, 0);
};
SuiteContext.prototype.INDENT = function () {
  return this.getToken(Python2Parser.INDENT, 0);
};
SuiteContext.prototype.DEDENT = function () {
  return this.getToken(Python2Parser.DEDENT, 0);
};
SuiteContext.prototype.stmt = function (i) {
  if (i === undefined) {
    i = null;
  }
  if (i === null) {
    return this.getTypedRuleContexts(StmtContext);
  } else {
    return this.getTypedRuleContext(StmtContext, i);
  }
};
SuiteContext.prototype.enterRule = function (listener) {
  if (listener instanceof Python2Listener) {
    listener.enterSuite(this);
  }
};
SuiteContext.prototype.exitRule = function (listener) {
  if (listener instanceof Python2Listener) {
    listener.exitSuite(this);
  }
};
SuiteContext.prototype.accept = function (visitor) {
  if (visitor instanceof Python2Visitor) {
    return visitor.visitSuite(this);
  } else {
    return visitor.visitChildren(this);
  }
};
Python2Parser.SuiteContext = SuiteContext;
Python2Parser.prototype.suite = function () {
  var localctx = new SuiteContext(this, this._ctx, this.state);
  this.enterRule(localctx, 90, Python2Parser.RULE_suite);
  try {
    this.state = 614;
    this._errHandler.sync(this);
    var la_ = this._interp.adaptivePredict(this._input, 71, this._ctx);
    switch (la_) {
      case 1:
        this.enterOuterAlt(localctx, 1);
        this.state = 604;
        this.simple_stmt();
        break;
      case 2:
        this.enterOuterAlt(localctx, 2);
        this.state = 605;
        this.match(Python2Parser.NEWLINE);
        this.state = 606;
        this.match(Python2Parser.INDENT);
        this.state = 608;
        this._errHandler.sync(this);
        var _alt = 1;
        do {
          switch (_alt) {
            case 1:
              this.state = 607;
              this.stmt();
              break;
            default:
              throw new antlr4.error.NoViableAltException(this);
          }
          this.state = 610;
          this._errHandler.sync(this);
          _alt = this._interp.adaptivePredict(this._input, 70, this._ctx);
        } while (_alt != 2 && _alt != antlr4.atn.ATN.INVALID_ALT_NUMBER);
        this.state = 612;
        this.match(Python2Parser.DEDENT);
        break;
    }
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};
function Testlist_safeContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null;
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = Python2Parser.RULE_testlist_safe;
  return this;
}
Testlist_safeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Testlist_safeContext.prototype.constructor = Testlist_safeContext;
Testlist_safeContext.prototype.old_test = function (i) {
  if (i === undefined) {
    i = null;
  }
  if (i === null) {
    return this.getTypedRuleContexts(Old_testContext);
  } else {
    return this.getTypedRuleContext(Old_testContext, i);
  }
};
Testlist_safeContext.prototype.enterRule = function (listener) {
  if (listener instanceof Python2Listener) {
    listener.enterTestlist_safe(this);
  }
};
Testlist_safeContext.prototype.exitRule = function (listener) {
  if (listener instanceof Python2Listener) {
    listener.exitTestlist_safe(this);
  }
};
Testlist_safeContext.prototype.accept = function (visitor) {
  if (visitor instanceof Python2Visitor) {
    return visitor.visitTestlist_safe(this);
  } else {
    return visitor.visitChildren(this);
  }
};
Python2Parser.Testlist_safeContext = Testlist_safeContext;
Python2Parser.prototype.testlist_safe = function () {
  var localctx = new Testlist_safeContext(this, this._ctx, this.state);
  this.enterRule(localctx, 92, Python2Parser.RULE_testlist_safe);
  var _la = 0; // Token type
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 616;
    this.old_test();
    this.state = 626;
    this._errHandler.sync(this);
    _la = this._input.LA(1);
    if (_la === Python2Parser.T__4) {
      this.state = 619;
      this._errHandler.sync(this);
      var _alt = 1;
      do {
        switch (_alt) {
          case 1:
            this.state = 617;
            this.match(Python2Parser.T__4);
            this.state = 618;
            this.old_test();
            break;
          default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this.state = 621;
        this._errHandler.sync(this);
        _alt = this._interp.adaptivePredict(this._input, 72, this._ctx);
      } while (_alt != 2 && _alt != antlr4.atn.ATN.INVALID_ALT_NUMBER);
      this.state = 624;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === Python2Parser.T__4) {
        this.state = 623;
        this.match(Python2Parser.T__4);
      }
    }
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};
function Old_testContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null;
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = Python2Parser.RULE_old_test;
  return this;
}
Old_testContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Old_testContext.prototype.constructor = Old_testContext;
Old_testContext.prototype.or_test = function () {
  return this.getTypedRuleContext(Or_testContext, 0);
};
Old_testContext.prototype.old_lambdef = function () {
  return this.getTypedRuleContext(Old_lambdefContext, 0);
};
Old_testContext.prototype.enterRule = function (listener) {
  if (listener instanceof Python2Listener) {
    listener.enterOld_test(this);
  }
};
Old_testContext.prototype.exitRule = function (listener) {
  if (listener instanceof Python2Listener) {
    listener.exitOld_test(this);
  }
};
Old_testContext.prototype.accept = function (visitor) {
  if (visitor instanceof Python2Visitor) {
    return visitor.visitOld_test(this);
  } else {
    return visitor.visitChildren(this);
  }
};
Python2Parser.Old_testContext = Old_testContext;
Python2Parser.prototype.old_test = function () {
  var localctx = new Old_testContext(this, this._ctx, this.state);
  this.enterRule(localctx, 94, Python2Parser.RULE_old_test);
  try {
    this.state = 630;
    this._errHandler.sync(this);
    switch (this._input.LA(1)) {
      case Python2Parser.T__29:
      case Python2Parser.T__47:
      case Python2Parser.T__60:
      case Python2Parser.T__61:
      case Python2Parser.T__65:
      case Python2Parser.T__66:
      case Python2Parser.NAME:
      case Python2Parser.NUMBER:
      case Python2Parser.STRING:
      case Python2Parser.OPEN_PAREN:
      case Python2Parser.OPEN_BRACE:
      case Python2Parser.OPEN_BRACKET:
        this.enterOuterAlt(localctx, 1);
        this.state = 628;
        this.or_test();
        break;
      case Python2Parser.T__44:
        this.enterOuterAlt(localctx, 2);
        this.state = 629;
        this.old_lambdef();
        break;
      default:
        throw new antlr4.error.NoViableAltException(this);
    }
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};
function Old_lambdefContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null;
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = Python2Parser.RULE_old_lambdef;
  return this;
}
Old_lambdefContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Old_lambdefContext.prototype.constructor = Old_lambdefContext;
Old_lambdefContext.prototype.old_test = function () {
  return this.getTypedRuleContext(Old_testContext, 0);
};
Old_lambdefContext.prototype.varargslist = function () {
  return this.getTypedRuleContext(VarargslistContext, 0);
};
Old_lambdefContext.prototype.enterRule = function (listener) {
  if (listener instanceof Python2Listener) {
    listener.enterOld_lambdef(this);
  }
};
Old_lambdefContext.prototype.exitRule = function (listener) {
  if (listener instanceof Python2Listener) {
    listener.exitOld_lambdef(this);
  }
};
Old_lambdefContext.prototype.accept = function (visitor) {
  if (visitor instanceof Python2Visitor) {
    return visitor.visitOld_lambdef(this);
  } else {
    return visitor.visitChildren(this);
  }
};
Python2Parser.Old_lambdefContext = Old_lambdefContext;
Python2Parser.prototype.old_lambdef = function () {
  var localctx = new Old_lambdefContext(this, this._ctx, this.state);
  this.enterRule(localctx, 96, Python2Parser.RULE_old_lambdef);
  var _la = 0; // Token type
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 632;
    this.match(Python2Parser.T__44);
    this.state = 634;
    this._errHandler.sync(this);
    _la = this._input.LA(1);
    if (_la === Python2Parser.T__5 || _la === Python2Parser.T__6 || _la === Python2Parser.NAME || _la === Python2Parser.OPEN_PAREN) {
      this.state = 633;
      this.varargslist();
    }
    this.state = 636;
    this.match(Python2Parser.T__2);
    this.state = 637;
    this.old_test();
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};
function TestContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null;
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = Python2Parser.RULE_test;
  return this;
}
TestContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TestContext.prototype.constructor = TestContext;
TestContext.prototype.or_test = function (i) {
  if (i === undefined) {
    i = null;
  }
  if (i === null) {
    return this.getTypedRuleContexts(Or_testContext);
  } else {
    return this.getTypedRuleContext(Or_testContext, i);
  }
};
TestContext.prototype.test = function () {
  return this.getTypedRuleContext(TestContext, 0);
};
TestContext.prototype.lambdef = function () {
  return this.getTypedRuleContext(LambdefContext, 0);
};
TestContext.prototype.enterRule = function (listener) {
  if (listener instanceof Python2Listener) {
    listener.enterTest(this);
  }
};
TestContext.prototype.exitRule = function (listener) {
  if (listener instanceof Python2Listener) {
    listener.exitTest(this);
  }
};
TestContext.prototype.accept = function (visitor) {
  if (visitor instanceof Python2Visitor) {
    return visitor.visitTest(this);
  } else {
    return visitor.visitChildren(this);
  }
};
Python2Parser.TestContext = TestContext;
Python2Parser.prototype.test = function () {
  var localctx = new TestContext(this, this._ctx, this.state);
  this.enterRule(localctx, 98, Python2Parser.RULE_test);
  var _la = 0; // Token type
  try {
    this.state = 648;
    this._errHandler.sync(this);
    switch (this._input.LA(1)) {
      case Python2Parser.T__29:
      case Python2Parser.T__47:
      case Python2Parser.T__60:
      case Python2Parser.T__61:
      case Python2Parser.T__65:
      case Python2Parser.T__66:
      case Python2Parser.NAME:
      case Python2Parser.NUMBER:
      case Python2Parser.STRING:
      case Python2Parser.OPEN_PAREN:
      case Python2Parser.OPEN_BRACE:
      case Python2Parser.OPEN_BRACKET:
        this.enterOuterAlt(localctx, 1);
        this.state = 639;
        this.or_test();
        this.state = 645;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if (_la === Python2Parser.T__35) {
          this.state = 640;
          this.match(Python2Parser.T__35);
          this.state = 641;
          this.or_test();
          this.state = 642;
          this.match(Python2Parser.T__37);
          this.state = 643;
          this.test();
        }
        break;
      case Python2Parser.T__44:
        this.enterOuterAlt(localctx, 2);
        this.state = 647;
        this.lambdef();
        break;
      default:
        throw new antlr4.error.NoViableAltException(this);
    }
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};
function Or_testContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null;
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = Python2Parser.RULE_or_test;
  return this;
}
Or_testContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Or_testContext.prototype.constructor = Or_testContext;
Or_testContext.prototype.and_test = function (i) {
  if (i === undefined) {
    i = null;
  }
  if (i === null) {
    return this.getTypedRuleContexts(And_testContext);
  } else {
    return this.getTypedRuleContext(And_testContext, i);
  }
};
Or_testContext.prototype.enterRule = function (listener) {
  if (listener instanceof Python2Listener) {
    listener.enterOr_test(this);
  }
};
Or_testContext.prototype.exitRule = function (listener) {
  if (listener instanceof Python2Listener) {
    listener.exitOr_test(this);
  }
};
Or_testContext.prototype.accept = function (visitor) {
  if (visitor instanceof Python2Visitor) {
    return visitor.visitOr_test(this);
  } else {
    return visitor.visitChildren(this);
  }
};
Python2Parser.Or_testContext = Or_testContext;
Python2Parser.prototype.or_test = function () {
  var localctx = new Or_testContext(this, this._ctx, this.state);
  this.enterRule(localctx, 100, Python2Parser.RULE_or_test);
  var _la = 0; // Token type
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 650;
    this.and_test();
    this.state = 655;
    this._errHandler.sync(this);
    _la = this._input.LA(1);
    while (_la === Python2Parser.T__45) {
      this.state = 651;
      this.match(Python2Parser.T__45);
      this.state = 652;
      this.and_test();
      this.state = 657;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
    }
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};
function And_testContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null;
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = Python2Parser.RULE_and_test;
  return this;
}
And_testContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
And_testContext.prototype.constructor = And_testContext;
And_testContext.prototype.not_test = function (i) {
  if (i === undefined) {
    i = null;
  }
  if (i === null) {
    return this.getTypedRuleContexts(Not_testContext);
  } else {
    return this.getTypedRuleContext(Not_testContext, i);
  }
};
And_testContext.prototype.enterRule = function (listener) {
  if (listener instanceof Python2Listener) {
    listener.enterAnd_test(this);
  }
};
And_testContext.prototype.exitRule = function (listener) {
  if (listener instanceof Python2Listener) {
    listener.exitAnd_test(this);
  }
};
And_testContext.prototype.accept = function (visitor) {
  if (visitor instanceof Python2Visitor) {
    return visitor.visitAnd_test(this);
  } else {
    return visitor.visitChildren(this);
  }
};
Python2Parser.And_testContext = And_testContext;
Python2Parser.prototype.and_test = function () {
  var localctx = new And_testContext(this, this._ctx, this.state);
  this.enterRule(localctx, 102, Python2Parser.RULE_and_test);
  var _la = 0; // Token type
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 658;
    this.not_test();
    this.state = 663;
    this._errHandler.sync(this);
    _la = this._input.LA(1);
    while (_la === Python2Parser.T__46) {
      this.state = 659;
      this.match(Python2Parser.T__46);
      this.state = 660;
      this.not_test();
      this.state = 665;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
    }
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};
function Not_testContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null;
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = Python2Parser.RULE_not_test;
  return this;
}
Not_testContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Not_testContext.prototype.constructor = Not_testContext;
Not_testContext.prototype.not_test = function () {
  return this.getTypedRuleContext(Not_testContext, 0);
};
Not_testContext.prototype.comparison = function () {
  return this.getTypedRuleContext(ComparisonContext, 0);
};
Not_testContext.prototype.enterRule = function (listener) {
  if (listener instanceof Python2Listener) {
    listener.enterNot_test(this);
  }
};
Not_testContext.prototype.exitRule = function (listener) {
  if (listener instanceof Python2Listener) {
    listener.exitNot_test(this);
  }
};
Not_testContext.prototype.accept = function (visitor) {
  if (visitor instanceof Python2Visitor) {
    return visitor.visitNot_test(this);
  } else {
    return visitor.visitChildren(this);
  }
};
Python2Parser.Not_testContext = Not_testContext;
Python2Parser.prototype.not_test = function () {
  var localctx = new Not_testContext(this, this._ctx, this.state);
  this.enterRule(localctx, 104, Python2Parser.RULE_not_test);
  try {
    this.state = 669;
    this._errHandler.sync(this);
    switch (this._input.LA(1)) {
      case Python2Parser.T__47:
        this.enterOuterAlt(localctx, 1);
        this.state = 666;
        this.match(Python2Parser.T__47);
        this.state = 667;
        this.not_test();
        break;
      case Python2Parser.T__29:
      case Python2Parser.T__60:
      case Python2Parser.T__61:
      case Python2Parser.T__65:
      case Python2Parser.T__66:
      case Python2Parser.NAME:
      case Python2Parser.NUMBER:
      case Python2Parser.STRING:
      case Python2Parser.OPEN_PAREN:
      case Python2Parser.OPEN_BRACE:
      case Python2Parser.OPEN_BRACKET:
        this.enterOuterAlt(localctx, 2);
        this.state = 668;
        this.comparison();
        break;
      default:
        throw new antlr4.error.NoViableAltException(this);
    }
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};
function ComparisonContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null;
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = Python2Parser.RULE_comparison;
  return this;
}
ComparisonContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ComparisonContext.prototype.constructor = ComparisonContext;
ComparisonContext.prototype.expr = function (i) {
  if (i === undefined) {
    i = null;
  }
  if (i === null) {
    return this.getTypedRuleContexts(ExprContext);
  } else {
    return this.getTypedRuleContext(ExprContext, i);
  }
};
ComparisonContext.prototype.comp_op = function (i) {
  if (i === undefined) {
    i = null;
  }
  if (i === null) {
    return this.getTypedRuleContexts(Comp_opContext);
  } else {
    return this.getTypedRuleContext(Comp_opContext, i);
  }
};
ComparisonContext.prototype.enterRule = function (listener) {
  if (listener instanceof Python2Listener) {
    listener.enterComparison(this);
  }
};
ComparisonContext.prototype.exitRule = function (listener) {
  if (listener instanceof Python2Listener) {
    listener.exitComparison(this);
  }
};
ComparisonContext.prototype.accept = function (visitor) {
  if (visitor instanceof Python2Visitor) {
    return visitor.visitComparison(this);
  } else {
    return visitor.visitChildren(this);
  }
};
Python2Parser.ComparisonContext = ComparisonContext;
Python2Parser.prototype.comparison = function () {
  var localctx = new ComparisonContext(this, this._ctx, this.state);
  this.enterRule(localctx, 106, Python2Parser.RULE_comparison);
  var _la = 0; // Token type
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 671;
    this.expr();
    this.state = 677;
    this._errHandler.sync(this);
    _la = this._input.LA(1);
    while ((_la - 34 & ~0x1f) == 0 && (1 << _la - 34 & (1 << Python2Parser.T__33 - 34 | 1 << Python2Parser.T__47 - 34 | 1 << Python2Parser.T__48 - 34 | 1 << Python2Parser.T__49 - 34 | 1 << Python2Parser.T__50 - 34 | 1 << Python2Parser.T__51 - 34 | 1 << Python2Parser.T__52 - 34 | 1 << Python2Parser.T__53 - 34 | 1 << Python2Parser.T__54 - 34 | 1 << Python2Parser.T__55 - 34)) !== 0) {
      this.state = 672;
      this.comp_op();
      this.state = 673;
      this.expr();
      this.state = 679;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
    }
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};
function Comp_opContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null;
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = Python2Parser.RULE_comp_op;
  return this;
}
Comp_opContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Comp_opContext.prototype.constructor = Comp_opContext;
Comp_opContext.prototype.enterRule = function (listener) {
  if (listener instanceof Python2Listener) {
    listener.enterComp_op(this);
  }
};
Comp_opContext.prototype.exitRule = function (listener) {
  if (listener instanceof Python2Listener) {
    listener.exitComp_op(this);
  }
};
Comp_opContext.prototype.accept = function (visitor) {
  if (visitor instanceof Python2Visitor) {
    return visitor.visitComp_op(this);
  } else {
    return visitor.visitChildren(this);
  }
};
Python2Parser.Comp_opContext = Comp_opContext;
Python2Parser.prototype.comp_op = function () {
  var localctx = new Comp_opContext(this, this._ctx, this.state);
  this.enterRule(localctx, 108, Python2Parser.RULE_comp_op);
  try {
    this.state = 693;
    this._errHandler.sync(this);
    var la_ = this._interp.adaptivePredict(this._input, 83, this._ctx);
    switch (la_) {
      case 1:
        this.enterOuterAlt(localctx, 1);
        this.state = 680;
        this.match(Python2Parser.T__48);
        break;
      case 2:
        this.enterOuterAlt(localctx, 2);
        this.state = 681;
        this.match(Python2Parser.T__49);
        break;
      case 3:
        this.enterOuterAlt(localctx, 3);
        this.state = 682;
        this.match(Python2Parser.T__50);
        break;
      case 4:
        this.enterOuterAlt(localctx, 4);
        this.state = 683;
        this.match(Python2Parser.T__51);
        break;
      case 5:
        this.enterOuterAlt(localctx, 5);
        this.state = 684;
        this.match(Python2Parser.T__52);
        break;
      case 6:
        this.enterOuterAlt(localctx, 6);
        this.state = 685;
        this.match(Python2Parser.T__53);
        break;
      case 7:
        this.enterOuterAlt(localctx, 7);
        this.state = 686;
        this.match(Python2Parser.T__54);
        break;
      case 8:
        this.enterOuterAlt(localctx, 8);
        this.state = 687;
        this.match(Python2Parser.T__33);
        break;
      case 9:
        this.enterOuterAlt(localctx, 9);
        this.state = 688;
        this.match(Python2Parser.T__47);
        this.state = 689;
        this.match(Python2Parser.T__33);
        break;
      case 10:
        this.enterOuterAlt(localctx, 10);
        this.state = 690;
        this.match(Python2Parser.T__55);
        break;
      case 11:
        this.enterOuterAlt(localctx, 11);
        this.state = 691;
        this.match(Python2Parser.T__55);
        this.state = 692;
        this.match(Python2Parser.T__47);
        break;
    }
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};
function ExprContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null;
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = Python2Parser.RULE_expr;
  return this;
}
ExprContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExprContext.prototype.constructor = ExprContext;
ExprContext.prototype.xor_expr = function (i) {
  if (i === undefined) {
    i = null;
  }
  if (i === null) {
    return this.getTypedRuleContexts(Xor_exprContext);
  } else {
    return this.getTypedRuleContext(Xor_exprContext, i);
  }
};
ExprContext.prototype.enterRule = function (listener) {
  if (listener instanceof Python2Listener) {
    listener.enterExpr(this);
  }
};
ExprContext.prototype.exitRule = function (listener) {
  if (listener instanceof Python2Listener) {
    listener.exitExpr(this);
  }
};
ExprContext.prototype.accept = function (visitor) {
  if (visitor instanceof Python2Visitor) {
    return visitor.visitExpr(this);
  } else {
    return visitor.visitChildren(this);
  }
};
Python2Parser.ExprContext = ExprContext;
Python2Parser.prototype.expr = function () {
  var localctx = new ExprContext(this, this._ctx, this.state);
  this.enterRule(localctx, 110, Python2Parser.RULE_expr);
  var _la = 0; // Token type
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 695;
    this.xor_expr();
    this.state = 700;
    this._errHandler.sync(this);
    _la = this._input.LA(1);
    while (_la === Python2Parser.T__56) {
      this.state = 696;
      this.match(Python2Parser.T__56);
      this.state = 697;
      this.xor_expr();
      this.state = 702;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
    }
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};
function Xor_exprContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null;
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = Python2Parser.RULE_xor_expr;
  return this;
}
Xor_exprContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Xor_exprContext.prototype.constructor = Xor_exprContext;
Xor_exprContext.prototype.and_expr = function (i) {
  if (i === undefined) {
    i = null;
  }
  if (i === null) {
    return this.getTypedRuleContexts(And_exprContext);
  } else {
    return this.getTypedRuleContext(And_exprContext, i);
  }
};
Xor_exprContext.prototype.enterRule = function (listener) {
  if (listener instanceof Python2Listener) {
    listener.enterXor_expr(this);
  }
};
Xor_exprContext.prototype.exitRule = function (listener) {
  if (listener instanceof Python2Listener) {
    listener.exitXor_expr(this);
  }
};
Xor_exprContext.prototype.accept = function (visitor) {
  if (visitor instanceof Python2Visitor) {
    return visitor.visitXor_expr(this);
  } else {
    return visitor.visitChildren(this);
  }
};
Python2Parser.Xor_exprContext = Xor_exprContext;
Python2Parser.prototype.xor_expr = function () {
  var localctx = new Xor_exprContext(this, this._ctx, this.state);
  this.enterRule(localctx, 112, Python2Parser.RULE_xor_expr);
  var _la = 0; // Token type
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 703;
    this.and_expr();
    this.state = 708;
    this._errHandler.sync(this);
    _la = this._input.LA(1);
    while (_la === Python2Parser.T__57) {
      this.state = 704;
      this.match(Python2Parser.T__57);
      this.state = 705;
      this.and_expr();
      this.state = 710;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
    }
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};
function And_exprContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null;
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = Python2Parser.RULE_and_expr;
  return this;
}
And_exprContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
And_exprContext.prototype.constructor = And_exprContext;
And_exprContext.prototype.shift_expr = function (i) {
  if (i === undefined) {
    i = null;
  }
  if (i === null) {
    return this.getTypedRuleContexts(Shift_exprContext);
  } else {
    return this.getTypedRuleContext(Shift_exprContext, i);
  }
};
And_exprContext.prototype.enterRule = function (listener) {
  if (listener instanceof Python2Listener) {
    listener.enterAnd_expr(this);
  }
};
And_exprContext.prototype.exitRule = function (listener) {
  if (listener instanceof Python2Listener) {
    listener.exitAnd_expr(this);
  }
};
And_exprContext.prototype.accept = function (visitor) {
  if (visitor instanceof Python2Visitor) {
    return visitor.visitAnd_expr(this);
  } else {
    return visitor.visitChildren(this);
  }
};
Python2Parser.And_exprContext = And_exprContext;
Python2Parser.prototype.and_expr = function () {
  var localctx = new And_exprContext(this, this._ctx, this.state);
  this.enterRule(localctx, 114, Python2Parser.RULE_and_expr);
  var _la = 0; // Token type
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 711;
    this.shift_expr();
    this.state = 716;
    this._errHandler.sync(this);
    _la = this._input.LA(1);
    while (_la === Python2Parser.T__58) {
      this.state = 712;
      this.match(Python2Parser.T__58);
      this.state = 713;
      this.shift_expr();
      this.state = 718;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
    }
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};
function Shift_exprContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null;
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = Python2Parser.RULE_shift_expr;
  return this;
}
Shift_exprContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Shift_exprContext.prototype.constructor = Shift_exprContext;
Shift_exprContext.prototype.arith_expr = function (i) {
  if (i === undefined) {
    i = null;
  }
  if (i === null) {
    return this.getTypedRuleContexts(Arith_exprContext);
  } else {
    return this.getTypedRuleContext(Arith_exprContext, i);
  }
};
Shift_exprContext.prototype.enterRule = function (listener) {
  if (listener instanceof Python2Listener) {
    listener.enterShift_expr(this);
  }
};
Shift_exprContext.prototype.exitRule = function (listener) {
  if (listener instanceof Python2Listener) {
    listener.exitShift_expr(this);
  }
};
Shift_exprContext.prototype.accept = function (visitor) {
  if (visitor instanceof Python2Visitor) {
    return visitor.visitShift_expr(this);
  } else {
    return visitor.visitChildren(this);
  }
};
Python2Parser.Shift_exprContext = Shift_exprContext;
Python2Parser.prototype.shift_expr = function () {
  var localctx = new Shift_exprContext(this, this._ctx, this.state);
  this.enterRule(localctx, 116, Python2Parser.RULE_shift_expr);
  var _la = 0; // Token type
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 719;
    this.arith_expr();
    this.state = 724;
    this._errHandler.sync(this);
    _la = this._input.LA(1);
    while (_la === Python2Parser.T__20 || _la === Python2Parser.T__59) {
      this.state = 720;
      _la = this._input.LA(1);
      if (!(_la === Python2Parser.T__20 || _la === Python2Parser.T__59)) {
        this._errHandler.recoverInline(this);
      } else {
        this._errHandler.reportMatch(this);
        this.consume();
      }
      this.state = 721;
      this.arith_expr();
      this.state = 726;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
    }
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};
function Arith_exprContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null;
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = Python2Parser.RULE_arith_expr;
  return this;
}
Arith_exprContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Arith_exprContext.prototype.constructor = Arith_exprContext;
Arith_exprContext.prototype.term = function (i) {
  if (i === undefined) {
    i = null;
  }
  if (i === null) {
    return this.getTypedRuleContexts(TermContext);
  } else {
    return this.getTypedRuleContext(TermContext, i);
  }
};
Arith_exprContext.prototype.enterRule = function (listener) {
  if (listener instanceof Python2Listener) {
    listener.enterArith_expr(this);
  }
};
Arith_exprContext.prototype.exitRule = function (listener) {
  if (listener instanceof Python2Listener) {
    listener.exitArith_expr(this);
  }
};
Arith_exprContext.prototype.accept = function (visitor) {
  if (visitor instanceof Python2Visitor) {
    return visitor.visitArith_expr(this);
  } else {
    return visitor.visitChildren(this);
  }
};
Python2Parser.Arith_exprContext = Arith_exprContext;
Python2Parser.prototype.arith_expr = function () {
  var localctx = new Arith_exprContext(this, this._ctx, this.state);
  this.enterRule(localctx, 118, Python2Parser.RULE_arith_expr);
  var _la = 0; // Token type
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 727;
    this.term();
    this.state = 732;
    this._errHandler.sync(this);
    _la = this._input.LA(1);
    while (_la === Python2Parser.T__60 || _la === Python2Parser.T__61) {
      this.state = 728;
      _la = this._input.LA(1);
      if (!(_la === Python2Parser.T__60 || _la === Python2Parser.T__61)) {
        this._errHandler.recoverInline(this);
      } else {
        this._errHandler.reportMatch(this);
        this.consume();
      }
      this.state = 729;
      this.term();
      this.state = 734;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
    }
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};
function TermContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null;
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = Python2Parser.RULE_term;
  return this;
}
TermContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TermContext.prototype.constructor = TermContext;
TermContext.prototype.factor = function (i) {
  if (i === undefined) {
    i = null;
  }
  if (i === null) {
    return this.getTypedRuleContexts(FactorContext);
  } else {
    return this.getTypedRuleContext(FactorContext, i);
  }
};
TermContext.prototype.enterRule = function (listener) {
  if (listener instanceof Python2Listener) {
    listener.enterTerm(this);
  }
};
TermContext.prototype.exitRule = function (listener) {
  if (listener instanceof Python2Listener) {
    listener.exitTerm(this);
  }
};
TermContext.prototype.accept = function (visitor) {
  if (visitor instanceof Python2Visitor) {
    return visitor.visitTerm(this);
  } else {
    return visitor.visitChildren(this);
  }
};
Python2Parser.TermContext = TermContext;
Python2Parser.prototype.term = function () {
  var localctx = new TermContext(this, this._ctx, this.state);
  this.enterRule(localctx, 120, Python2Parser.RULE_term);
  var _la = 0; // Token type
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 735;
    this.factor();
    this.state = 740;
    this._errHandler.sync(this);
    _la = this._input.LA(1);
    while (_la === Python2Parser.T__5 || (_la - 63 & ~0x1f) == 0 && (1 << _la - 63 & (1 << Python2Parser.T__62 - 63 | 1 << Python2Parser.T__63 - 63 | 1 << Python2Parser.T__64 - 63)) !== 0) {
      this.state = 736;
      _la = this._input.LA(1);
      if (!(_la === Python2Parser.T__5 || (_la - 63 & ~0x1f) == 0 && (1 << _la - 63 & (1 << Python2Parser.T__62 - 63 | 1 << Python2Parser.T__63 - 63 | 1 << Python2Parser.T__64 - 63)) !== 0)) {
        this._errHandler.recoverInline(this);
      } else {
        this._errHandler.reportMatch(this);
        this.consume();
      }
      this.state = 737;
      this.factor();
      this.state = 742;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
    }
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};
function FactorContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null;
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = Python2Parser.RULE_factor;
  return this;
}
FactorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FactorContext.prototype.constructor = FactorContext;
FactorContext.prototype.factor = function () {
  return this.getTypedRuleContext(FactorContext, 0);
};
FactorContext.prototype.power = function () {
  return this.getTypedRuleContext(PowerContext, 0);
};
FactorContext.prototype.enterRule = function (listener) {
  if (listener instanceof Python2Listener) {
    listener.enterFactor(this);
  }
};
FactorContext.prototype.exitRule = function (listener) {
  if (listener instanceof Python2Listener) {
    listener.exitFactor(this);
  }
};
FactorContext.prototype.accept = function (visitor) {
  if (visitor instanceof Python2Visitor) {
    return visitor.visitFactor(this);
  } else {
    return visitor.visitChildren(this);
  }
};
Python2Parser.FactorContext = FactorContext;
Python2Parser.prototype.factor = function () {
  var localctx = new FactorContext(this, this._ctx, this.state);
  this.enterRule(localctx, 122, Python2Parser.RULE_factor);
  var _la = 0; // Token type
  try {
    this.state = 746;
    this._errHandler.sync(this);
    switch (this._input.LA(1)) {
      case Python2Parser.T__60:
      case Python2Parser.T__61:
      case Python2Parser.T__65:
        this.enterOuterAlt(localctx, 1);
        this.state = 743;
        _la = this._input.LA(1);
        if (!((_la - 61 & ~0x1f) == 0 && (1 << _la - 61 & (1 << Python2Parser.T__60 - 61 | 1 << Python2Parser.T__61 - 61 | 1 << Python2Parser.T__65 - 61)) !== 0)) {
          this._errHandler.recoverInline(this);
        } else {
          this._errHandler.reportMatch(this);
          this.consume();
        }
        this.state = 744;
        this.factor();
        break;
      case Python2Parser.T__29:
      case Python2Parser.T__66:
      case Python2Parser.NAME:
      case Python2Parser.NUMBER:
      case Python2Parser.STRING:
      case Python2Parser.OPEN_PAREN:
      case Python2Parser.OPEN_BRACE:
      case Python2Parser.OPEN_BRACKET:
        this.enterOuterAlt(localctx, 2);
        this.state = 745;
        this.power();
        break;
      default:
        throw new antlr4.error.NoViableAltException(this);
    }
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};
function PowerContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null;
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = Python2Parser.RULE_power;
  return this;
}
PowerContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PowerContext.prototype.constructor = PowerContext;
PowerContext.prototype.atom = function () {
  return this.getTypedRuleContext(AtomContext, 0);
};
PowerContext.prototype.trailer = function (i) {
  if (i === undefined) {
    i = null;
  }
  if (i === null) {
    return this.getTypedRuleContexts(TrailerContext);
  } else {
    return this.getTypedRuleContext(TrailerContext, i);
  }
};
PowerContext.prototype.factor = function () {
  return this.getTypedRuleContext(FactorContext, 0);
};
PowerContext.prototype.enterRule = function (listener) {
  if (listener instanceof Python2Listener) {
    listener.enterPower(this);
  }
};
PowerContext.prototype.exitRule = function (listener) {
  if (listener instanceof Python2Listener) {
    listener.exitPower(this);
  }
};
PowerContext.prototype.accept = function (visitor) {
  if (visitor instanceof Python2Visitor) {
    return visitor.visitPower(this);
  } else {
    return visitor.visitChildren(this);
  }
};
Python2Parser.PowerContext = PowerContext;
Python2Parser.prototype.power = function () {
  var localctx = new PowerContext(this, this._ctx, this.state);
  this.enterRule(localctx, 124, Python2Parser.RULE_power);
  var _la = 0; // Token type
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 748;
    this.atom();
    this.state = 752;
    this._errHandler.sync(this);
    _la = this._input.LA(1);
    while (_la === Python2Parser.T__29 || _la === Python2Parser.OPEN_PAREN || _la === Python2Parser.OPEN_BRACKET) {
      this.state = 749;
      this.trailer();
      this.state = 754;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
    }
    this.state = 757;
    this._errHandler.sync(this);
    _la = this._input.LA(1);
    if (_la === Python2Parser.T__6) {
      this.state = 755;
      this.match(Python2Parser.T__6);
      this.state = 756;
      this.factor();
    }
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};
function AtomContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null;
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = Python2Parser.RULE_atom;
  return this;
}
AtomContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AtomContext.prototype.constructor = AtomContext;
AtomContext.prototype.OPEN_PAREN = function () {
  return this.getToken(Python2Parser.OPEN_PAREN, 0);
};
AtomContext.prototype.CLOSE_PAREN = function () {
  return this.getToken(Python2Parser.CLOSE_PAREN, 0);
};
AtomContext.prototype.OPEN_BRACKET = function () {
  return this.getToken(Python2Parser.OPEN_BRACKET, 0);
};
AtomContext.prototype.CLOSE_BRACKET = function () {
  return this.getToken(Python2Parser.CLOSE_BRACKET, 0);
};
AtomContext.prototype.OPEN_BRACE = function () {
  return this.getToken(Python2Parser.OPEN_BRACE, 0);
};
AtomContext.prototype.CLOSE_BRACE = function () {
  return this.getToken(Python2Parser.CLOSE_BRACE, 0);
};
AtomContext.prototype.testlist1 = function () {
  return this.getTypedRuleContext(Testlist1Context, 0);
};
AtomContext.prototype.NAME = function () {
  return this.getToken(Python2Parser.NAME, 0);
};
AtomContext.prototype.NUMBER = function () {
  return this.getToken(Python2Parser.NUMBER, 0);
};
AtomContext.prototype.yield_expr = function () {
  return this.getTypedRuleContext(Yield_exprContext, 0);
};
AtomContext.prototype.testlist_comp = function () {
  return this.getTypedRuleContext(Testlist_compContext, 0);
};
AtomContext.prototype.listmaker = function () {
  return this.getTypedRuleContext(ListmakerContext, 0);
};
AtomContext.prototype.dictorsetmaker = function () {
  return this.getTypedRuleContext(DictorsetmakerContext, 0);
};
AtomContext.prototype.STRING = function (i) {
  if (i === undefined) {
    i = null;
  }
  if (i === null) {
    return this.getTokens(Python2Parser.STRING);
  } else {
    return this.getToken(Python2Parser.STRING, i);
  }
};
AtomContext.prototype.enterRule = function (listener) {
  if (listener instanceof Python2Listener) {
    listener.enterAtom(this);
  }
};
AtomContext.prototype.exitRule = function (listener) {
  if (listener instanceof Python2Listener) {
    listener.exitAtom(this);
  }
};
AtomContext.prototype.accept = function (visitor) {
  if (visitor instanceof Python2Visitor) {
    return visitor.visitAtom(this);
  } else {
    return visitor.visitChildren(this);
  }
};
Python2Parser.AtomContext = AtomContext;
Python2Parser.prototype.atom = function () {
  var localctx = new AtomContext(this, this._ctx, this.state);
  this.enterRule(localctx, 126, Python2Parser.RULE_atom);
  var _la = 0; // Token type
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 789;
    this._errHandler.sync(this);
    switch (this._input.LA(1)) {
      case Python2Parser.OPEN_PAREN:
        this.state = 759;
        this.match(Python2Parser.OPEN_PAREN);
        this.state = 762;
        this._errHandler.sync(this);
        switch (this._input.LA(1)) {
          case Python2Parser.T__68:
            this.state = 760;
            this.yield_expr();
            break;
          case Python2Parser.T__29:
          case Python2Parser.T__44:
          case Python2Parser.T__47:
          case Python2Parser.T__60:
          case Python2Parser.T__61:
          case Python2Parser.T__65:
          case Python2Parser.T__66:
          case Python2Parser.NAME:
          case Python2Parser.NUMBER:
          case Python2Parser.STRING:
          case Python2Parser.OPEN_PAREN:
          case Python2Parser.OPEN_BRACE:
          case Python2Parser.OPEN_BRACKET:
            this.state = 761;
            this.testlist_comp();
            break;
          case Python2Parser.CLOSE_PAREN:
            break;
          default:
            break;
        }
        this.state = 764;
        this.match(Python2Parser.CLOSE_PAREN);
        break;
      case Python2Parser.OPEN_BRACKET:
        this.state = 765;
        this.match(Python2Parser.OPEN_BRACKET);
        this.state = 767;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if ((_la - 30 & ~0x1f) == 0 && (1 << _la - 30 & (1 << Python2Parser.T__29 - 30 | 1 << Python2Parser.T__44 - 30 | 1 << Python2Parser.T__47 - 30 | 1 << Python2Parser.T__60 - 30)) !== 0 || (_la - 62 & ~0x1f) == 0 && (1 << _la - 62 & (1 << Python2Parser.T__61 - 62 | 1 << Python2Parser.T__65 - 62 | 1 << Python2Parser.T__66 - 62 | 1 << Python2Parser.NAME - 62 | 1 << Python2Parser.NUMBER - 62 | 1 << Python2Parser.STRING - 62 | 1 << Python2Parser.OPEN_PAREN - 62 | 1 << Python2Parser.OPEN_BRACE - 62 | 1 << Python2Parser.OPEN_BRACKET - 62)) !== 0) {
          this.state = 766;
          this.listmaker();
        }
        this.state = 769;
        this.match(Python2Parser.CLOSE_BRACKET);
        break;
      case Python2Parser.OPEN_BRACE:
        this.state = 770;
        this.match(Python2Parser.OPEN_BRACE);
        this.state = 772;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if ((_la - 30 & ~0x1f) == 0 && (1 << _la - 30 & (1 << Python2Parser.T__29 - 30 | 1 << Python2Parser.T__44 - 30 | 1 << Python2Parser.T__47 - 30 | 1 << Python2Parser.T__60 - 30)) !== 0 || (_la - 62 & ~0x1f) == 0 && (1 << _la - 62 & (1 << Python2Parser.T__61 - 62 | 1 << Python2Parser.T__65 - 62 | 1 << Python2Parser.T__66 - 62 | 1 << Python2Parser.NAME - 62 | 1 << Python2Parser.NUMBER - 62 | 1 << Python2Parser.STRING - 62 | 1 << Python2Parser.OPEN_PAREN - 62 | 1 << Python2Parser.OPEN_BRACE - 62 | 1 << Python2Parser.OPEN_BRACKET - 62)) !== 0) {
          this.state = 771;
          this.dictorsetmaker();
        }
        this.state = 774;
        this.match(Python2Parser.CLOSE_BRACE);
        break;
      case Python2Parser.T__66:
        this.state = 775;
        this.match(Python2Parser.T__66);
        this.state = 776;
        this.testlist1();
        this.state = 777;
        this.match(Python2Parser.T__66);
        break;
      case Python2Parser.T__29:
        this.state = 779;
        this.match(Python2Parser.T__29);
        this.state = 780;
        this.match(Python2Parser.T__29);
        this.state = 781;
        this.match(Python2Parser.T__29);
        break;
      case Python2Parser.NAME:
        this.state = 782;
        this.match(Python2Parser.NAME);
        break;
      case Python2Parser.NUMBER:
        this.state = 783;
        this.match(Python2Parser.NUMBER);
        break;
      case Python2Parser.STRING:
        this.state = 785;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
          this.state = 784;
          this.match(Python2Parser.STRING);
          this.state = 787;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
        } while (_la === Python2Parser.STRING);
        break;
      default:
        throw new antlr4.error.NoViableAltException(this);
    }
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};
function ListmakerContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null;
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = Python2Parser.RULE_listmaker;
  return this;
}
ListmakerContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ListmakerContext.prototype.constructor = ListmakerContext;
ListmakerContext.prototype.test = function (i) {
  if (i === undefined) {
    i = null;
  }
  if (i === null) {
    return this.getTypedRuleContexts(TestContext);
  } else {
    return this.getTypedRuleContext(TestContext, i);
  }
};
ListmakerContext.prototype.list_for = function () {
  return this.getTypedRuleContext(List_forContext, 0);
};
ListmakerContext.prototype.enterRule = function (listener) {
  if (listener instanceof Python2Listener) {
    listener.enterListmaker(this);
  }
};
ListmakerContext.prototype.exitRule = function (listener) {
  if (listener instanceof Python2Listener) {
    listener.exitListmaker(this);
  }
};
ListmakerContext.prototype.accept = function (visitor) {
  if (visitor instanceof Python2Visitor) {
    return visitor.visitListmaker(this);
  } else {
    return visitor.visitChildren(this);
  }
};
Python2Parser.ListmakerContext = ListmakerContext;
Python2Parser.prototype.listmaker = function () {
  var localctx = new ListmakerContext(this, this._ctx, this.state);
  this.enterRule(localctx, 128, Python2Parser.RULE_listmaker);
  var _la = 0; // Token type
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 791;
    this.test();
    this.state = 803;
    this._errHandler.sync(this);
    switch (this._input.LA(1)) {
      case Python2Parser.T__39:
        this.state = 792;
        this.list_for();
        break;
      case Python2Parser.T__4:
      case Python2Parser.CLOSE_BRACKET:
        this.state = 797;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input, 98, this._ctx);
        while (_alt != 2 && _alt != antlr4.atn.ATN.INVALID_ALT_NUMBER) {
          if (_alt === 1) {
            this.state = 793;
            this.match(Python2Parser.T__4);
            this.state = 794;
            this.test();
          }
          this.state = 799;
          this._errHandler.sync(this);
          _alt = this._interp.adaptivePredict(this._input, 98, this._ctx);
        }
        this.state = 801;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if (_la === Python2Parser.T__4) {
          this.state = 800;
          this.match(Python2Parser.T__4);
        }
        break;
      default:
        throw new antlr4.error.NoViableAltException(this);
    }
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};
function Testlist_compContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null;
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = Python2Parser.RULE_testlist_comp;
  return this;
}
Testlist_compContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Testlist_compContext.prototype.constructor = Testlist_compContext;
Testlist_compContext.prototype.test = function (i) {
  if (i === undefined) {
    i = null;
  }
  if (i === null) {
    return this.getTypedRuleContexts(TestContext);
  } else {
    return this.getTypedRuleContext(TestContext, i);
  }
};
Testlist_compContext.prototype.comp_for = function () {
  return this.getTypedRuleContext(Comp_forContext, 0);
};
Testlist_compContext.prototype.enterRule = function (listener) {
  if (listener instanceof Python2Listener) {
    listener.enterTestlist_comp(this);
  }
};
Testlist_compContext.prototype.exitRule = function (listener) {
  if (listener instanceof Python2Listener) {
    listener.exitTestlist_comp(this);
  }
};
Testlist_compContext.prototype.accept = function (visitor) {
  if (visitor instanceof Python2Visitor) {
    return visitor.visitTestlist_comp(this);
  } else {
    return visitor.visitChildren(this);
  }
};
Python2Parser.Testlist_compContext = Testlist_compContext;
Python2Parser.prototype.testlist_comp = function () {
  var localctx = new Testlist_compContext(this, this._ctx, this.state);
  this.enterRule(localctx, 130, Python2Parser.RULE_testlist_comp);
  var _la = 0; // Token type
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 805;
    this.test();
    this.state = 817;
    this._errHandler.sync(this);
    switch (this._input.LA(1)) {
      case Python2Parser.T__39:
        this.state = 806;
        this.comp_for();
        break;
      case Python2Parser.T__4:
      case Python2Parser.CLOSE_PAREN:
        this.state = 811;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input, 101, this._ctx);
        while (_alt != 2 && _alt != antlr4.atn.ATN.INVALID_ALT_NUMBER) {
          if (_alt === 1) {
            this.state = 807;
            this.match(Python2Parser.T__4);
            this.state = 808;
            this.test();
          }
          this.state = 813;
          this._errHandler.sync(this);
          _alt = this._interp.adaptivePredict(this._input, 101, this._ctx);
        }
        this.state = 815;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if (_la === Python2Parser.T__4) {
          this.state = 814;
          this.match(Python2Parser.T__4);
        }
        break;
      default:
        throw new antlr4.error.NoViableAltException(this);
    }
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};
function LambdefContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null;
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = Python2Parser.RULE_lambdef;
  return this;
}
LambdefContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
LambdefContext.prototype.constructor = LambdefContext;
LambdefContext.prototype.test = function () {
  return this.getTypedRuleContext(TestContext, 0);
};
LambdefContext.prototype.varargslist = function () {
  return this.getTypedRuleContext(VarargslistContext, 0);
};
LambdefContext.prototype.enterRule = function (listener) {
  if (listener instanceof Python2Listener) {
    listener.enterLambdef(this);
  }
};
LambdefContext.prototype.exitRule = function (listener) {
  if (listener instanceof Python2Listener) {
    listener.exitLambdef(this);
  }
};
LambdefContext.prototype.accept = function (visitor) {
  if (visitor instanceof Python2Visitor) {
    return visitor.visitLambdef(this);
  } else {
    return visitor.visitChildren(this);
  }
};
Python2Parser.LambdefContext = LambdefContext;
Python2Parser.prototype.lambdef = function () {
  var localctx = new LambdefContext(this, this._ctx, this.state);
  this.enterRule(localctx, 132, Python2Parser.RULE_lambdef);
  var _la = 0; // Token type
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 819;
    this.match(Python2Parser.T__44);
    this.state = 821;
    this._errHandler.sync(this);
    _la = this._input.LA(1);
    if (_la === Python2Parser.T__5 || _la === Python2Parser.T__6 || _la === Python2Parser.NAME || _la === Python2Parser.OPEN_PAREN) {
      this.state = 820;
      this.varargslist();
    }
    this.state = 823;
    this.match(Python2Parser.T__2);
    this.state = 824;
    this.test();
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};
function TrailerContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null;
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = Python2Parser.RULE_trailer;
  return this;
}
TrailerContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TrailerContext.prototype.constructor = TrailerContext;
TrailerContext.prototype.OPEN_PAREN = function () {
  return this.getToken(Python2Parser.OPEN_PAREN, 0);
};
TrailerContext.prototype.CLOSE_PAREN = function () {
  return this.getToken(Python2Parser.CLOSE_PAREN, 0);
};
TrailerContext.prototype.arglist = function () {
  return this.getTypedRuleContext(ArglistContext, 0);
};
TrailerContext.prototype.OPEN_BRACKET = function () {
  return this.getToken(Python2Parser.OPEN_BRACKET, 0);
};
TrailerContext.prototype.subscriptlist = function () {
  return this.getTypedRuleContext(SubscriptlistContext, 0);
};
TrailerContext.prototype.CLOSE_BRACKET = function () {
  return this.getToken(Python2Parser.CLOSE_BRACKET, 0);
};
TrailerContext.prototype.NAME = function () {
  return this.getToken(Python2Parser.NAME, 0);
};
TrailerContext.prototype.enterRule = function (listener) {
  if (listener instanceof Python2Listener) {
    listener.enterTrailer(this);
  }
};
TrailerContext.prototype.exitRule = function (listener) {
  if (listener instanceof Python2Listener) {
    listener.exitTrailer(this);
  }
};
TrailerContext.prototype.accept = function (visitor) {
  if (visitor instanceof Python2Visitor) {
    return visitor.visitTrailer(this);
  } else {
    return visitor.visitChildren(this);
  }
};
Python2Parser.TrailerContext = TrailerContext;
Python2Parser.prototype.trailer = function () {
  var localctx = new TrailerContext(this, this._ctx, this.state);
  this.enterRule(localctx, 134, Python2Parser.RULE_trailer);
  var _la = 0; // Token type
  try {
    this.state = 837;
    this._errHandler.sync(this);
    switch (this._input.LA(1)) {
      case Python2Parser.OPEN_PAREN:
        this.enterOuterAlt(localctx, 1);
        this.state = 826;
        this.match(Python2Parser.OPEN_PAREN);
        this.state = 828;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if ((_la & ~0x1f) == 0 && (1 << _la & (1 << Python2Parser.T__5 | 1 << Python2Parser.T__6 | 1 << Python2Parser.T__29)) !== 0 || (_la - 45 & ~0x1f) == 0 && (1 << _la - 45 & (1 << Python2Parser.T__44 - 45 | 1 << Python2Parser.T__47 - 45 | 1 << Python2Parser.T__60 - 45 | 1 << Python2Parser.T__61 - 45 | 1 << Python2Parser.T__65 - 45 | 1 << Python2Parser.T__66 - 45 | 1 << Python2Parser.NAME - 45 | 1 << Python2Parser.NUMBER - 45 | 1 << Python2Parser.STRING - 45 | 1 << Python2Parser.OPEN_PAREN - 45)) !== 0 || _la === Python2Parser.OPEN_BRACE || _la === Python2Parser.OPEN_BRACKET) {
          this.state = 827;
          this.arglist();
        }
        this.state = 830;
        this.match(Python2Parser.CLOSE_PAREN);
        break;
      case Python2Parser.OPEN_BRACKET:
        this.enterOuterAlt(localctx, 2);
        this.state = 831;
        this.match(Python2Parser.OPEN_BRACKET);
        this.state = 832;
        this.subscriptlist();
        this.state = 833;
        this.match(Python2Parser.CLOSE_BRACKET);
        break;
      case Python2Parser.T__29:
        this.enterOuterAlt(localctx, 3);
        this.state = 835;
        this.match(Python2Parser.T__29);
        this.state = 836;
        this.match(Python2Parser.NAME);
        break;
      default:
        throw new antlr4.error.NoViableAltException(this);
    }
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};
function SubscriptlistContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null;
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = Python2Parser.RULE_subscriptlist;
  return this;
}
SubscriptlistContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SubscriptlistContext.prototype.constructor = SubscriptlistContext;
SubscriptlistContext.prototype.subscript = function (i) {
  if (i === undefined) {
    i = null;
  }
  if (i === null) {
    return this.getTypedRuleContexts(SubscriptContext);
  } else {
    return this.getTypedRuleContext(SubscriptContext, i);
  }
};
SubscriptlistContext.prototype.enterRule = function (listener) {
  if (listener instanceof Python2Listener) {
    listener.enterSubscriptlist(this);
  }
};
SubscriptlistContext.prototype.exitRule = function (listener) {
  if (listener instanceof Python2Listener) {
    listener.exitSubscriptlist(this);
  }
};
SubscriptlistContext.prototype.accept = function (visitor) {
  if (visitor instanceof Python2Visitor) {
    return visitor.visitSubscriptlist(this);
  } else {
    return visitor.visitChildren(this);
  }
};
Python2Parser.SubscriptlistContext = SubscriptlistContext;
Python2Parser.prototype.subscriptlist = function () {
  var localctx = new SubscriptlistContext(this, this._ctx, this.state);
  this.enterRule(localctx, 136, Python2Parser.RULE_subscriptlist);
  var _la = 0; // Token type
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 839;
    this.subscript();
    this.state = 844;
    this._errHandler.sync(this);
    var _alt = this._interp.adaptivePredict(this._input, 107, this._ctx);
    while (_alt != 2 && _alt != antlr4.atn.ATN.INVALID_ALT_NUMBER) {
      if (_alt === 1) {
        this.state = 840;
        this.match(Python2Parser.T__4);
        this.state = 841;
        this.subscript();
      }
      this.state = 846;
      this._errHandler.sync(this);
      _alt = this._interp.adaptivePredict(this._input, 107, this._ctx);
    }
    this.state = 848;
    this._errHandler.sync(this);
    _la = this._input.LA(1);
    if (_la === Python2Parser.T__4) {
      this.state = 847;
      this.match(Python2Parser.T__4);
    }
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};
function SubscriptContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null;
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = Python2Parser.RULE_subscript;
  return this;
}
SubscriptContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SubscriptContext.prototype.constructor = SubscriptContext;
SubscriptContext.prototype.test = function (i) {
  if (i === undefined) {
    i = null;
  }
  if (i === null) {
    return this.getTypedRuleContexts(TestContext);
  } else {
    return this.getTypedRuleContext(TestContext, i);
  }
};
SubscriptContext.prototype.sliceop = function () {
  return this.getTypedRuleContext(SliceopContext, 0);
};
SubscriptContext.prototype.enterRule = function (listener) {
  if (listener instanceof Python2Listener) {
    listener.enterSubscript(this);
  }
};
SubscriptContext.prototype.exitRule = function (listener) {
  if (listener instanceof Python2Listener) {
    listener.exitSubscript(this);
  }
};
SubscriptContext.prototype.accept = function (visitor) {
  if (visitor instanceof Python2Visitor) {
    return visitor.visitSubscript(this);
  } else {
    return visitor.visitChildren(this);
  }
};
Python2Parser.SubscriptContext = SubscriptContext;
Python2Parser.prototype.subscript = function () {
  var localctx = new SubscriptContext(this, this._ctx, this.state);
  this.enterRule(localctx, 138, Python2Parser.RULE_subscript);
  var _la = 0; // Token type
  try {
    this.state = 864;
    this._errHandler.sync(this);
    var la_ = this._interp.adaptivePredict(this._input, 112, this._ctx);
    switch (la_) {
      case 1:
        this.enterOuterAlt(localctx, 1);
        this.state = 850;
        this.match(Python2Parser.T__29);
        this.state = 851;
        this.match(Python2Parser.T__29);
        this.state = 852;
        this.match(Python2Parser.T__29);
        break;
      case 2:
        this.enterOuterAlt(localctx, 2);
        this.state = 853;
        this.test();
        break;
      case 3:
        this.enterOuterAlt(localctx, 3);
        this.state = 855;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if ((_la - 30 & ~0x1f) == 0 && (1 << _la - 30 & (1 << Python2Parser.T__29 - 30 | 1 << Python2Parser.T__44 - 30 | 1 << Python2Parser.T__47 - 30 | 1 << Python2Parser.T__60 - 30)) !== 0 || (_la - 62 & ~0x1f) == 0 && (1 << _la - 62 & (1 << Python2Parser.T__61 - 62 | 1 << Python2Parser.T__65 - 62 | 1 << Python2Parser.T__66 - 62 | 1 << Python2Parser.NAME - 62 | 1 << Python2Parser.NUMBER - 62 | 1 << Python2Parser.STRING - 62 | 1 << Python2Parser.OPEN_PAREN - 62 | 1 << Python2Parser.OPEN_BRACE - 62 | 1 << Python2Parser.OPEN_BRACKET - 62)) !== 0) {
          this.state = 854;
          this.test();
        }
        this.state = 857;
        this.match(Python2Parser.T__2);
        this.state = 859;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if ((_la - 30 & ~0x1f) == 0 && (1 << _la - 30 & (1 << Python2Parser.T__29 - 30 | 1 << Python2Parser.T__44 - 30 | 1 << Python2Parser.T__47 - 30 | 1 << Python2Parser.T__60 - 30)) !== 0 || (_la - 62 & ~0x1f) == 0 && (1 << _la - 62 & (1 << Python2Parser.T__61 - 62 | 1 << Python2Parser.T__65 - 62 | 1 << Python2Parser.T__66 - 62 | 1 << Python2Parser.NAME - 62 | 1 << Python2Parser.NUMBER - 62 | 1 << Python2Parser.STRING - 62 | 1 << Python2Parser.OPEN_PAREN - 62 | 1 << Python2Parser.OPEN_BRACE - 62 | 1 << Python2Parser.OPEN_BRACKET - 62)) !== 0) {
          this.state = 858;
          this.test();
        }
        this.state = 862;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if (_la === Python2Parser.T__2) {
          this.state = 861;
          this.sliceop();
        }
        break;
    }
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};
function SliceopContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null;
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = Python2Parser.RULE_sliceop;
  return this;
}
SliceopContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SliceopContext.prototype.constructor = SliceopContext;
SliceopContext.prototype.test = function () {
  return this.getTypedRuleContext(TestContext, 0);
};
SliceopContext.prototype.enterRule = function (listener) {
  if (listener instanceof Python2Listener) {
    listener.enterSliceop(this);
  }
};
SliceopContext.prototype.exitRule = function (listener) {
  if (listener instanceof Python2Listener) {
    listener.exitSliceop(this);
  }
};
SliceopContext.prototype.accept = function (visitor) {
  if (visitor instanceof Python2Visitor) {
    return visitor.visitSliceop(this);
  } else {
    return visitor.visitChildren(this);
  }
};
Python2Parser.SliceopContext = SliceopContext;
Python2Parser.prototype.sliceop = function () {
  var localctx = new SliceopContext(this, this._ctx, this.state);
  this.enterRule(localctx, 140, Python2Parser.RULE_sliceop);
  var _la = 0; // Token type
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 866;
    this.match(Python2Parser.T__2);
    this.state = 868;
    this._errHandler.sync(this);
    _la = this._input.LA(1);
    if ((_la - 30 & ~0x1f) == 0 && (1 << _la - 30 & (1 << Python2Parser.T__29 - 30 | 1 << Python2Parser.T__44 - 30 | 1 << Python2Parser.T__47 - 30 | 1 << Python2Parser.T__60 - 30)) !== 0 || (_la - 62 & ~0x1f) == 0 && (1 << _la - 62 & (1 << Python2Parser.T__61 - 62 | 1 << Python2Parser.T__65 - 62 | 1 << Python2Parser.T__66 - 62 | 1 << Python2Parser.NAME - 62 | 1 << Python2Parser.NUMBER - 62 | 1 << Python2Parser.STRING - 62 | 1 << Python2Parser.OPEN_PAREN - 62 | 1 << Python2Parser.OPEN_BRACE - 62 | 1 << Python2Parser.OPEN_BRACKET - 62)) !== 0) {
      this.state = 867;
      this.test();
    }
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};
function ExprlistContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null;
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = Python2Parser.RULE_exprlist;
  return this;
}
ExprlistContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExprlistContext.prototype.constructor = ExprlistContext;
ExprlistContext.prototype.expr = function (i) {
  if (i === undefined) {
    i = null;
  }
  if (i === null) {
    return this.getTypedRuleContexts(ExprContext);
  } else {
    return this.getTypedRuleContext(ExprContext, i);
  }
};
ExprlistContext.prototype.enterRule = function (listener) {
  if (listener instanceof Python2Listener) {
    listener.enterExprlist(this);
  }
};
ExprlistContext.prototype.exitRule = function (listener) {
  if (listener instanceof Python2Listener) {
    listener.exitExprlist(this);
  }
};
ExprlistContext.prototype.accept = function (visitor) {
  if (visitor instanceof Python2Visitor) {
    return visitor.visitExprlist(this);
  } else {
    return visitor.visitChildren(this);
  }
};
Python2Parser.ExprlistContext = ExprlistContext;
Python2Parser.prototype.exprlist = function () {
  var localctx = new ExprlistContext(this, this._ctx, this.state);
  this.enterRule(localctx, 142, Python2Parser.RULE_exprlist);
  var _la = 0; // Token type
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 870;
    this.expr();
    this.state = 875;
    this._errHandler.sync(this);
    var _alt = this._interp.adaptivePredict(this._input, 114, this._ctx);
    while (_alt != 2 && _alt != antlr4.atn.ATN.INVALID_ALT_NUMBER) {
      if (_alt === 1) {
        this.state = 871;
        this.match(Python2Parser.T__4);
        this.state = 872;
        this.expr();
      }
      this.state = 877;
      this._errHandler.sync(this);
      _alt = this._interp.adaptivePredict(this._input, 114, this._ctx);
    }
    this.state = 879;
    this._errHandler.sync(this);
    _la = this._input.LA(1);
    if (_la === Python2Parser.T__4) {
      this.state = 878;
      this.match(Python2Parser.T__4);
    }
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};
function TestlistContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null;
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = Python2Parser.RULE_testlist;
  return this;
}
TestlistContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TestlistContext.prototype.constructor = TestlistContext;
TestlistContext.prototype.test = function (i) {
  if (i === undefined) {
    i = null;
  }
  if (i === null) {
    return this.getTypedRuleContexts(TestContext);
  } else {
    return this.getTypedRuleContext(TestContext, i);
  }
};
TestlistContext.prototype.enterRule = function (listener) {
  if (listener instanceof Python2Listener) {
    listener.enterTestlist(this);
  }
};
TestlistContext.prototype.exitRule = function (listener) {
  if (listener instanceof Python2Listener) {
    listener.exitTestlist(this);
  }
};
TestlistContext.prototype.accept = function (visitor) {
  if (visitor instanceof Python2Visitor) {
    return visitor.visitTestlist(this);
  } else {
    return visitor.visitChildren(this);
  }
};
Python2Parser.TestlistContext = TestlistContext;
Python2Parser.prototype.testlist = function () {
  var localctx = new TestlistContext(this, this._ctx, this.state);
  this.enterRule(localctx, 144, Python2Parser.RULE_testlist);
  var _la = 0; // Token type
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 881;
    this.test();
    this.state = 886;
    this._errHandler.sync(this);
    var _alt = this._interp.adaptivePredict(this._input, 116, this._ctx);
    while (_alt != 2 && _alt != antlr4.atn.ATN.INVALID_ALT_NUMBER) {
      if (_alt === 1) {
        this.state = 882;
        this.match(Python2Parser.T__4);
        this.state = 883;
        this.test();
      }
      this.state = 888;
      this._errHandler.sync(this);
      _alt = this._interp.adaptivePredict(this._input, 116, this._ctx);
    }
    this.state = 890;
    this._errHandler.sync(this);
    _la = this._input.LA(1);
    if (_la === Python2Parser.T__4) {
      this.state = 889;
      this.match(Python2Parser.T__4);
    }
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};
function DictorsetmakerContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null;
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = Python2Parser.RULE_dictorsetmaker;
  return this;
}
DictorsetmakerContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DictorsetmakerContext.prototype.constructor = DictorsetmakerContext;
DictorsetmakerContext.prototype.test = function (i) {
  if (i === undefined) {
    i = null;
  }
  if (i === null) {
    return this.getTypedRuleContexts(TestContext);
  } else {
    return this.getTypedRuleContext(TestContext, i);
  }
};
DictorsetmakerContext.prototype.comp_for = function () {
  return this.getTypedRuleContext(Comp_forContext, 0);
};
DictorsetmakerContext.prototype.enterRule = function (listener) {
  if (listener instanceof Python2Listener) {
    listener.enterDictorsetmaker(this);
  }
};
DictorsetmakerContext.prototype.exitRule = function (listener) {
  if (listener instanceof Python2Listener) {
    listener.exitDictorsetmaker(this);
  }
};
DictorsetmakerContext.prototype.accept = function (visitor) {
  if (visitor instanceof Python2Visitor) {
    return visitor.visitDictorsetmaker(this);
  } else {
    return visitor.visitChildren(this);
  }
};
Python2Parser.DictorsetmakerContext = DictorsetmakerContext;
Python2Parser.prototype.dictorsetmaker = function () {
  var localctx = new DictorsetmakerContext(this, this._ctx, this.state);
  this.enterRule(localctx, 146, Python2Parser.RULE_dictorsetmaker);
  var _la = 0; // Token type
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 925;
    this._errHandler.sync(this);
    var la_ = this._interp.adaptivePredict(this._input, 124, this._ctx);
    switch (la_) {
      case 1:
        this.state = 892;
        this.test();
        this.state = 893;
        this.match(Python2Parser.T__2);
        this.state = 894;
        this.test();
        this.state = 909;
        this._errHandler.sync(this);
        switch (this._input.LA(1)) {
          case Python2Parser.T__39:
            this.state = 895;
            this.comp_for();
            break;
          case Python2Parser.T__4:
          case Python2Parser.CLOSE_BRACE:
            this.state = 903;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input, 118, this._ctx);
            while (_alt != 2 && _alt != antlr4.atn.ATN.INVALID_ALT_NUMBER) {
              if (_alt === 1) {
                this.state = 896;
                this.match(Python2Parser.T__4);
                this.state = 897;
                this.test();
                this.state = 898;
                this.match(Python2Parser.T__2);
                this.state = 899;
                this.test();
              }
              this.state = 905;
              this._errHandler.sync(this);
              _alt = this._interp.adaptivePredict(this._input, 118, this._ctx);
            }
            this.state = 907;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === Python2Parser.T__4) {
              this.state = 906;
              this.match(Python2Parser.T__4);
            }
            break;
          default:
            throw new antlr4.error.NoViableAltException(this);
        }
        break;
      case 2:
        this.state = 911;
        this.test();
        this.state = 923;
        this._errHandler.sync(this);
        switch (this._input.LA(1)) {
          case Python2Parser.T__39:
            this.state = 912;
            this.comp_for();
            break;
          case Python2Parser.T__4:
          case Python2Parser.CLOSE_BRACE:
            this.state = 917;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input, 121, this._ctx);
            while (_alt != 2 && _alt != antlr4.atn.ATN.INVALID_ALT_NUMBER) {
              if (_alt === 1) {
                this.state = 913;
                this.match(Python2Parser.T__4);
                this.state = 914;
                this.test();
              }
              this.state = 919;
              this._errHandler.sync(this);
              _alt = this._interp.adaptivePredict(this._input, 121, this._ctx);
            }
            this.state = 921;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === Python2Parser.T__4) {
              this.state = 920;
              this.match(Python2Parser.T__4);
            }
            break;
          default:
            throw new antlr4.error.NoViableAltException(this);
        }
        break;
    }
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};
function ClassdefContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null;
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = Python2Parser.RULE_classdef;
  return this;
}
ClassdefContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ClassdefContext.prototype.constructor = ClassdefContext;
ClassdefContext.prototype.NAME = function () {
  return this.getToken(Python2Parser.NAME, 0);
};
ClassdefContext.prototype.suite = function () {
  return this.getTypedRuleContext(SuiteContext, 0);
};
ClassdefContext.prototype.OPEN_PAREN = function () {
  return this.getToken(Python2Parser.OPEN_PAREN, 0);
};
ClassdefContext.prototype.CLOSE_PAREN = function () {
  return this.getToken(Python2Parser.CLOSE_PAREN, 0);
};
ClassdefContext.prototype.testlist = function () {
  return this.getTypedRuleContext(TestlistContext, 0);
};
ClassdefContext.prototype.enterRule = function (listener) {
  if (listener instanceof Python2Listener) {
    listener.enterClassdef(this);
  }
};
ClassdefContext.prototype.exitRule = function (listener) {
  if (listener instanceof Python2Listener) {
    listener.exitClassdef(this);
  }
};
ClassdefContext.prototype.accept = function (visitor) {
  if (visitor instanceof Python2Visitor) {
    return visitor.visitClassdef(this);
  } else {
    return visitor.visitChildren(this);
  }
};
Python2Parser.ClassdefContext = ClassdefContext;
Python2Parser.prototype.classdef = function () {
  var localctx = new ClassdefContext(this, this._ctx, this.state);
  this.enterRule(localctx, 148, Python2Parser.RULE_classdef);
  var _la = 0; // Token type
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 927;
    this.match(Python2Parser.T__67);
    this.state = 928;
    this.match(Python2Parser.NAME);
    this.state = 934;
    this._errHandler.sync(this);
    _la = this._input.LA(1);
    if (_la === Python2Parser.OPEN_PAREN) {
      this.state = 929;
      this.match(Python2Parser.OPEN_PAREN);
      this.state = 931;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if ((_la - 30 & ~0x1f) == 0 && (1 << _la - 30 & (1 << Python2Parser.T__29 - 30 | 1 << Python2Parser.T__44 - 30 | 1 << Python2Parser.T__47 - 30 | 1 << Python2Parser.T__60 - 30)) !== 0 || (_la - 62 & ~0x1f) == 0 && (1 << _la - 62 & (1 << Python2Parser.T__61 - 62 | 1 << Python2Parser.T__65 - 62 | 1 << Python2Parser.T__66 - 62 | 1 << Python2Parser.NAME - 62 | 1 << Python2Parser.NUMBER - 62 | 1 << Python2Parser.STRING - 62 | 1 << Python2Parser.OPEN_PAREN - 62 | 1 << Python2Parser.OPEN_BRACE - 62 | 1 << Python2Parser.OPEN_BRACKET - 62)) !== 0) {
        this.state = 930;
        this.testlist();
      }
      this.state = 933;
      this.match(Python2Parser.CLOSE_PAREN);
    }
    this.state = 936;
    this.match(Python2Parser.T__2);
    this.state = 937;
    this.suite();
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};
function ArglistContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null;
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = Python2Parser.RULE_arglist;
  return this;
}
ArglistContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ArglistContext.prototype.constructor = ArglistContext;
ArglistContext.prototype.argument = function (i) {
  if (i === undefined) {
    i = null;
  }
  if (i === null) {
    return this.getTypedRuleContexts(ArgumentContext);
  } else {
    return this.getTypedRuleContext(ArgumentContext, i);
  }
};
ArglistContext.prototype.test = function (i) {
  if (i === undefined) {
    i = null;
  }
  if (i === null) {
    return this.getTypedRuleContexts(TestContext);
  } else {
    return this.getTypedRuleContext(TestContext, i);
  }
};
ArglistContext.prototype.enterRule = function (listener) {
  if (listener instanceof Python2Listener) {
    listener.enterArglist(this);
  }
};
ArglistContext.prototype.exitRule = function (listener) {
  if (listener instanceof Python2Listener) {
    listener.exitArglist(this);
  }
};
ArglistContext.prototype.accept = function (visitor) {
  if (visitor instanceof Python2Visitor) {
    return visitor.visitArglist(this);
  } else {
    return visitor.visitChildren(this);
  }
};
Python2Parser.ArglistContext = ArglistContext;
Python2Parser.prototype.arglist = function () {
  var localctx = new ArglistContext(this, this._ctx, this.state);
  this.enterRule(localctx, 150, Python2Parser.RULE_arglist);
  var _la = 0; // Token type
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 944;
    this._errHandler.sync(this);
    var _alt = this._interp.adaptivePredict(this._input, 127, this._ctx);
    while (_alt != 2 && _alt != antlr4.atn.ATN.INVALID_ALT_NUMBER) {
      if (_alt === 1) {
        this.state = 939;
        this.argument();
        this.state = 940;
        this.match(Python2Parser.T__4);
      }
      this.state = 946;
      this._errHandler.sync(this);
      _alt = this._interp.adaptivePredict(this._input, 127, this._ctx);
    }
    this.state = 967;
    this._errHandler.sync(this);
    switch (this._input.LA(1)) {
      case Python2Parser.T__29:
      case Python2Parser.T__44:
      case Python2Parser.T__47:
      case Python2Parser.T__60:
      case Python2Parser.T__61:
      case Python2Parser.T__65:
      case Python2Parser.T__66:
      case Python2Parser.NAME:
      case Python2Parser.NUMBER:
      case Python2Parser.STRING:
      case Python2Parser.OPEN_PAREN:
      case Python2Parser.OPEN_BRACE:
      case Python2Parser.OPEN_BRACKET:
        this.state = 947;
        this.argument();
        this.state = 949;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if (_la === Python2Parser.T__4) {
          this.state = 948;
          this.match(Python2Parser.T__4);
        }
        break;
      case Python2Parser.T__5:
        this.state = 951;
        this.match(Python2Parser.T__5);
        this.state = 952;
        this.test();
        this.state = 957;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input, 129, this._ctx);
        while (_alt != 2 && _alt != antlr4.atn.ATN.INVALID_ALT_NUMBER) {
          if (_alt === 1) {
            this.state = 953;
            this.match(Python2Parser.T__4);
            this.state = 954;
            this.argument();
          }
          this.state = 959;
          this._errHandler.sync(this);
          _alt = this._interp.adaptivePredict(this._input, 129, this._ctx);
        }
        this.state = 963;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if (_la === Python2Parser.T__4) {
          this.state = 960;
          this.match(Python2Parser.T__4);
          this.state = 961;
          this.match(Python2Parser.T__6);
          this.state = 962;
          this.test();
        }
        break;
      case Python2Parser.T__6:
        this.state = 965;
        this.match(Python2Parser.T__6);
        this.state = 966;
        this.test();
        break;
      default:
        throw new antlr4.error.NoViableAltException(this);
    }
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};
function ArgumentContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null;
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = Python2Parser.RULE_argument;
  return this;
}
ArgumentContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ArgumentContext.prototype.constructor = ArgumentContext;
ArgumentContext.prototype.test = function (i) {
  if (i === undefined) {
    i = null;
  }
  if (i === null) {
    return this.getTypedRuleContexts(TestContext);
  } else {
    return this.getTypedRuleContext(TestContext, i);
  }
};
ArgumentContext.prototype.comp_for = function () {
  return this.getTypedRuleContext(Comp_forContext, 0);
};
ArgumentContext.prototype.enterRule = function (listener) {
  if (listener instanceof Python2Listener) {
    listener.enterArgument(this);
  }
};
ArgumentContext.prototype.exitRule = function (listener) {
  if (listener instanceof Python2Listener) {
    listener.exitArgument(this);
  }
};
ArgumentContext.prototype.accept = function (visitor) {
  if (visitor instanceof Python2Visitor) {
    return visitor.visitArgument(this);
  } else {
    return visitor.visitChildren(this);
  }
};
Python2Parser.ArgumentContext = ArgumentContext;
Python2Parser.prototype.argument = function () {
  var localctx = new ArgumentContext(this, this._ctx, this.state);
  this.enterRule(localctx, 152, Python2Parser.RULE_argument);
  var _la = 0; // Token type
  try {
    this.state = 977;
    this._errHandler.sync(this);
    var la_ = this._interp.adaptivePredict(this._input, 133, this._ctx);
    switch (la_) {
      case 1:
        this.enterOuterAlt(localctx, 1);
        this.state = 969;
        this.test();
        this.state = 971;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if (_la === Python2Parser.T__39) {
          this.state = 970;
          this.comp_for();
        }
        break;
      case 2:
        this.enterOuterAlt(localctx, 2);
        this.state = 973;
        this.test();
        this.state = 974;
        this.match(Python2Parser.T__3);
        this.state = 975;
        this.test();
        break;
    }
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};
function List_iterContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null;
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = Python2Parser.RULE_list_iter;
  return this;
}
List_iterContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
List_iterContext.prototype.constructor = List_iterContext;
List_iterContext.prototype.list_for = function () {
  return this.getTypedRuleContext(List_forContext, 0);
};
List_iterContext.prototype.list_if = function () {
  return this.getTypedRuleContext(List_ifContext, 0);
};
List_iterContext.prototype.enterRule = function (listener) {
  if (listener instanceof Python2Listener) {
    listener.enterList_iter(this);
  }
};
List_iterContext.prototype.exitRule = function (listener) {
  if (listener instanceof Python2Listener) {
    listener.exitList_iter(this);
  }
};
List_iterContext.prototype.accept = function (visitor) {
  if (visitor instanceof Python2Visitor) {
    return visitor.visitList_iter(this);
  } else {
    return visitor.visitChildren(this);
  }
};
Python2Parser.List_iterContext = List_iterContext;
Python2Parser.prototype.list_iter = function () {
  var localctx = new List_iterContext(this, this._ctx, this.state);
  this.enterRule(localctx, 154, Python2Parser.RULE_list_iter);
  try {
    this.state = 981;
    this._errHandler.sync(this);
    switch (this._input.LA(1)) {
      case Python2Parser.T__39:
        this.enterOuterAlt(localctx, 1);
        this.state = 979;
        this.list_for();
        break;
      case Python2Parser.T__35:
        this.enterOuterAlt(localctx, 2);
        this.state = 980;
        this.list_if();
        break;
      default:
        throw new antlr4.error.NoViableAltException(this);
    }
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};
function List_forContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null;
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = Python2Parser.RULE_list_for;
  return this;
}
List_forContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
List_forContext.prototype.constructor = List_forContext;
List_forContext.prototype.exprlist = function () {
  return this.getTypedRuleContext(ExprlistContext, 0);
};
List_forContext.prototype.testlist_safe = function () {
  return this.getTypedRuleContext(Testlist_safeContext, 0);
};
List_forContext.prototype.list_iter = function () {
  return this.getTypedRuleContext(List_iterContext, 0);
};
List_forContext.prototype.enterRule = function (listener) {
  if (listener instanceof Python2Listener) {
    listener.enterList_for(this);
  }
};
List_forContext.prototype.exitRule = function (listener) {
  if (listener instanceof Python2Listener) {
    listener.exitList_for(this);
  }
};
List_forContext.prototype.accept = function (visitor) {
  if (visitor instanceof Python2Visitor) {
    return visitor.visitList_for(this);
  } else {
    return visitor.visitChildren(this);
  }
};
Python2Parser.List_forContext = List_forContext;
Python2Parser.prototype.list_for = function () {
  var localctx = new List_forContext(this, this._ctx, this.state);
  this.enterRule(localctx, 156, Python2Parser.RULE_list_for);
  var _la = 0; // Token type
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 983;
    this.match(Python2Parser.T__39);
    this.state = 984;
    this.exprlist();
    this.state = 985;
    this.match(Python2Parser.T__33);
    this.state = 986;
    this.testlist_safe();
    this.state = 988;
    this._errHandler.sync(this);
    _la = this._input.LA(1);
    if (_la === Python2Parser.T__35 || _la === Python2Parser.T__39) {
      this.state = 987;
      this.list_iter();
    }
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};
function List_ifContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null;
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = Python2Parser.RULE_list_if;
  return this;
}
List_ifContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
List_ifContext.prototype.constructor = List_ifContext;
List_ifContext.prototype.old_test = function () {
  return this.getTypedRuleContext(Old_testContext, 0);
};
List_ifContext.prototype.list_iter = function () {
  return this.getTypedRuleContext(List_iterContext, 0);
};
List_ifContext.prototype.enterRule = function (listener) {
  if (listener instanceof Python2Listener) {
    listener.enterList_if(this);
  }
};
List_ifContext.prototype.exitRule = function (listener) {
  if (listener instanceof Python2Listener) {
    listener.exitList_if(this);
  }
};
List_ifContext.prototype.accept = function (visitor) {
  if (visitor instanceof Python2Visitor) {
    return visitor.visitList_if(this);
  } else {
    return visitor.visitChildren(this);
  }
};
Python2Parser.List_ifContext = List_ifContext;
Python2Parser.prototype.list_if = function () {
  var localctx = new List_ifContext(this, this._ctx, this.state);
  this.enterRule(localctx, 158, Python2Parser.RULE_list_if);
  var _la = 0; // Token type
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 990;
    this.match(Python2Parser.T__35);
    this.state = 991;
    this.old_test();
    this.state = 993;
    this._errHandler.sync(this);
    _la = this._input.LA(1);
    if (_la === Python2Parser.T__35 || _la === Python2Parser.T__39) {
      this.state = 992;
      this.list_iter();
    }
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};
function Comp_iterContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null;
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = Python2Parser.RULE_comp_iter;
  return this;
}
Comp_iterContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Comp_iterContext.prototype.constructor = Comp_iterContext;
Comp_iterContext.prototype.comp_for = function () {
  return this.getTypedRuleContext(Comp_forContext, 0);
};
Comp_iterContext.prototype.comp_if = function () {
  return this.getTypedRuleContext(Comp_ifContext, 0);
};
Comp_iterContext.prototype.enterRule = function (listener) {
  if (listener instanceof Python2Listener) {
    listener.enterComp_iter(this);
  }
};
Comp_iterContext.prototype.exitRule = function (listener) {
  if (listener instanceof Python2Listener) {
    listener.exitComp_iter(this);
  }
};
Comp_iterContext.prototype.accept = function (visitor) {
  if (visitor instanceof Python2Visitor) {
    return visitor.visitComp_iter(this);
  } else {
    return visitor.visitChildren(this);
  }
};
Python2Parser.Comp_iterContext = Comp_iterContext;
Python2Parser.prototype.comp_iter = function () {
  var localctx = new Comp_iterContext(this, this._ctx, this.state);
  this.enterRule(localctx, 160, Python2Parser.RULE_comp_iter);
  try {
    this.state = 997;
    this._errHandler.sync(this);
    switch (this._input.LA(1)) {
      case Python2Parser.T__39:
        this.enterOuterAlt(localctx, 1);
        this.state = 995;
        this.comp_for();
        break;
      case Python2Parser.T__35:
        this.enterOuterAlt(localctx, 2);
        this.state = 996;
        this.comp_if();
        break;
      default:
        throw new antlr4.error.NoViableAltException(this);
    }
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};
function Comp_forContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null;
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = Python2Parser.RULE_comp_for;
  return this;
}
Comp_forContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Comp_forContext.prototype.constructor = Comp_forContext;
Comp_forContext.prototype.exprlist = function () {
  return this.getTypedRuleContext(ExprlistContext, 0);
};
Comp_forContext.prototype.or_test = function () {
  return this.getTypedRuleContext(Or_testContext, 0);
};
Comp_forContext.prototype.comp_iter = function () {
  return this.getTypedRuleContext(Comp_iterContext, 0);
};
Comp_forContext.prototype.enterRule = function (listener) {
  if (listener instanceof Python2Listener) {
    listener.enterComp_for(this);
  }
};
Comp_forContext.prototype.exitRule = function (listener) {
  if (listener instanceof Python2Listener) {
    listener.exitComp_for(this);
  }
};
Comp_forContext.prototype.accept = function (visitor) {
  if (visitor instanceof Python2Visitor) {
    return visitor.visitComp_for(this);
  } else {
    return visitor.visitChildren(this);
  }
};
Python2Parser.Comp_forContext = Comp_forContext;
Python2Parser.prototype.comp_for = function () {
  var localctx = new Comp_forContext(this, this._ctx, this.state);
  this.enterRule(localctx, 162, Python2Parser.RULE_comp_for);
  var _la = 0; // Token type
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 999;
    this.match(Python2Parser.T__39);
    this.state = 1000;
    this.exprlist();
    this.state = 1001;
    this.match(Python2Parser.T__33);
    this.state = 1002;
    this.or_test();
    this.state = 1004;
    this._errHandler.sync(this);
    _la = this._input.LA(1);
    if (_la === Python2Parser.T__35 || _la === Python2Parser.T__39) {
      this.state = 1003;
      this.comp_iter();
    }
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};
function Comp_ifContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null;
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = Python2Parser.RULE_comp_if;
  return this;
}
Comp_ifContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Comp_ifContext.prototype.constructor = Comp_ifContext;
Comp_ifContext.prototype.old_test = function () {
  return this.getTypedRuleContext(Old_testContext, 0);
};
Comp_ifContext.prototype.comp_iter = function () {
  return this.getTypedRuleContext(Comp_iterContext, 0);
};
Comp_ifContext.prototype.enterRule = function (listener) {
  if (listener instanceof Python2Listener) {
    listener.enterComp_if(this);
  }
};
Comp_ifContext.prototype.exitRule = function (listener) {
  if (listener instanceof Python2Listener) {
    listener.exitComp_if(this);
  }
};
Comp_ifContext.prototype.accept = function (visitor) {
  if (visitor instanceof Python2Visitor) {
    return visitor.visitComp_if(this);
  } else {
    return visitor.visitChildren(this);
  }
};
Python2Parser.Comp_ifContext = Comp_ifContext;
Python2Parser.prototype.comp_if = function () {
  var localctx = new Comp_ifContext(this, this._ctx, this.state);
  this.enterRule(localctx, 164, Python2Parser.RULE_comp_if);
  var _la = 0; // Token type
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 1006;
    this.match(Python2Parser.T__35);
    this.state = 1007;
    this.old_test();
    this.state = 1009;
    this._errHandler.sync(this);
    _la = this._input.LA(1);
    if (_la === Python2Parser.T__35 || _la === Python2Parser.T__39) {
      this.state = 1008;
      this.comp_iter();
    }
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};
function Testlist1Context(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null;
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = Python2Parser.RULE_testlist1;
  return this;
}
Testlist1Context.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Testlist1Context.prototype.constructor = Testlist1Context;
Testlist1Context.prototype.test = function (i) {
  if (i === undefined) {
    i = null;
  }
  if (i === null) {
    return this.getTypedRuleContexts(TestContext);
  } else {
    return this.getTypedRuleContext(TestContext, i);
  }
};
Testlist1Context.prototype.enterRule = function (listener) {
  if (listener instanceof Python2Listener) {
    listener.enterTestlist1(this);
  }
};
Testlist1Context.prototype.exitRule = function (listener) {
  if (listener instanceof Python2Listener) {
    listener.exitTestlist1(this);
  }
};
Testlist1Context.prototype.accept = function (visitor) {
  if (visitor instanceof Python2Visitor) {
    return visitor.visitTestlist1(this);
  } else {
    return visitor.visitChildren(this);
  }
};
Python2Parser.Testlist1Context = Testlist1Context;
Python2Parser.prototype.testlist1 = function () {
  var localctx = new Testlist1Context(this, this._ctx, this.state);
  this.enterRule(localctx, 166, Python2Parser.RULE_testlist1);
  var _la = 0; // Token type
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 1011;
    this.test();
    this.state = 1016;
    this._errHandler.sync(this);
    _la = this._input.LA(1);
    while (_la === Python2Parser.T__4) {
      this.state = 1012;
      this.match(Python2Parser.T__4);
      this.state = 1013;
      this.test();
      this.state = 1018;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
    }
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};
function Encoding_declContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null;
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = Python2Parser.RULE_encoding_decl;
  return this;
}
Encoding_declContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Encoding_declContext.prototype.constructor = Encoding_declContext;
Encoding_declContext.prototype.NAME = function () {
  return this.getToken(Python2Parser.NAME, 0);
};
Encoding_declContext.prototype.enterRule = function (listener) {
  if (listener instanceof Python2Listener) {
    listener.enterEncoding_decl(this);
  }
};
Encoding_declContext.prototype.exitRule = function (listener) {
  if (listener instanceof Python2Listener) {
    listener.exitEncoding_decl(this);
  }
};
Encoding_declContext.prototype.accept = function (visitor) {
  if (visitor instanceof Python2Visitor) {
    return visitor.visitEncoding_decl(this);
  } else {
    return visitor.visitChildren(this);
  }
};
Python2Parser.Encoding_declContext = Encoding_declContext;
Python2Parser.prototype.encoding_decl = function () {
  var localctx = new Encoding_declContext(this, this._ctx, this.state);
  this.enterRule(localctx, 168, Python2Parser.RULE_encoding_decl);
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 1019;
    this.match(Python2Parser.NAME);
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};
function Yield_exprContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null;
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = Python2Parser.RULE_yield_expr;
  return this;
}
Yield_exprContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Yield_exprContext.prototype.constructor = Yield_exprContext;
Yield_exprContext.prototype.testlist = function () {
  return this.getTypedRuleContext(TestlistContext, 0);
};
Yield_exprContext.prototype.enterRule = function (listener) {
  if (listener instanceof Python2Listener) {
    listener.enterYield_expr(this);
  }
};
Yield_exprContext.prototype.exitRule = function (listener) {
  if (listener instanceof Python2Listener) {
    listener.exitYield_expr(this);
  }
};
Yield_exprContext.prototype.accept = function (visitor) {
  if (visitor instanceof Python2Visitor) {
    return visitor.visitYield_expr(this);
  } else {
    return visitor.visitChildren(this);
  }
};
Python2Parser.Yield_exprContext = Yield_exprContext;
Python2Parser.prototype.yield_expr = function () {
  var localctx = new Yield_exprContext(this, this._ctx, this.state);
  this.enterRule(localctx, 170, Python2Parser.RULE_yield_expr);
  var _la = 0; // Token type
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 1021;
    this.match(Python2Parser.T__68);
    this.state = 1023;
    this._errHandler.sync(this);
    _la = this._input.LA(1);
    if (_la === Python2Parser.T__28) {
      this.state = 1022;
      this.match(Python2Parser.T__28);
    }
    this.state = 1026;
    this._errHandler.sync(this);
    _la = this._input.LA(1);
    if ((_la - 30 & ~0x1f) == 0 && (1 << _la - 30 & (1 << Python2Parser.T__29 - 30 | 1 << Python2Parser.T__44 - 30 | 1 << Python2Parser.T__47 - 30 | 1 << Python2Parser.T__60 - 30)) !== 0 || (_la - 62 & ~0x1f) == 0 && (1 << _la - 62 & (1 << Python2Parser.T__61 - 62 | 1 << Python2Parser.T__65 - 62 | 1 << Python2Parser.T__66 - 62 | 1 << Python2Parser.NAME - 62 | 1 << Python2Parser.NUMBER - 62 | 1 << Python2Parser.STRING - 62 | 1 << Python2Parser.OPEN_PAREN - 62 | 1 << Python2Parser.OPEN_BRACE - 62 | 1 << Python2Parser.OPEN_BRACKET - 62)) !== 0) {
      this.state = 1025;
      this.testlist();
    }
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};
Python2Parser.prototype.sempred = function (localctx, ruleIndex, predIndex) {
  switch (ruleIndex) {
    case 17:
      return this.print_stmt_sempred(localctx, predIndex);
    default:
      throw "No predicate with index:" + ruleIndex;
  }
};
Python2Parser.prototype.print_stmt_sempred = function (localctx, predIndex) {
  switch (predIndex) {
    case 0:
      return this._input.LT(1).text == 'print';
    default:
      throw "No predicate with index:" + predIndex;
  }
};
exports.Python2Parser = Python2Parser;