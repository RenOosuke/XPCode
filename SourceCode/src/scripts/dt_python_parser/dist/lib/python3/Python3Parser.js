"use strict";

// Generated from /Users/ziv/github.com/dt-python-parser/src/grammar/python3/Python3.g4 by ANTLR 4.7.2
// jshint ignore: start
var antlr4 = require('antlr4/index');
var Python3Listener = require('./Python3Listener').Python3Listener;
var Python3Visitor = require('./Python3Visitor').Python3Visitor;
var grammarFileName = "Python3.g4";
var serializedATN = ["\x03\u608B\uA72A\u8133\uB9ED\u417C\u3BE7\u7786\u5964", "\x03b\u0449\x04\x02\t\x02\x04\x03\t\x03\x04\x04\t", "\x04\x04\x05\t\x05\x04\x06\t\x06\x04\x07\t\x07\x04", "\b\t\b\x04\t\t\t\x04\n\t\n\x04\x0B\t\x0B\x04\f\t\f\x04", "\r\t\r\x04\x0E\t\x0E\x04\x0F\t\x0F\x04\x10\t\x10\x04", "\x11\t\x11\x04\x12\t\x12\x04\x13\t\x13\x04\x14\t", "\x14\x04\x15\t\x15\x04\x16\t\x16\x04\x17\t\x17\x04", "\x18\t\x18\x04\x19\t\x19\x04\x1A\t\x1A\x04\x1B\t", "\x1B\x04\x1C\t\x1C\x04\x1D\t\x1D\x04\x1E\t\x1E\x04", "\x1F\t\x1F\x04 \t \x04!\t!\x04\"\t\"\x04#\t#\x04$\t$\x04", "%\t%\x04&\t&\x04'\t'\x04(\t(\x04)\t)\x04*\t*\x04+\t+\x04", ",\t,\x04-\t-\x04.\t.\x04/\t/\x040\t0\x041\t1\x042\t2\x04", "3\t3\x044\t4\x045\t5\x046\t6\x047\t7\x048\t8\x049\t9\x04", ":\t:\x04;\t;\x04<\t<\x04=\t=\x04>\t>\x04?\t?\x04@\t@\x04", "A\tA\x04B\tB\x04C\tC\x04D\tD\x04E\tE\x04F\tF\x04G\tG\x04", "H\tH\x04I\tI\x04J\tJ\x04K\tK\x04L\tL\x04M\tM\x04N\tN\x04", "O\tO\x04P\tP\x04Q\tQ\x04R\tR\x04S\tS\x04T\tT\x04U\tU\x04", "V\tV\x04W\tW\x04X\tX\x04Y\tY\x03\x02\x03\x02\x03\x02", "\x05\x02\xB6\n\x02\x03\x02\x03\x02\x03\x03\x03", "\x03\x03\x03\x03\x03\x03\x03\x05\x03\xBF\n\x03", "\x03\x04\x03\x04\x07\x04\xC3\n\x04\f\x04\x0E\x04", "\xC6\x0B\x04\x03\x04\x03\x04\x03\x05\x03\x05\x07", "\x05\xCC\n\x05\f\x05\x0E\x05\xCF\x0B\x05\x03\x05", "\x03\x05\x03\x06\x03\x06\x03\x06\x03\x06\x05\x06", "\xD7\n\x06\x03\x06\x05\x06\xDA\n\x06\x03\x06\x03", "\x06\x03\x07\x06\x07\xDF\n\x07\r\x07\x0E\x07\xE0", "\x03\b\x03\b\x03\b\x03\b\x05\b\xE7\n\b\x03\t\x03\t\x03", "\t\x03\n\x03\n\x03\n\x03\n\x03\n\x05\n\xF1\n\n\x03\n", "\x03\n\x03\n\x03\x0B\x03\x0B\x05\x0B\xF8\n\x0B\x03", "\x0B\x03\x0B\x03\f\x03\f\x03\f\x05\f\xFF\n\f\x03\f", "\x03\f\x03\f\x03\f\x05\f\u0105\n\f\x07\f\u0107\n\f\f\f\x0E", "\f\u010A\x0B\f\x03\f\x03\f\x03\f\x05\f\u010F\n\f\x03\f\x03", "\f\x03\f\x03\f\x05\f\u0115\n\f\x07\f\u0117\n\f\f\f\x0E\f\u011A", "\x0B\f\x03\f\x03\f\x03\f\x05\f\u011F\n\f\x03\f\x03\f\x05", "\f\u0123\n\f\x05\f\u0125\n\f\x03\f\x03\f\x05\f\u0129\n\f\x03", "\f\x03\f\x03\f\x03\f\x05\f\u012F\n\f\x07\f\u0131\n\f\f\f\x0E", "\f\u0134\x0B\f\x03\f\x03\f\x03\f\x05\f\u0139\n\f\x03\f\x03", "\f\x05\f\u013D\n\f\x03\r\x03\r\x03\r\x05\r\u0142\n\r\x03", "\x0E\x03\x0E\x03\x0E\x05\x0E\u0147\n\x0E\x03\x0E", "\x03\x0E\x03\x0E\x03\x0E\x05\x0E\u014D\n\x0E\x07", "\x0E\u014F\n\x0E\f\x0E\x0E\x0E\u0152\x0B\x0E\x03\x0E", "\x03\x0E\x03\x0E\x05\x0E\u0157\n\x0E\x03\x0E\x03", "\x0E\x03\x0E\x03\x0E\x05\x0E\u015D\n\x0E\x07\x0E", "\u015F\n\x0E\f\x0E\x0E\x0E\u0162\x0B\x0E\x03\x0E\x03", "\x0E\x03\x0E\x05\x0E\u0167\n\x0E\x03\x0E\x03\x0E", "\x05\x0E\u016B\n\x0E\x05\x0E\u016D\n\x0E\x03\x0E\x03", "\x0E\x05\x0E\u0171\n\x0E\x03\x0E\x03\x0E\x03\x0E", "\x03\x0E\x05\x0E\u0177\n\x0E\x07\x0E\u0179\n\x0E\f\x0E", "\x0E\x0E\u017C\x0B\x0E\x03\x0E\x03\x0E\x03\x0E\x05", "\x0E\u0181\n\x0E\x03\x0E\x03\x0E\x05\x0E\u0185\n\x0E", "\x03\x0F\x03\x0F\x03\x10\x03\x10\x05\x10\u018B\n", "\x10\x03\x11\x03\x11\x03\x11\x07\x11\u0190\n\x11", "\f\x11\x0E\x11\u0193\x0B\x11\x03\x11\x05\x11\u0196", "\n\x11\x03\x11\x03\x11\x03\x12\x03\x12\x03\x12", "\x03\x12\x03\x12\x03\x12\x03\x12\x03\x12\x05\x12", "\u01A2\n\x12\x03\x13\x03\x13\x03\x13\x03\x13\x05", "\x13\u01A8\n\x13\x03\x13\x03\x13\x03\x13\x05\x13", "\u01AD\n\x13\x07\x13\u01AF\n\x13\f\x13\x0E\x13\u01B2\x0B", "\x13\x05\x13\u01B4\n\x13\x03\x14\x03\x14\x05\x14", "\u01B8\n\x14\x03\x14\x03\x14\x03\x14\x05\x14\u01BD", "\n\x14\x07\x14\u01BF\n\x14\f\x14\x0E\x14\u01C2\x0B\x14", "\x03\x14\x05\x14\u01C5\n\x14\x03\x15\x03\x15\x03", "\x16\x03\x16\x03\x16\x03\x17\x03\x17\x03\x18\x03", "\x18\x03\x18\x03\x18\x03\x18\x05\x18\u01D3\n\x18", "\x03\x19\x03\x19\x03\x1A\x03\x1A\x03\x1B\x03\x1B", "\x05\x1B\u01DB\n\x1B\x03\x1C\x03\x1C\x03\x1D\x03", "\x1D\x03\x1D\x03\x1D\x05\x1D\u01E3\n\x1D\x05\x1D", "\u01E5\n\x1D\x03\x1E\x03\x1E\x05\x1E\u01E9\n\x1E\x03", "\x1F\x03\x1F\x03\x1F\x03 \x03 \x07 \u01F0\n \f \x0E", " \u01F3\x0B \x03 \x03 \x06 \u01F7\n \r \x0E \u01F8\x05 ", "\u01FB\n \x03 \x03 \x03 \x03 \x03 \x03 \x03 \x05 \u0204", "\n \x03!\x03!\x03!\x05!\u0209\n!\x03\"\x03\"\x03\"\x05", "\"\u020E\n\"\x03#\x03#\x03#\x07#\u0213\n#\f#\x0E#\u0216\x0B", "#\x03#\x05#\u0219\n#\x03$\x03$\x03$\x07$\u021E\n$\f$\x0E", "$\u0221\x0B$\x03%\x03%\x03%\x07%\u0226\n%\f%\x0E%\u0229", "\x0B%\x03&\x03&\x03&\x03&\x07&\u022F\n&\f&\x0E&\u0232", "\x0B&\x03'\x03'\x03'\x03'\x07'\u0238\n'\f'\x0E", "'\u023B\x0B'\x03(\x03(\x03(\x03(\x05(\u0241\n(\x03)", "\x03)\x03)\x03)\x03)\x03)\x03)\x03)\x03)\x05)\u024C", "\n)\x03*\x03*\x03*\x03*\x05*\u0252\n*\x03+\x03+\x03", "+\x03+\x03+\x03+\x03+\x03+\x03+\x07+\u025D\n+\f+\x0E", "+\u0260\x0B+\x03+\x03+\x03+\x05+\u0265\n+\x03,\x03,\x03", ",\x03,\x03,\x03,\x03,\x05,\u026E\n,\x03-\x03-\x03-\x03", "-\x03-\x03-\x03-\x03-\x03-\x05-\u0279\n-\x03.\x03.\x03", ".\x03.\x03.\x03.\x03.\x06.\u0282\n.\r.\x0E.\u0283\x03", ".\x03.\x03.\x05.\u0289\n.\x03.\x03.\x03.\x05.\u028E\n", ".\x03.\x03.\x03.\x05.\u0293\n.\x03/\x03/\x03/\x03/\x07", "/\u0299\n/\f/\x0E/\u029C\x0B/\x03/\x03/\x03/\x030\x03", "0\x030\x050\u02A4\n0\x031\x031\x031\x031\x051\u02AA\n", "1\x051\u02AC\n1\x032\x032\x032\x032\x062\u02B2\n2\r2\x0E", "2\u02B3\x032\x032\x052\u02B8\n2\x033\x033\x033\x033\x03", "3\x033\x053\u02C0\n3\x033\x053\u02C3\n3\x034\x034\x05", "4\u02C7\n4\x035\x035\x055\u02CB\n5\x035\x035\x035\x03", "6\x036\x056\u02D2\n6\x036\x036\x036\x037\x037\x037\x07", "7\u02DA\n7\f7\x0E7\u02DD\x0B7\x038\x038\x038\x078\u02E2", "\n8\f8\x0E8\u02E5\x0B8\x039\x039\x039\x059\u02EA\n9\x03", ":\x03:\x03:\x03:\x07:\u02F0\n:\f:\x0E:\u02F3\x0B:\x03", ";\x03;\x03;\x03;\x03;\x03;\x03;\x03;\x03;\x03;\x03", ";\x03;\x03;\x05;\u0302\n;\x03<\x05<\u0305\n<\x03<\x03", "<\x03=\x03=\x03=\x07=\u030C\n=\f=\x0E=\u030F\x0B=\x03", ">\x03>\x03>\x07>\u0314\n>\f>\x0E>\u0317\x0B>\x03?\x03", "?\x03?\x07?\u031C\n?\f?\x0E?\u031F\x0B?\x03@\x03@\x03", "@\x03@\x03@\x07@\u0326\n@\f@\x0E@\u0329\x0B@\x03A\x03", "A\x03A\x03A\x03A\x07A\u0330\nA\fA\x0EA\u0333\x0BA\x03", "B\x03B\x03B\x03B\x03B\x03B\x03B\x03B\x03B\x03B\x03", "B\x07B\u0340\nB\fB\x0EB\u0343\x0BB\x03C\x03C\x03C\x03", "C\x03C\x03C\x03C\x05C\u034C\nC\x03D\x03D\x07D\u0350\n", "D\fD\x0ED\u0353\x0BD\x03D\x03D\x05D\u0357\nD\x03E\x05", "E\u035A\nE\x03E\x03E\x07E\u035E\nE\fE\x0EE\u0361\x0BE\x03", "F\x03F\x03F\x05F\u0366\nF\x03F\x03F\x03F\x05F\u036B\n", "F\x03F\x03F\x03F\x05F\u0370\nF\x03F\x03F\x03F\x03F\x06", "F\u0376\nF\rF\x0EF\u0377\x03F\x03F\x03F\x03F\x05F\u037E", "\nF\x03G\x03G\x03G\x03G\x07G\u0384\nG\fG\x0EG\u0387\x0B", "G\x03G\x05G\u038A\nG\x05G\u038C\nG\x03H\x03H\x05H\u0390", "\nH\x03H\x03H\x03H\x03H\x03H\x03H\x03H\x05H\u0399\n", "H\x03I\x03I\x03I\x07I\u039E\nI\fI\x0EI\u03A1\x0BI\x03", "I\x05I\u03A4\nI\x03J\x03J\x05J\u03A8\nJ\x03J\x03J\x05", "J\u03AC\nJ\x03J\x05J\u03AF\nJ\x05J\u03B1\nJ\x03K\x03K\x05", "K\u03B5\nK\x03L\x03L\x03L\x07L\u03BA\nL\fL\x0EL\u03BD\x0B", "L\x03L\x05L\u03C0\nL\x03M\x03M\x03M\x07M\u03C5\nM\fM\x0E", "M\u03C8\x0BM\x03M\x05M\u03CB\nM\x03N\x03N\x03N\x03N\x03", "N\x03N\x03N\x03N\x03N\x07N\u03D6\nN\fN\x0EN\u03D9\x0B", "N\x03N\x05N\u03DC\nN\x05N\u03DE\nN\x03N\x03N\x03N\x03", "N\x07N\u03E4\nN\fN\x0EN\u03E7\x0BN\x03N\x05N\u03EA\nN\x05", "N\u03EC\nN\x05N\u03EE\nN\x03O\x03O\x03O\x03O\x05O\u03F4", "\nO\x03O\x05O\u03F7\nO\x03O\x03O\x03O\x03P\x03P\x03", "P\x07P\u03FF\nP\fP\x0EP\u0402\x0BP\x03P\x03P\x05P\u0406", "\nP\x03P\x03P\x03P\x03P\x07P\u040C\nP\fP\x0EP\u040F\x0B", "P\x03P\x03P\x03P\x05P\u0414\nP\x03P\x03P\x05P\u0418\n", "P\x03Q\x03Q\x05Q\u041C\nQ\x03Q\x03Q\x03Q\x03Q\x05Q\u0422", "\nQ\x03R\x03R\x05R\u0426\nR\x03S\x05S\u0429\nS\x03S\x03", "S\x03S\x03S\x03S\x05S\u0430\nS\x03T\x03T\x03T\x05T\u0435", "\nT\x03U\x03U\x05U\u0439\nU\x03V\x03V\x03V\x05V\u043E", "\nV\x03W\x03W\x03X\x03X\x03X\x05X\u0445\nX\x03Y\x03", "Y\x03Y\x02\x02Z\x02\x04\x06\b\n\f\x0E\x10\x12\x14", "\x16\x18\x1A\x1C\x1E \"$&(*,.02468:<>@BDFHJLNPRTVXZ\\^`bd", "fhjlnprtvxz|~\x80\x82\x84\x86\x88\x8A\x8C\x8E\x90", "\x92\x94\x96\x98\x9A\x9C\x9E\xA0\xA2\xA4\xA6\xA8", "\xAA\xAC\xAE\xB0\x02\x06\x03\x02R^\x03\x0201\x03", "\x02()\x03\x02*-\x02\u04BF\x02\xB5\x03\x02\x02\x02", "\x04\xBE\x03\x02\x02\x02\x06\xC4\x03\x02\x02\x02", "\b\xC9\x03\x02\x02\x02\n\xD2\x03\x02\x02\x02\f\xDE", "\x03\x02\x02\x02\x0E\xE2\x03\x02\x02\x02\x10\xE8", "\x03\x02\x02\x02\x12\xEB\x03\x02\x02\x02\x14\xF5", "\x03\x02\x02\x02\x16\u013C\x03\x02\x02\x02\x18\u013E", "\x03\x02\x02\x02\x1A\u0184\x03\x02\x02\x02\x1C\u0186", "\x03\x02\x02\x02\x1E\u018A\x03\x02\x02\x02 \u018C", "\x03\x02\x02\x02\"\u01A1\x03\x02\x02\x02$\u01A3\x03", "\x02\x02\x02&\u01B7\x03\x02\x02\x02(\u01C6\x03\x02", "\x02\x02*\u01C8\x03\x02\x02\x02,\u01CB\x03\x02\x02", "\x02.\u01D2\x03\x02\x02\x020\u01D4\x03\x02\x02\x02", "2\u01D6\x03\x02\x02\x024\u01D8\x03\x02\x02\x026\u01DC", "\x03\x02\x02\x028\u01DE\x03\x02\x02\x02:\u01E8\x03", "\x02\x02\x02<\u01EA\x03\x02\x02\x02>\u01ED\x03\x02", "\x02\x02@\u0205\x03\x02\x02\x02B\u020A\x03\x02\x02", "\x02D\u020F\x03\x02\x02\x02F\u021A\x03\x02\x02\x02", "H\u0222\x03\x02\x02\x02J\u022A\x03\x02\x02\x02L\u0233", "\x03\x02\x02\x02N\u023C\x03\x02\x02\x02P\u024B\x03", "\x02\x02\x02R\u024D\x03\x02\x02\x02T\u0253\x03\x02", "\x02\x02V\u0266\x03\x02\x02\x02X\u026F\x03\x02\x02", "\x02Z\u027A\x03\x02\x02\x02\\\u0294\x03\x02\x02\x02", "^\u02A0\x03\x02\x02\x02`\u02A5\x03\x02\x02\x02b\u02B7", "\x03\x02\x02\x02d\u02C2\x03\x02\x02\x02f\u02C6\x03", "\x02\x02\x02h\u02C8\x03\x02\x02\x02j\u02CF\x03\x02", "\x02\x02l\u02D6\x03\x02\x02\x02n\u02DE\x03\x02\x02", "\x02p\u02E9\x03\x02\x02\x02r\u02EB\x03\x02\x02\x02", "t\u0301\x03\x02\x02\x02v\u0304\x03\x02\x02\x02x\u0308", "\x03\x02\x02\x02z\u0310\x03\x02\x02\x02|\u0318\x03", "\x02\x02\x02~\u0320\x03\x02\x02\x02\x80\u032A\x03", "\x02\x02\x02\x82\u0334\x03\x02\x02\x02\x84\u034B\x03", "\x02\x02\x02\x86\u034D\x03\x02\x02\x02\x88\u0359\x03", "\x02\x02\x02\x8A\u037D\x03\x02\x02\x02\x8C\u037F\x03", "\x02\x02\x02\x8E\u0398\x03\x02\x02\x02\x90\u039A\x03", "\x02\x02\x02\x92\u03B0\x03\x02\x02\x02\x94\u03B2\x03", "\x02\x02\x02\x96\u03B6\x03\x02\x02\x02\x98\u03C1\x03", "\x02\x02\x02\x9A\u03ED\x03\x02\x02\x02\x9C\u03EF\x03", "\x02\x02\x02\x9E\u0400\x03\x02\x02\x02\xA0\u0421\x03", "\x02\x02\x02\xA2\u0425\x03\x02\x02\x02\xA4\u0428\x03", "\x02\x02\x02\xA6\u0431\x03\x02\x02\x02\xA8\u0436\x03", "\x02\x02\x02\xAA\u043D\x03\x02\x02\x02\xAC\u043F\x03", "\x02\x02\x02\xAE\u0444\x03\x02\x02\x02\xB0\u0446\x03", "\x02\x02\x02\xB2\xB6\x05\x04\x03\x02\xB3\xB6\x05", "\x06\x04\x02\xB4\xB6\x05\b\x05\x02\xB5\xB2\x03", "\x02\x02\x02\xB5\xB3\x03\x02\x02\x02\xB5\xB4\x03", "\x02\x02\x02\xB5\xB6\x03\x02\x02\x02\xB6\xB7\x03", "\x02\x02\x02\xB7\xB8\x07\x02\x02\x03\xB8\x03\x03", "\x02\x02\x02\xB9\xBF\x07&\x02\x02\xBA\xBF\x05", " \x11\x02\xBB\xBC\x05P)\x02\xBC\xBD\x07&\x02\x02", "\xBD\xBF\x03\x02\x02\x02\xBE\xB9\x03\x02\x02\x02", "\xBE\xBA\x03\x02\x02\x02\xBE\xBB\x03\x02\x02\x02", "\xBF\x05\x03\x02\x02\x02\xC0\xC3\x07&\x02\x02", "\xC1\xC3\x05\x1E\x10\x02\xC2\xC0\x03\x02\x02\x02", "\xC2\xC1\x03\x02\x02\x02\xC3\xC6\x03\x02\x02\x02", "\xC4\xC2\x03\x02\x02\x02\xC4\xC5\x03\x02\x02\x02", "\xC5\xC7\x03\x02\x02\x02\xC6\xC4\x03\x02\x02\x02", "\xC7\xC8\x07\x02\x02\x03\xC8\x07\x03\x02\x02\x02", "\xC9\xCD\x05\x98M\x02\xCA\xCC\x07&\x02\x02\xCB", "\xCA\x03\x02\x02\x02\xCC\xCF\x03\x02\x02\x02\xCD", "\xCB\x03\x02\x02\x02\xCD\xCE\x03\x02\x02\x02\xCE", "\xD0\x03\x02\x02\x02\xCF\xCD\x03\x02\x02\x02\xD0", "\xD1\x07\x02\x02\x03\xD1\t\x03\x02\x02\x02\xD2", "\xD3\x07P\x02\x02\xD3\xD9\x05H%\x02\xD4\xD6\x07", "3\x02\x02\xD5\xD7\x05\x9EP\x02\xD6\xD5\x03\x02", "\x02\x02\xD6\xD7\x03\x02\x02\x02\xD7\xD8\x03\x02", "\x02\x02\xD8\xDA\x074\x02\x02\xD9\xD4\x03\x02", "\x02\x02\xD9\xDA\x03\x02\x02\x02\xDA\xDB\x03\x02", "\x02\x02\xDB\xDC\x07&\x02\x02\xDC\x0B\x03\x02", "\x02\x02\xDD\xDF\x05\n\x06\x02\xDE\xDD\x03\x02", "\x02\x02\xDF\xE0\x03\x02\x02\x02\xE0\xDE\x03\x02", "\x02\x02\xE0\xE1\x03\x02\x02\x02\xE1\r\x03\x02", "\x02\x02\xE2\xE6\x05\f\x07\x02\xE3\xE7\x05\x9C", "O\x02\xE4\xE7\x05\x12\n\x02\xE5\xE7\x05\x10\t\x02", "\xE6\xE3\x03\x02\x02\x02\xE6\xE4\x03\x02\x02\x02", "\xE6\xE5\x03\x02\x02\x02\xE7\x0F\x03\x02\x02\x02", "\xE8\xE9\x07$\x02\x02\xE9\xEA\x05\x12\n\x02\xEA", "\x11\x03\x02\x02\x02\xEB\xEC\x07\x03\x02\x02\xEC", "\xED\x07'\x02\x02\xED\xF0\x05\x14\x0B\x02\xEE", "\xEF\x07Q\x02\x02\xEF\xF1\x05d3\x02\xF0\xEE\x03", "\x02\x02\x02\xF0\xF1\x03\x02\x02\x02\xF1\xF2\x03", "\x02\x02\x02\xF2\xF3\x076\x02\x02\xF3\xF4\x05", "b2\x02\xF4\x13\x03\x02\x02\x02\xF5\xF7\x073\x02", "\x02\xF6\xF8\x05\x16\f\x02\xF7\xF6\x03\x02\x02", "\x02\xF7\xF8\x03\x02\x02\x02\xF8\xF9\x03\x02\x02", "\x02\xF9\xFA\x074\x02\x02\xFA\x15\x03\x02\x02", "\x02\xFB\xFE\x05\x18\r\x02\xFC\xFD\x079\x02\x02", "\xFD\xFF\x05d3\x02\xFE\xFC\x03\x02\x02\x02\xFE", "\xFF\x03\x02\x02\x02\xFF\u0108\x03\x02\x02\x02\u0100", "\u0101\x075\x02\x02\u0101\u0104\x05\x18\r\x02\u0102\u0103", "\x079\x02\x02\u0103\u0105\x05d3\x02\u0104\u0102\x03\x02", "\x02\x02\u0104\u0105\x03\x02\x02\x02\u0105\u0107\x03\x02", "\x02\x02\u0106\u0100\x03\x02\x02\x02\u0107\u010A\x03\x02", "\x02\x02\u0108\u0106\x03\x02\x02\x02\u0108\u0109\x03\x02", "\x02\x02\u0109\u0124\x03\x02\x02\x02\u010A\u0108\x03\x02", "\x02\x02\u010B\u0122\x075\x02\x02\u010C\u010E\x072\x02", "\x02\u010D\u010F\x05\x18\r\x02\u010E\u010D\x03\x02\x02", "\x02\u010E\u010F\x03\x02\x02\x02\u010F\u0118\x03\x02\x02", "\x02\u0110\u0111\x075\x02\x02\u0111\u0114\x05\x18\r\x02", "\u0112\u0113\x079\x02\x02\u0113\u0115\x05d3\x02\u0114\u0112", "\x03\x02\x02\x02\u0114\u0115\x03\x02\x02\x02\u0115\u0117", "\x03\x02\x02\x02\u0116\u0110\x03\x02\x02\x02\u0117\u011A", "\x03\x02\x02\x02\u0118\u0116\x03\x02\x02\x02\u0118\u0119", "\x03\x02\x02\x02\u0119\u011E\x03\x02\x02\x02\u011A\u0118", "\x03\x02\x02\x02\u011B\u011C\x075\x02\x02\u011C\u011D", "\x078\x02\x02\u011D\u011F\x05\x18\r\x02\u011E\u011B\x03", "\x02\x02\x02\u011E\u011F\x03\x02\x02\x02\u011F\u0123\x03", "\x02\x02\x02\u0120\u0121\x078\x02\x02\u0121\u0123\x05", "\x18\r\x02\u0122\u010C\x03\x02\x02\x02\u0122\u0120\x03", "\x02\x02\x02\u0122\u0123\x03\x02\x02\x02\u0123\u0125\x03", "\x02\x02\x02\u0124\u010B\x03\x02\x02\x02\u0124\u0125\x03", "\x02\x02\x02\u0125\u013D\x03\x02\x02\x02\u0126\u0128\x07", "2\x02\x02\u0127\u0129\x05\x18\r\x02\u0128\u0127\x03\x02", "\x02\x02\u0128\u0129\x03\x02\x02\x02\u0129\u0132\x03\x02", "\x02\x02\u012A\u012B\x075\x02\x02\u012B\u012E\x05\x18", "\r\x02\u012C\u012D\x079\x02\x02\u012D\u012F\x05d3\x02\u012E", "\u012C\x03\x02\x02\x02\u012E\u012F\x03\x02\x02\x02\u012F", "\u0131\x03\x02\x02\x02\u0130\u012A\x03\x02\x02\x02\u0131", "\u0134\x03\x02\x02\x02\u0132\u0130\x03\x02\x02\x02\u0132", "\u0133\x03\x02\x02\x02\u0133\u0138\x03\x02\x02\x02\u0134", "\u0132\x03\x02\x02\x02\u0135\u0136\x075\x02\x02\u0136", "\u0137\x078\x02\x02\u0137\u0139\x05\x18\r\x02\u0138\u0135", "\x03\x02\x02\x02\u0138\u0139\x03\x02\x02\x02\u0139\u013D", "\x03\x02\x02\x02\u013A\u013B\x078\x02\x02\u013B\u013D", "\x05\x18\r\x02\u013C\xFB\x03\x02\x02\x02\u013C\u0126", "\x03\x02\x02\x02\u013C\u013A\x03\x02\x02\x02\u013D\x17", "\x03\x02\x02\x02\u013E\u0141\x07'\x02\x02\u013F\u0140", "\x076\x02\x02\u0140\u0142\x05d3\x02\u0141\u013F\x03\x02", "\x02\x02\u0141\u0142\x03\x02\x02\x02\u0142\x19\x03\x02", "\x02\x02\u0143\u0146\x05\x1C\x0F\x02\u0144\u0145\x079", "\x02\x02\u0145\u0147\x05d3\x02\u0146\u0144\x03\x02\x02", "\x02\u0146\u0147\x03\x02\x02\x02\u0147\u0150\x03\x02\x02", "\x02\u0148\u0149\x075\x02\x02\u0149\u014C\x05\x1C\x0F", "\x02\u014A\u014B\x079\x02\x02\u014B\u014D\x05d3\x02\u014C", "\u014A\x03\x02\x02\x02\u014C\u014D\x03\x02\x02\x02\u014D", "\u014F\x03\x02\x02\x02\u014E\u0148\x03\x02\x02\x02\u014F", "\u0152\x03\x02\x02\x02\u0150\u014E\x03\x02\x02\x02\u0150", "\u0151\x03\x02\x02\x02\u0151\u016C\x03\x02\x02\x02\u0152", "\u0150\x03\x02\x02\x02\u0153\u016A\x075\x02\x02\u0154", "\u0156\x072\x02\x02\u0155\u0157\x05\x1C\x0F\x02\u0156", "\u0155\x03\x02\x02\x02\u0156\u0157\x03\x02\x02\x02\u0157", "\u0160\x03\x02\x02\x02\u0158\u0159\x075\x02\x02\u0159", "\u015C\x05\x1C\x0F\x02\u015A\u015B\x079\x02\x02\u015B", "\u015D\x05d3\x02\u015C\u015A\x03\x02\x02\x02\u015C\u015D", "\x03\x02\x02\x02\u015D\u015F\x03\x02\x02\x02\u015E\u0158", "\x03\x02\x02\x02\u015F\u0162\x03\x02\x02\x02\u0160\u015E", "\x03\x02\x02\x02\u0160\u0161\x03\x02\x02\x02\u0161\u0166", "\x03\x02\x02\x02\u0162\u0160\x03\x02\x02\x02\u0163\u0164", "\x075\x02\x02\u0164\u0165\x078\x02\x02\u0165\u0167\x05", "\x1C\x0F\x02\u0166\u0163\x03\x02\x02\x02\u0166\u0167\x03", "\x02\x02\x02\u0167\u016B\x03\x02\x02\x02\u0168\u0169\x07", "8\x02\x02\u0169\u016B\x05\x1C\x0F\x02\u016A\u0154\x03", "\x02\x02\x02\u016A\u0168\x03\x02\x02\x02\u016A\u016B\x03", "\x02\x02\x02\u016B\u016D\x03\x02\x02\x02\u016C\u0153\x03", "\x02\x02\x02\u016C\u016D\x03\x02\x02\x02\u016D\u0185\x03", "\x02\x02\x02\u016E\u0170\x072\x02\x02\u016F\u0171\x05", "\x1C\x0F\x02\u0170\u016F\x03\x02\x02\x02\u0170\u0171\x03", "\x02\x02\x02\u0171\u017A\x03\x02\x02\x02\u0172\u0173\x07", "5\x02\x02\u0173\u0176\x05\x1C\x0F\x02\u0174\u0175\x07", "9\x02\x02\u0175\u0177\x05d3\x02\u0176\u0174\x03\x02\x02", "\x02\u0176\u0177\x03\x02\x02\x02\u0177\u0179\x03\x02\x02", "\x02\u0178\u0172\x03\x02\x02\x02\u0179\u017C\x03\x02\x02", "\x02\u017A\u0178\x03\x02\x02\x02\u017A\u017B\x03\x02\x02", "\x02\u017B\u0180\x03\x02\x02\x02\u017C\u017A\x03\x02\x02", "\x02\u017D\u017E\x075\x02\x02\u017E\u017F\x078\x02\x02", "\u017F\u0181\x05\x1C\x0F\x02\u0180\u017D\x03\x02\x02\x02", "\u0180\u0181\x03\x02\x02\x02\u0181\u0185\x03\x02\x02\x02", "\u0182\u0183\x078\x02\x02\u0183\u0185\x05\x1C\x0F\x02", "\u0184\u0143\x03\x02\x02\x02\u0184\u016E\x03\x02\x02\x02", "\u0184\u0182\x03\x02\x02\x02\u0185\x1B\x03\x02\x02\x02", "\u0186\u0187\x07'\x02\x02\u0187\x1D\x03\x02\x02\x02", "\u0188\u018B\x05 \x11\x02\u0189\u018B\x05P)\x02\u018A\u0188", "\x03\x02\x02\x02\u018A\u0189\x03\x02\x02\x02\u018B\x1F", "\x03\x02\x02\x02\u018C\u0191\x05\"\x12\x02\u018D\u018E", "\x077\x02\x02\u018E\u0190\x05\"\x12\x02\u018F\u018D\x03", "\x02\x02\x02\u0190\u0193\x03\x02\x02\x02\u0191\u018F\x03", "\x02\x02\x02\u0191\u0192\x03\x02\x02\x02\u0192\u0195\x03", "\x02\x02\x02\u0193\u0191\x03\x02\x02\x02\u0194\u0196\x07", "7\x02\x02\u0195\u0194\x03\x02\x02\x02\u0195\u0196\x03", "\x02\x02\x02\u0196\u0197\x03\x02\x02\x02\u0197\u0198\x07", "&\x02\x02\u0198!\x03\x02\x02\x02\u0199\u01A2\x05$\x13", "\x02\u019A\u01A2\x05*\x16\x02\u019B\u01A2\x05,\x17\x02", "\u019C\u01A2\x05.\x18\x02\u019D\u01A2\x05:\x1E\x02\u019E", "\u01A2\x05J&\x02\u019F\u01A2\x05L'\x02\u01A0\u01A2\x05N(", "\x02\u01A1\u0199\x03\x02\x02\x02\u01A1\u019A\x03\x02\x02", "\x02\u01A1\u019B\x03\x02\x02\x02\u01A1\u019C\x03\x02\x02", "\x02\u01A1\u019D\x03\x02\x02\x02\u01A1\u019E\x03\x02\x02", "\x02\u01A1\u019F\x03\x02\x02\x02\u01A1\u01A0\x03\x02\x02", "\x02\u01A2#\x03\x02\x02\x02\u01A3\u01B3\x05&\x14\x02", "\u01A4\u01A7\x05(\x15\x02\u01A5\u01A8\x05\xA8U\x02\u01A6", "\u01A8\x05\x98M\x02\u01A7\u01A5\x03\x02\x02\x02\u01A7", "\u01A6\x03\x02\x02\x02\u01A8\u01B4\x03\x02\x02\x02\u01A9", "\u01AC\x079\x02\x02\u01AA\u01AD\x05\xA8U\x02\u01AB\u01AD", "\x05&\x14\x02\u01AC\u01AA\x03\x02\x02\x02\u01AC\u01AB", "\x03\x02\x02\x02\u01AD\u01AF\x03\x02\x02\x02\u01AE\u01A9", "\x03\x02\x02\x02\u01AF\u01B2\x03\x02\x02\x02\u01B0\u01AE", "\x03\x02\x02\x02\u01B0\u01B1\x03\x02\x02\x02\u01B1\u01B4", "\x03\x02\x02\x02\u01B2\u01B0\x03\x02\x02\x02\u01B3\u01A4", "\x03\x02\x02\x02\u01B3\u01B0\x03\x02\x02\x02\u01B4%", "\x03\x02\x02\x02\u01B5\u01B8\x05d3\x02\u01B6\u01B8\x05", "v<\x02\u01B7\u01B5\x03\x02\x02\x02\u01B7\u01B6\x03\x02", "\x02\x02\u01B8\u01C0\x03\x02\x02\x02\u01B9\u01BC\x075", "\x02\x02\u01BA\u01BD\x05d3\x02\u01BB\u01BD\x05v<\x02\u01BC", "\u01BA\x03\x02\x02\x02\u01BC\u01BB\x03\x02\x02\x02\u01BD", "\u01BF\x03\x02\x02\x02\u01BE\u01B9\x03\x02\x02\x02\u01BF", "\u01C2\x03\x02\x02\x02\u01C0\u01BE\x03\x02\x02\x02\u01C0", "\u01C1\x03\x02\x02\x02\u01C1\u01C4\x03\x02\x02\x02\u01C2", "\u01C0\x03\x02\x02\x02\u01C3\u01C5\x075\x02\x02\u01C4", "\u01C3\x03\x02\x02\x02\u01C4\u01C5\x03\x02\x02\x02\u01C5", "'\x03\x02\x02\x02\u01C6\u01C7\t\x02\x02\x02\u01C7)\x03", "\x02\x02\x02\u01C8\u01C9\x07 \x02\x02\u01C9\u01CA\x05", "\x96L\x02\u01CA+\x03\x02\x02\x02\u01CB\u01CC\x07!\x02", "\x02\u01CC-\x03\x02\x02\x02\u01CD\u01D3\x050\x19\x02", "\u01CE\u01D3\x052\x1A\x02\u01CF\u01D3\x054\x1B\x02\u01D0", "\u01D3\x058\x1D\x02\u01D1\u01D3\x056\x1C\x02\u01D2\u01CD", "\x03\x02\x02\x02\u01D2\u01CE\x03\x02\x02\x02\u01D2\u01CF", "\x03\x02\x02\x02\u01D2\u01D0\x03\x02\x02\x02\u01D2\u01D1", "\x03\x02\x02\x02\u01D3/\x03\x02\x02\x02\u01D4\u01D5", "\x07#\x02\x02\u01D51\x03\x02\x02\x02\u01D6\u01D7\x07", "\"\x02\x02\u01D73\x03\x02\x02\x02\u01D8\u01DA\x07\x04", "\x02\x02\u01D9\u01DB\x05\x98M\x02\u01DA\u01D9\x03\x02", "\x02\x02\u01DA\u01DB\x03\x02\x02\x02\u01DB5\x03\x02", "\x02\x02\u01DC\u01DD\x05\xA8U\x02\u01DD7\x03\x02\x02", "\x02\u01DE\u01E4\x07\x05\x02\x02\u01DF\u01E2\x05d3\x02", "\u01E0\u01E1\x07\x06\x02\x02\u01E1\u01E3\x05d3\x02\u01E2", "\u01E0\x03\x02\x02\x02\u01E2\u01E3\x03\x02\x02\x02\u01E3", "\u01E5\x03\x02\x02\x02\u01E4\u01DF\x03\x02\x02\x02\u01E4", "\u01E5\x03\x02\x02\x02\u01E59\x03\x02\x02\x02\u01E6", "\u01E9\x05<\x1F\x02\u01E7\u01E9\x05> \x02\u01E8\u01E6\x03", "\x02\x02\x02\u01E8\u01E7\x03\x02\x02\x02\u01E9;\x03", "\x02\x02\x02\u01EA\u01EB\x07\x07\x02\x02\u01EB\u01EC\x05", "F$\x02\u01EC=\x03\x02\x02\x02\u01ED\u01FA\x07\x06\x02", "\x02\u01EE\u01F0\t\x03\x02\x02\u01EF\u01EE\x03\x02\x02", "\x02\u01F0\u01F3\x03\x02\x02\x02\u01F1\u01EF\x03\x02\x02", "\x02\u01F1\u01F2\x03\x02\x02\x02\u01F2\u01F4\x03\x02\x02", "\x02\u01F3\u01F1\x03\x02\x02\x02\u01F4\u01FB\x05H%\x02", "\u01F5\u01F7\t\x03\x02\x02\u01F6\u01F5\x03\x02\x02\x02", "\u01F7\u01F8\x03\x02\x02\x02\u01F8\u01F6\x03\x02\x02\x02", "\u01F8\u01F9\x03\x02\x02\x02\u01F9\u01FB\x03\x02\x02\x02", "\u01FA\u01F1\x03\x02\x02\x02\u01FA\u01F6\x03\x02\x02\x02", "\u01FB\u01FC\x03\x02\x02\x02\u01FC\u0203\x07\x07\x02\x02", "\u01FD\u0204\x072\x02\x02\u01FE\u01FF\x073\x02\x02\u01FF", "\u0200\x05D#\x02\u0200\u0201\x074\x02\x02\u0201\u0204\x03", "\x02\x02\x02\u0202\u0204\x05D#\x02\u0203\u01FD\x03\x02", "\x02\x02\u0203\u01FE\x03\x02\x02\x02\u0203\u0202\x03\x02", "\x02\x02\u0204?\x03\x02\x02\x02\u0205\u0208\x07'\x02", "\x02\u0206\u0207\x07\b\x02\x02\u0207\u0209\x07'\x02\x02", "\u0208\u0206\x03\x02\x02\x02\u0208\u0209\x03\x02\x02\x02", "\u0209A\x03\x02\x02\x02\u020A\u020D\x05H%\x02\u020B\u020C", "\x07\b\x02\x02\u020C\u020E\x07'\x02\x02\u020D\u020B\x03", "\x02\x02\x02\u020D\u020E\x03\x02\x02\x02\u020EC\x03", "\x02\x02\x02\u020F\u0214\x05@!\x02\u0210\u0211\x075\x02", "\x02\u0211\u0213\x05@!\x02\u0212\u0210\x03\x02\x02\x02", "\u0213\u0216\x03\x02\x02\x02\u0214\u0212\x03\x02\x02\x02", "\u0214\u0215\x03\x02\x02\x02\u0215\u0218\x03\x02\x02\x02", "\u0216\u0214\x03\x02\x02\x02\u0217\u0219\x075\x02\x02", "\u0218\u0217\x03\x02\x02\x02\u0218\u0219\x03\x02\x02\x02", "\u0219E\x03\x02\x02\x02\u021A\u021F\x05B\"\x02\u021B\u021C", "\x075\x02\x02\u021C\u021E\x05B\"\x02\u021D\u021B\x03\x02", "\x02\x02\u021E\u0221\x03\x02\x02\x02\u021F\u021D\x03\x02", "\x02\x02\u021F\u0220\x03\x02\x02\x02\u0220G\x03\x02", "\x02\x02\u0221\u021F\x03\x02\x02\x02\u0222\u0227\x07'", "\x02\x02\u0223\u0224\x070\x02\x02\u0224\u0226\x07'\x02", "\x02\u0225\u0223\x03\x02\x02\x02\u0226\u0229\x03\x02\x02", "\x02\u0227\u0225\x03\x02\x02\x02\u0227\u0228\x03\x02\x02", "\x02\u0228I\x03\x02\x02\x02\u0229\u0227\x03\x02\x02", "\x02\u022A\u022B\x07\t\x02\x02\u022B\u0230\x07'\x02\x02", "\u022C\u022D\x075\x02\x02\u022D\u022F\x07'\x02\x02\u022E", "\u022C\x03\x02\x02\x02\u022F\u0232\x03\x02\x02\x02\u0230", "\u022E\x03\x02\x02\x02\u0230\u0231\x03\x02\x02\x02\u0231", "K\x03\x02\x02\x02\u0232\u0230\x03\x02\x02\x02\u0233", "\u0234\x07\n\x02\x02\u0234\u0239\x07'\x02\x02\u0235\u0236", "\x075\x02\x02\u0236\u0238\x07'\x02\x02\u0237\u0235\x03", "\x02\x02\x02\u0238\u023B\x03\x02\x02\x02\u0239\u0237\x03", "\x02\x02\x02\u0239\u023A\x03\x02\x02\x02\u023AM\x03", "\x02\x02\x02\u023B\u0239\x03\x02\x02\x02\u023C\u023D\x07", "\x0B\x02\x02\u023D\u0240\x05d3\x02\u023E\u023F\x075\x02", "\x02\u023F\u0241\x05d3\x02\u0240\u023E\x03\x02\x02\x02", "\u0240\u0241\x03\x02\x02\x02\u0241O\x03\x02\x02\x02", "\u0242\u024C\x05T+\x02\u0243\u024C\x05V,\x02\u0244\u024C\x05", "X-\x02\u0245\u024C\x05Z.\x02\u0246\u024C\x05\\/\x02\u0247", "\u024C\x05\x12\n\x02\u0248\u024C\x05\x9CO\x02\u0249\u024C", "\x05\x0E\b\x02\u024A\u024C\x05R*\x02\u024B\u0242\x03\x02", "\x02\x02\u024B\u0243\x03\x02\x02\x02\u024B\u0244\x03\x02", "\x02\x02\u024B\u0245\x03\x02\x02\x02\u024B\u0246\x03\x02", "\x02\x02\u024B\u0247\x03\x02\x02\x02\u024B\u0248\x03\x02", "\x02\x02\u024B\u0249\x03\x02\x02\x02\u024B\u024A\x03\x02", "\x02\x02\u024CQ\x03\x02\x02\x02\u024D\u0251\x07$\x02", "\x02\u024E\u0252\x05\x12\n\x02\u024F\u0252\x05\\/\x02\u0250", "\u0252\x05X-\x02\u0251\u024E\x03\x02\x02\x02\u0251\u024F", "\x03\x02\x02\x02\u0251\u0250\x03\x02\x02\x02\u0252S", "\x03\x02\x02\x02\u0253\u0254\x07\f\x02\x02\u0254\u0255", "\x05d3\x02\u0255\u0256\x076\x02\x02\u0256\u025E\x05b2\x02", "\u0257\u0258\x07\r\x02\x02\u0258\u0259\x05d3\x02\u0259\u025A", "\x076\x02\x02\u025A\u025B\x05b2\x02\u025B\u025D\x03\x02", "\x02\x02\u025C\u0257\x03\x02\x02\x02\u025D\u0260\x03\x02", "\x02\x02\u025E\u025C\x03\x02\x02\x02\u025E\u025F\x03\x02", "\x02\x02\u025F\u0264\x03\x02\x02\x02\u0260\u025E\x03\x02", "\x02\x02\u0261\u0262\x07\x0E\x02\x02\u0262\u0263\x076", "\x02\x02\u0263\u0265\x05b2\x02\u0264\u0261\x03\x02\x02", "\x02\u0264\u0265\x03\x02\x02\x02\u0265U\x03\x02\x02", "\x02\u0266\u0267\x07\x0F\x02\x02\u0267\u0268\x05d3\x02", "\u0268\u0269\x076\x02\x02\u0269\u026D\x05b2\x02\u026A\u026B", "\x07\x0E\x02\x02\u026B\u026C\x076\x02\x02\u026C\u026E", "\x05b2\x02\u026D\u026A\x03\x02\x02\x02\u026D\u026E\x03", "\x02\x02\x02\u026EW\x03\x02\x02\x02\u026F\u0270\x07", "\x10\x02\x02\u0270\u0271\x05\x96L\x02\u0271\u0272\x07", "\x11\x02\x02\u0272\u0273\x05\x98M\x02\u0273\u0274\x07", "6\x02\x02\u0274\u0278\x05b2\x02\u0275\u0276\x07\x0E\x02", "\x02\u0276\u0277\x076\x02\x02\u0277\u0279\x05b2\x02\u0278", "\u0275\x03\x02\x02\x02\u0278\u0279\x03\x02\x02\x02\u0279", "Y\x03\x02\x02\x02\u027A\u027B\x07\x12\x02\x02\u027B", "\u027C\x076\x02\x02\u027C\u0292\x05b2\x02\u027D\u027E\x05", "`1\x02\u027E\u027F\x076\x02\x02\u027F\u0280\x05b2\x02\u0280", "\u0282\x03\x02\x02\x02\u0281\u027D\x03\x02\x02\x02\u0282", "\u0283\x03\x02\x02\x02\u0283\u0281\x03\x02\x02\x02\u0283", "\u0284\x03\x02\x02\x02\u0284\u0288\x03\x02\x02\x02\u0285", "\u0286\x07\x0E\x02\x02\u0286\u0287\x076\x02\x02\u0287", "\u0289\x05b2\x02\u0288\u0285\x03\x02\x02\x02\u0288\u0289", "\x03\x02\x02\x02\u0289\u028D\x03\x02\x02\x02\u028A\u028B", "\x07\x13\x02\x02\u028B\u028C\x076\x02\x02\u028C\u028E", "\x05b2\x02\u028D\u028A\x03\x02\x02\x02\u028D\u028E\x03", "\x02\x02\x02\u028E\u0293\x03\x02\x02\x02\u028F\u0290\x07", "\x13\x02\x02\u0290\u0291\x076\x02\x02\u0291\u0293\x05", "b2\x02\u0292\u0281\x03\x02\x02\x02\u0292\u028F\x03\x02", "\x02\x02\u0293[\x03\x02\x02\x02\u0294\u0295\x07\x14", "\x02\x02\u0295\u029A\x05^0\x02\u0296\u0297\x075\x02\x02", "\u0297\u0299\x05^0\x02\u0298\u0296\x03\x02\x02\x02\u0299", "\u029C\x03\x02\x02\x02\u029A\u0298\x03\x02\x02\x02\u029A", "\u029B\x03\x02\x02\x02\u029B\u029D\x03\x02\x02\x02\u029C", "\u029A\x03\x02\x02\x02\u029D\u029E\x076\x02\x02\u029E", "\u029F\x05b2\x02\u029F]\x03\x02\x02\x02\u02A0\u02A3\x05", "d3\x02\u02A1\u02A2\x07\b\x02\x02\u02A2\u02A4\x05x=\x02\u02A3", "\u02A1\x03\x02\x02\x02\u02A3\u02A4\x03\x02\x02\x02\u02A4", "_\x03\x02\x02\x02\u02A5\u02AB\x07\x15\x02\x02\u02A6", "\u02A9\x05d3\x02\u02A7\u02A8\x07\b\x02\x02\u02A8\u02AA\x07", "'\x02\x02\u02A9\u02A7\x03\x02\x02\x02\u02A9\u02AA\x03", "\x02\x02\x02\u02AA\u02AC\x03\x02\x02\x02\u02AB\u02A6\x03", "\x02\x02\x02\u02AB\u02AC\x03\x02\x02\x02\u02ACa\x03", "\x02\x02\x02\u02AD\u02B8\x05 \x11\x02\u02AE\u02AF\x07", "&\x02\x02\u02AF\u02B1\x07a\x02\x02\u02B0\u02B2\x05\x1E", "\x10\x02\u02B1\u02B0\x03\x02\x02\x02\u02B2\u02B3\x03\x02", "\x02\x02\u02B3\u02B1\x03\x02\x02\x02\u02B3\u02B4\x03\x02", "\x02\x02\u02B4\u02B5\x03\x02\x02\x02\u02B5\u02B6\x07b", "\x02\x02\u02B6\u02B8\x03\x02\x02\x02\u02B7\u02AD\x03\x02", "\x02\x02\u02B7\u02AE\x03\x02\x02\x02\u02B8c\x03\x02", "\x02\x02\u02B9\u02BF\x05l7\x02\u02BA\u02BB\x07\f\x02\x02", "\u02BB\u02BC\x05l7\x02\u02BC\u02BD\x07\x0E\x02\x02\u02BD", "\u02BE\x05d3\x02\u02BE\u02C0\x03\x02\x02\x02\u02BF\u02BA", "\x03\x02\x02\x02\u02BF\u02C0\x03\x02\x02\x02\u02C0\u02C3", "\x03\x02\x02\x02\u02C1\u02C3\x05h5\x02\u02C2\u02B9\x03", "\x02\x02\x02\u02C2\u02C1\x03\x02\x02\x02\u02C3e\x03", "\x02\x02\x02\u02C4\u02C7\x05l7\x02\u02C5\u02C7\x05j6\x02", "\u02C6\u02C4\x03\x02\x02\x02\u02C6\u02C5\x03\x02\x02\x02", "\u02C7g\x03\x02\x02\x02\u02C8\u02CA\x07\x16\x02\x02", "\u02C9\u02CB\x05\x1A\x0E\x02\u02CA\u02C9\x03\x02\x02\x02", "\u02CA\u02CB\x03\x02\x02\x02\u02CB\u02CC\x03\x02\x02\x02", "\u02CC\u02CD\x076\x02\x02\u02CD\u02CE\x05d3\x02\u02CEi\x03", "\x02\x02\x02\u02CF\u02D1\x07\x16\x02\x02\u02D0\u02D2\x05", "\x1A\x0E\x02\u02D1\u02D0\x03\x02\x02\x02\u02D1\u02D2\x03", "\x02\x02\x02\u02D2\u02D3\x03\x02\x02\x02\u02D3\u02D4\x07", "6\x02\x02\u02D4\u02D5\x05f4\x02\u02D5k\x03\x02\x02\x02", "\u02D6\u02DB\x05n8\x02\u02D7\u02D8\x07\x17\x02\x02\u02D8", "\u02DA\x05n8\x02\u02D9\u02D7\x03\x02\x02\x02\u02DA\u02DD", "\x03\x02\x02\x02\u02DB\u02D9\x03\x02\x02\x02\u02DB\u02DC", "\x03\x02\x02\x02\u02DCm\x03\x02\x02\x02\u02DD\u02DB", "\x03\x02\x02\x02\u02DE\u02E3\x05p9\x02\u02DF\u02E0\x07", "\x18\x02\x02\u02E0\u02E2\x05p9\x02\u02E1\u02DF\x03\x02", "\x02\x02\u02E2\u02E5\x03\x02\x02\x02\u02E3\u02E1\x03\x02", "\x02\x02\u02E3\u02E4\x03\x02\x02\x02\u02E4o\x03\x02", "\x02\x02\u02E5\u02E3\x03\x02\x02\x02\u02E6\u02E7\x07\x19", "\x02\x02\u02E7\u02EA\x05p9\x02\u02E8\u02EA\x05r:\x02\u02E9", "\u02E6\x03\x02\x02\x02\u02E9\u02E8\x03\x02\x02\x02\u02EA", "q\x03\x02\x02\x02\u02EB\u02F1\x05v<\x02\u02EC\u02ED\x05", "t;\x02\u02ED\u02EE\x05v<\x02\u02EE\u02F0\x03\x02\x02\x02", "\u02EF\u02EC\x03\x02\x02\x02\u02F0\u02F3\x03\x02\x02\x02", "\u02F1\u02EF\x03\x02\x02\x02\u02F1\u02F2\x03\x02\x02\x02", "\u02F2s\x03\x02\x02\x02\u02F3\u02F1\x03\x02\x02\x02", "\u02F4\u0302\x07I\x02\x02\u02F5\u0302\x07J\x02\x02\u02F6", "\u0302\x07K\x02\x02\u02F7\u0302\x07L\x02\x02\u02F8\u0302", "\x07M\x02\x02\u02F9\u0302\x07N\x02\x02\u02FA\u0302\x07", "O\x02\x02\u02FB\u0302\x07\x11\x02\x02\u02FC\u02FD\x07", "\x19\x02\x02\u02FD\u0302\x07\x11\x02\x02\u02FE\u0302\x07", "\x1A\x02\x02\u02FF\u0300\x07\x1A\x02\x02\u0300\u0302\x07", "\x19\x02\x02\u0301\u02F4\x03\x02\x02\x02\u0301\u02F5\x03", "\x02\x02\x02\u0301\u02F6\x03\x02\x02\x02\u0301\u02F7\x03", "\x02\x02\x02\u0301\u02F8\x03\x02\x02\x02\u0301\u02F9\x03", "\x02\x02\x02\u0301\u02FA\x03\x02\x02\x02\u0301\u02FB\x03", "\x02\x02\x02\u0301\u02FC\x03\x02\x02\x02\u0301\u02FE\x03", "\x02\x02\x02\u0301\u02FF\x03\x02\x02\x02\u0302u\x03", "\x02\x02\x02\u0303\u0305\x072\x02\x02\u0304\u0303\x03", "\x02\x02\x02\u0304\u0305\x03\x02\x02\x02\u0305\u0306\x03", "\x02\x02\x02\u0306\u0307\x05x=\x02\u0307w\x03\x02\x02", "\x02\u0308\u030D\x05z>\x02\u0309\u030A\x07<\x02\x02\u030A", "\u030C\x05z>\x02\u030B\u0309\x03\x02\x02\x02\u030C\u030F", "\x03\x02\x02\x02\u030D\u030B\x03\x02\x02\x02\u030D\u030E", "\x03\x02\x02\x02\u030Ey\x03\x02\x02\x02\u030F\u030D", "\x03\x02\x02\x02\u0310\u0315\x05|?\x02\u0311\u0312\x07", "=\x02\x02\u0312\u0314\x05|?\x02\u0313\u0311\x03\x02\x02", "\x02\u0314\u0317\x03\x02\x02\x02\u0315\u0313\x03\x02\x02", "\x02\u0315\u0316\x03\x02\x02\x02\u0316{\x03\x02\x02", "\x02\u0317\u0315\x03\x02\x02\x02\u0318\u031D\x05~@\x02", "\u0319\u031A\x07>\x02\x02\u031A\u031C\x05~@\x02\u031B\u0319", "\x03\x02\x02\x02\u031C\u031F\x03\x02\x02\x02\u031D\u031B", "\x03\x02\x02\x02\u031D\u031E\x03\x02\x02\x02\u031E}", "\x03\x02\x02\x02\u031F\u031D\x03\x02\x02\x02\u0320\u0327", "\x05\x80A\x02\u0321\u0322\x07?\x02\x02\u0322\u0326\x05", "\x80A\x02\u0323\u0324\x07@\x02\x02\u0324\u0326\x05\x80", "A\x02\u0325\u0321\x03\x02\x02\x02\u0325\u0323\x03\x02", "\x02\x02\u0326\u0329\x03\x02\x02\x02\u0327\u0325\x03\x02", "\x02\x02\u0327\u0328\x03\x02\x02\x02\u0328\x7F\x03\x02", "\x02\x02\u0329\u0327\x03\x02\x02\x02\u032A\u0331\x05\x82", "B\x02\u032B\u032C\x07A\x02\x02\u032C\u0330\x05\x82B\x02", "\u032D\u032E\x07B\x02\x02\u032E\u0330\x05\x82B\x02\u032F", "\u032B\x03\x02\x02\x02\u032F\u032D\x03\x02\x02\x02\u0330", "\u0333\x03\x02\x02\x02\u0331\u032F\x03\x02\x02\x02\u0331", "\u0332\x03\x02\x02\x02\u0332\x81\x03\x02\x02\x02\u0333", "\u0331\x03\x02\x02\x02\u0334\u0341\x05\x84C\x02\u0335", "\u0336\x072\x02\x02\u0336\u0340\x05\x84C\x02\u0337\u0338", "\x07C\x02\x02\u0338\u0340\x05\x84C\x02\u0339\u033A\x07", "D\x02\x02\u033A\u0340\x05\x84C\x02\u033B\u033C\x07E\x02", "\x02\u033C\u0340\x05\x84C\x02\u033D\u033E\x07P\x02\x02", "\u033E\u0340\x05\x84C\x02\u033F\u0335\x03\x02\x02\x02", "\u033F\u0337\x03\x02\x02\x02\u033F\u0339\x03\x02\x02\x02", "\u033F\u033B\x03\x02\x02\x02\u033F\u033D\x03\x02\x02\x02", "\u0340\u0343\x03\x02\x02\x02\u0341\u033F\x03\x02\x02\x02", "\u0341\u0342\x03\x02\x02\x02\u0342\x83\x03\x02\x02\x02", "\u0343\u0341\x03\x02\x02\x02\u0344\u0345\x07A\x02\x02", "\u0345\u034C\x05\x84C\x02\u0346\u0347\x07B\x02\x02\u0347", "\u034C\x05\x84C\x02\u0348\u0349\x07F\x02\x02\u0349\u034C", "\x05\x84C\x02\u034A\u034C\x05\x86D\x02\u034B\u0344\x03", "\x02\x02\x02\u034B\u0346\x03\x02\x02\x02\u034B\u0348\x03", "\x02\x02\x02\u034B\u034A\x03\x02\x02\x02\u034C\x85\x03", "\x02\x02\x02\u034D\u0351\x05\x88E\x02\u034E\u0350\x05", "\x8EH\x02\u034F\u034E\x03\x02\x02\x02\u0350\u0353\x03", "\x02\x02\x02\u0351\u034F\x03\x02\x02\x02\u0351\u0352\x03", "\x02\x02\x02\u0352\u0356\x03\x02\x02\x02\u0353\u0351\x03", "\x02\x02\x02\u0354\u0355\x078\x02\x02\u0355\u0357\x05", "\x84C\x02\u0356\u0354\x03\x02\x02\x02\u0356\u0357\x03", "\x02\x02\x02\u0357\x87\x03\x02\x02\x02\u0358\u035A\x07", "%\x02\x02\u0359\u0358\x03\x02\x02\x02\u0359\u035A\x03", "\x02\x02\x02\u035A\u035B\x03\x02\x02\x02\u035B\u035F\x05", "\x8AF\x02\u035C\u035E\x05\x8EH\x02\u035D\u035C\x03\x02", "\x02\x02\u035E\u0361\x03\x02\x02\x02\u035F\u035D\x03\x02", "\x02\x02\u035F\u0360\x03\x02\x02\x02\u0360\x89\x03\x02", "\x02\x02\u0361\u035F\x03\x02\x02\x02\u0362\u0365\x073", "\x02\x02\u0363\u0366\x05\xA8U\x02\u0364\u0366\x05\x8C", "G\x02\u0365\u0363\x03\x02\x02\x02\u0365\u0364\x03\x02", "\x02\x02\u0365\u0366\x03\x02\x02\x02\u0366\u0367\x03\x02", "\x02\x02\u0367\u037E\x074\x02\x02\u0368\u036A\x07:\x02", "\x02\u0369\u036B\x05\x8CG\x02\u036A\u0369\x03\x02\x02", "\x02\u036A\u036B\x03\x02\x02\x02\u036B\u036C\x03\x02\x02", "\x02\u036C\u037E\x07;\x02\x02\u036D\u036F\x07G\x02\x02", "\u036E\u0370\x05\x9AN\x02\u036F\u036E\x03\x02\x02\x02", "\u036F\u0370\x03\x02\x02\x02\u0370\u0371\x03\x02\x02\x02", "\u0371\u037E\x07H\x02\x02\u0372\u037E\x07'\x02\x02\u0373", "\u037E\x05\xAEX\x02\u0374\u0376\x05\xACW\x02\u0375\u0374", "\x03\x02\x02\x02\u0376\u0377\x03\x02\x02\x02\u0377\u0375", "\x03\x02\x02\x02\u0377\u0378\x03\x02\x02\x02\u0378\u037E", "\x03\x02\x02\x02\u0379\u037E\x071\x02\x02\u037A\u037E", "\x07\x1B\x02\x02\u037B\u037E\x07\x1C\x02\x02\u037C\u037E", "\x07\x1D\x02\x02\u037D\u0362\x03\x02\x02\x02\u037D\u0368", "\x03\x02\x02\x02\u037D\u036D\x03\x02\x02\x02\u037D\u0372", "\x03\x02\x02\x02\u037D\u0373\x03\x02\x02\x02\u037D\u0375", "\x03\x02\x02\x02\u037D\u0379\x03\x02\x02\x02\u037D\u037A", "\x03\x02\x02\x02\u037D\u037B\x03\x02\x02\x02\u037D\u037C", "\x03\x02\x02\x02\u037E\x8B\x03\x02\x02\x02\u037F\u038B", "\x05d3\x02\u0380\u038C\x05\xA4S\x02\u0381\u0382\x075\x02", "\x02\u0382\u0384\x05d3\x02\u0383\u0381\x03\x02\x02\x02", "\u0384\u0387\x03\x02\x02\x02\u0385\u0383\x03\x02\x02\x02", "\u0385\u0386\x03\x02\x02\x02\u0386\u0389\x03\x02\x02\x02", "\u0387\u0385\x03\x02\x02\x02\u0388\u038A\x075\x02\x02", "\u0389\u0388\x03\x02\x02\x02\u0389\u038A\x03\x02\x02\x02", "\u038A\u038C\x03\x02\x02\x02\u038B\u0380\x03\x02\x02\x02", "\u038B\u0385\x03\x02\x02\x02\u038C\x8D\x03\x02\x02\x02", "\u038D\u038F\x073\x02\x02\u038E\u0390\x05\x9EP\x02\u038F", "\u038E\x03\x02\x02\x02\u038F\u0390\x03\x02\x02\x02\u0390", "\u0391\x03\x02\x02\x02\u0391\u0399\x074\x02\x02\u0392", "\u0393\x07:\x02\x02\u0393\u0394\x05\x90I\x02\u0394\u0395", "\x07;\x02\x02\u0395\u0399\x03\x02\x02\x02\u0396\u0397", "\x070\x02\x02\u0397\u0399\x07'\x02\x02\u0398\u038D\x03", "\x02\x02\x02\u0398\u0392\x03\x02\x02\x02\u0398\u0396\x03", "\x02\x02\x02\u0399\x8F\x03\x02\x02\x02\u039A\u039F\x05", "\x92J\x02\u039B\u039C\x075\x02\x02\u039C\u039E\x05\x92", "J\x02\u039D\u039B\x03\x02\x02\x02\u039E\u03A1\x03\x02", "\x02\x02\u039F\u039D\x03\x02\x02\x02\u039F\u03A0\x03\x02", "\x02\x02\u03A0\u03A3\x03\x02\x02\x02\u03A1\u039F\x03\x02", "\x02\x02\u03A2\u03A4\x075\x02\x02\u03A3\u03A2\x03\x02", "\x02\x02\u03A3\u03A4\x03\x02\x02\x02\u03A4\x91\x03\x02", "\x02\x02\u03A5\u03B1\x05d3\x02\u03A6\u03A8\x05d3\x02\u03A7", "\u03A6\x03\x02\x02\x02\u03A7\u03A8\x03\x02\x02\x02\u03A8", "\u03A9\x03\x02\x02\x02\u03A9\u03AB\x076\x02\x02\u03AA", "\u03AC\x05d3\x02\u03AB\u03AA\x03\x02\x02\x02\u03AB\u03AC", "\x03\x02\x02\x02\u03AC\u03AE\x03\x02\x02\x02\u03AD\u03AF", "\x05\x94K\x02\u03AE\u03AD\x03\x02\x02\x02\u03AE\u03AF", "\x03\x02\x02\x02\u03AF\u03B1\x03\x02\x02\x02\u03B0\u03A5", "\x03\x02\x02\x02\u03B0\u03A7\x03\x02\x02\x02\u03B1\x93", "\x03\x02\x02\x02\u03B2\u03B4\x076\x02\x02\u03B3\u03B5", "\x05d3\x02\u03B4\u03B3\x03\x02\x02\x02\u03B4\u03B5\x03", "\x02\x02\x02\u03B5\x95\x03\x02\x02\x02\u03B6\u03BB\x05", "v<\x02\u03B7\u03B8\x075\x02\x02\u03B8\u03BA\x05v<\x02\u03B9", "\u03B7\x03\x02\x02\x02\u03BA\u03BD\x03\x02\x02\x02\u03BB", "\u03B9\x03\x02\x02\x02\u03BB\u03BC\x03\x02\x02\x02\u03BC", "\u03BF\x03\x02\x02\x02\u03BD\u03BB\x03\x02\x02\x02\u03BE", "\u03C0\x075\x02\x02\u03BF\u03BE\x03\x02\x02\x02\u03BF", "\u03C0\x03\x02\x02\x02\u03C0\x97\x03\x02\x02\x02\u03C1", "\u03C6\x05d3\x02\u03C2\u03C3\x075\x02\x02\u03C3\u03C5\x05", "d3\x02\u03C4\u03C2\x03\x02\x02\x02\u03C5\u03C8\x03\x02", "\x02\x02\u03C6\u03C4\x03\x02\x02\x02\u03C6\u03C7\x03\x02", "\x02\x02\u03C7\u03CA\x03\x02\x02\x02\u03C8\u03C6\x03\x02", "\x02\x02\u03C9\u03CB\x075\x02\x02\u03CA\u03C9\x03\x02", "\x02\x02\u03CA\u03CB\x03\x02\x02\x02\u03CB\x99\x03\x02", "\x02\x02\u03CC\u03CD\x05d3\x02\u03CD\u03CE\x076\x02\x02", "\u03CE\u03DD\x05d3\x02\u03CF\u03DE\x05\xA4S\x02\u03D0\u03D1", "\x075\x02\x02\u03D1\u03D2\x05d3\x02\u03D2\u03D3\x076\x02", "\x02\u03D3\u03D4\x05d3\x02\u03D4\u03D6\x03\x02\x02\x02", "\u03D5\u03D0\x03\x02\x02\x02\u03D6\u03D9\x03\x02\x02\x02", "\u03D7\u03D5\x03\x02\x02\x02\u03D7\u03D8\x03\x02\x02\x02", "\u03D8\u03DB\x03\x02\x02\x02\u03D9\u03D7\x03\x02\x02\x02", "\u03DA\u03DC\x075\x02\x02\u03DB\u03DA\x03\x02\x02\x02", "\u03DB\u03DC\x03\x02\x02\x02\u03DC\u03DE\x03\x02\x02\x02", "\u03DD\u03CF\x03\x02\x02\x02\u03DD\u03D7\x03\x02\x02\x02", "\u03DE\u03EE\x03\x02\x02\x02\u03DF\u03EB\x05d3\x02\u03E0", "\u03EC\x05\xA4S\x02\u03E1\u03E2\x075\x02\x02\u03E2\u03E4", "\x05d3\x02\u03E3\u03E1\x03\x02\x02\x02\u03E4\u03E7\x03", "\x02\x02\x02\u03E5\u03E3\x03\x02\x02\x02\u03E5\u03E6\x03", "\x02\x02\x02\u03E6\u03E9\x03\x02\x02\x02\u03E7\u03E5\x03", "\x02\x02\x02\u03E8\u03EA\x075\x02\x02\u03E9\u03E8\x03", "\x02\x02\x02\u03E9\u03EA\x03\x02\x02\x02\u03EA\u03EC\x03", "\x02\x02\x02\u03EB\u03E0\x03\x02\x02\x02\u03EB\u03E5\x03", "\x02\x02\x02\u03EC\u03EE\x03\x02\x02\x02\u03ED\u03CC\x03", "\x02\x02\x02\u03ED\u03DF\x03\x02\x02\x02\u03EE\x9B\x03", "\x02\x02\x02\u03EF\u03F0\x07\x1E\x02\x02\u03F0\u03F6\x07", "'\x02\x02\u03F1\u03F3\x073\x02\x02\u03F2\u03F4\x05\x9E", "P\x02\u03F3\u03F2\x03\x02\x02\x02\u03F3\u03F4\x03\x02", "\x02\x02\u03F4\u03F5\x03\x02\x02\x02\u03F5\u03F7\x074", "\x02\x02\u03F6\u03F1\x03\x02\x02\x02\u03F6\u03F7\x03\x02", "\x02\x02\u03F7\u03F8\x03\x02\x02\x02\u03F8\u03F9\x076", "\x02\x02\u03F9\u03FA\x05b2\x02\u03FA\x9D\x03\x02\x02", "\x02\u03FB\u03FC\x05\xA0Q\x02\u03FC\u03FD\x075\x02\x02", "\u03FD\u03FF\x03\x02\x02\x02\u03FE\u03FB\x03\x02\x02\x02", "\u03FF\u0402\x03\x02\x02\x02\u0400\u03FE\x03\x02\x02\x02", "\u0400\u0401\x03\x02\x02\x02\u0401\u0417\x03\x02\x02\x02", "\u0402\u0400\x03\x02\x02\x02\u0403\u0405\x05\xA0Q\x02", "\u0404\u0406\x075\x02\x02\u0405\u0404\x03\x02\x02\x02", "\u0405\u0406\x03\x02\x02\x02\u0406\u0418\x03\x02\x02\x02", "\u0407\u0408\x072\x02\x02\u0408\u040D\x05d3\x02\u0409\u040A", "\x075\x02\x02\u040A\u040C\x05\xA0Q\x02\u040B\u0409\x03", "\x02\x02\x02\u040C\u040F\x03\x02\x02\x02\u040D\u040B\x03", "\x02\x02\x02\u040D\u040E\x03\x02\x02\x02\u040E\u0413\x03", "\x02\x02\x02\u040F\u040D\x03\x02\x02\x02\u0410\u0411\x07", "5\x02\x02\u0411\u0412\x078\x02\x02\u0412\u0414\x05d3\x02", "\u0413\u0410\x03\x02\x02\x02\u0413\u0414\x03\x02\x02\x02", "\u0414\u0418\x03\x02\x02\x02\u0415\u0416\x078\x02\x02", "\u0416\u0418\x05d3\x02\u0417\u0403\x03\x02\x02\x02\u0417", "\u0407\x03\x02\x02\x02\u0417\u0415\x03\x02\x02\x02\u0418", "\x9F\x03\x02\x02\x02\u0419\u041B\x05d3\x02\u041A\u041C", "\x05\xA4S\x02\u041B\u041A\x03\x02\x02\x02\u041B\u041C", "\x03\x02\x02\x02\u041C\u0422\x03\x02\x02\x02\u041D\u041E", "\x05d3\x02\u041E\u041F\x079\x02\x02\u041F\u0420\x05d3\x02", "\u0420\u0422\x03\x02\x02\x02\u0421\u0419\x03\x02\x02\x02", "\u0421\u041D\x03\x02\x02\x02\u0422\xA1\x03\x02\x02\x02", "\u0423\u0426\x05\xA4S\x02\u0424\u0426\x05\xA6T\x02\u0425", "\u0423\x03\x02\x02\x02\u0425\u0424\x03\x02\x02\x02\u0426", "\xA3\x03\x02\x02\x02\u0427\u0429\x07$\x02\x02\u0428", "\u0427\x03\x02\x02\x02\u0428\u0429\x03\x02\x02\x02\u0429", "\u042A\x03\x02\x02\x02\u042A\u042B\x07\x10\x02\x02\u042B", "\u042C\x05\x96L\x02\u042C\u042D\x07\x11\x02\x02\u042D", "\u042F\x05l7\x02\u042E\u0430\x05\xA2R\x02\u042F\u042E\x03", "\x02\x02\x02\u042F\u0430\x03\x02\x02\x02\u0430\xA5\x03", "\x02\x02\x02\u0431\u0432\x07\f\x02\x02\u0432\u0434\x05", "f4\x02\u0433\u0435\x05\xA2R\x02\u0434\u0433\x03\x02\x02", "\x02\u0434\u0435\x03\x02\x02\x02\u0435\xA7\x03\x02\x02", "\x02\u0436\u0438\x07\x1F\x02\x02\u0437\u0439\x05\xAAV", "\x02\u0438\u0437\x03\x02\x02\x02\u0438\u0439\x03\x02\x02", "\x02\u0439\xA9\x03\x02\x02\x02\u043A\u043B\x07\x06\x02", "\x02\u043B\u043E\x05d3\x02\u043C\u043E\x05\x98M\x02\u043D", "\u043A\x03\x02\x02\x02\u043D\u043C\x03\x02\x02\x02\u043E", "\xAB\x03\x02\x02\x02\u043F\u0440\t\x04\x02\x02\u0440", "\xAD\x03\x02\x02\x02\u0441\u0445\x05\xB0Y\x02\u0442", "\u0445\x07.\x02\x02\u0443\u0445\x07/\x02\x02\u0444\u0441", "\x03\x02\x02\x02\u0444\u0442\x03\x02\x02\x02\u0444\u0443", "\x03\x02\x02\x02\u0445\xAF\x03\x02\x02\x02\u0446\u0447", "\t\x05\x02\x02\u0447\xB1\x03\x02\x02\x02\x9D\xB5", "\xBE\xC2\xC4\xCD\xD6\xD9\xE0\xE6\xF0\xF7\xFE\u0104", "\u0108\u010E\u0114\u0118\u011E\u0122\u0124\u0128\u012E\u0132\u0138\u013C", "\u0141\u0146\u014C\u0150\u0156\u015C\u0160\u0166\u016A\u016C\u0170\u0176", "\u017A\u0180\u0184\u018A\u0191\u0195\u01A1\u01A7\u01AC\u01B0\u01B3\u01B7", "\u01BC\u01C0\u01C4\u01D2\u01DA\u01E2\u01E4\u01E8\u01F1\u01F8\u01FA\u0203", "\u0208\u020D\u0214\u0218\u021F\u0227\u0230\u0239\u0240\u024B\u0251\u025E", "\u0264\u026D\u0278\u0283\u0288\u028D\u0292\u029A\u02A3\u02A9\u02AB\u02B3", "\u02B7\u02BF\u02C2\u02C6\u02CA\u02D1\u02DB\u02E3\u02E9\u02F1\u0301\u0304", "\u030D\u0315\u031D\u0325\u0327\u032F\u0331\u033F\u0341\u034B\u0351\u0356", "\u0359\u035F\u0365\u036A\u036F\u0377\u037D\u0385\u0389\u038B\u038F\u0398", "\u039F\u03A3\u03A7\u03AB\u03AE\u03B0\u03B4\u03BB\u03BF\u03C6\u03CA\u03D7", "\u03DB\u03DD\u03E5\u03E9\u03EB\u03ED\u03F3\u03F6\u0400\u0405\u040D\u0413", "\u0417\u041B\u0421\u0425\u0428\u042F\u0434\u0438\u043D\u0444"].join("");
var atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);
var decisionsToDFA = atn.decisionToState.map(function (ds, index) {
  return new antlr4.dfa.DFA(ds, index);
});
var sharedContextCache = new antlr4.PredictionContextCache();
var literalNames = [null, "'def'", "'return'", "'raise'", "'from'", "'import'", "'as'", "'global'", "'nonlocal'", "'assert'", "'if'", "'elif'", "'else'", "'while'", "'for'", "'in'", "'try'", "'finally'", "'with'", "'except'", "'lambda'", "'or'", "'and'", "'not'", "'is'", "'None'", "'True'", "'False'", "'class'", "'yield'", "'del'", "'pass'", "'continue'", "'break'", "'async'", "'await'", null, null, null, null, null, null, null, null, null, null, "'.'", "'...'", "'*'", "'('", "')'", "','", "':'", "';'", "'**'", "'='", "'['", "']'", "'|'", "'^'", "'&'", "'<<'", "'>>'", "'+'", "'-'", "'/'", "'%'", "'//'", "'~'", "'{'", "'}'", "'<'", "'>'", "'=='", "'>='", "'<='", "'<>'", "'!='", "'@'", "'->'", "'+='", "'-='", "'*='", "'@='", "'/='", "'%='", "'&='", "'|='", "'^='", "'<<='", "'>>='", "'**='", "'//='"];
var symbolicNames = [null, "DEF", "RETURN", "RAISE", "FROM", "IMPORT", "AS", "GLOBAL", "NONLOCAL", "ASSERT", "IF", "ELIF", "ELSE", "WHILE", "FOR", "IN", "TRY", "FINALLY", "WITH", "EXCEPT", "LAMBDA", "OR", "AND", "NOT", "IS", "NONE", "TRUE", "FALSE", "CLASS", "YIELD", "DEL", "PASS", "CONTINUE", "BREAK", "ASYNC", "AWAIT", "NEWLINE", "NAME", "STRING_LITERAL", "BYTES_LITERAL", "DECIMAL_INTEGER", "OCT_INTEGER", "HEX_INTEGER", "BIN_INTEGER", "FLOAT_NUMBER", "IMAG_NUMBER", "DOT", "ELLIPSIS", "STAR", "OPEN_PAREN", "CLOSE_PAREN", "COMMA", "COLON", "SEMI_COLON", "POWER", "ASSIGN", "OPEN_BRACK", "CLOSE_BRACK", "OR_OP", "XOR", "AND_OP", "LEFT_SHIFT", "RIGHT_SHIFT", "ADD", "MINUS", "DIV", "MOD", "IDIV", "NOT_OP", "OPEN_BRACE", "CLOSE_BRACE", "LESS_THAN", "GREATER_THAN", "EQUALS", "GT_EQ", "LT_EQ", "NOT_EQ_1", "NOT_EQ_2", "AT", "ARROW", "ADD_ASSIGN", "SUB_ASSIGN", "MULT_ASSIGN", "AT_ASSIGN", "DIV_ASSIGN", "MOD_ASSIGN", "AND_ASSIGN", "OR_ASSIGN", "XOR_ASSIGN", "LEFT_SHIFT_ASSIGN", "RIGHT_SHIFT_ASSIGN", "POWER_ASSIGN", "IDIV_ASSIGN", "SKIP_", "UNKNOWN_CHAR", "INDENT", "DEDENT"];
var ruleNames = ["root", "single_input", "file_input", "eval_input", "decorator", "decorators", "decorated", "async_funcdef", "funcdef", "parameters", "typedargslist", "tfpdef", "varargslist", "vfpdef", "stmt", "simple_stmt", "small_stmt", "expr_stmt", "testlist_star_expr", "augassign", "del_stmt", "pass_stmt", "flow_stmt", "break_stmt", "continue_stmt", "return_stmt", "yield_stmt", "raise_stmt", "import_stmt", "import_name", "import_from", "import_as_name", "dotted_as_name", "import_as_names", "dotted_as_names", "dotted_name", "global_stmt", "nonlocal_stmt", "assert_stmt", "compound_stmt", "async_stmt", "if_stmt", "while_stmt", "for_stmt", "try_stmt", "with_stmt", "with_item", "except_clause", "suite", "test", "test_nocond", "lambdef", "lambdef_nocond", "or_test", "and_test", "not_test", "comparison", "comp_op", "star_expr", "expr", "xor_expr", "and_expr", "shift_expr", "arith_expr", "term", "factor", "power", "atom_expr", "atom", "testlist_comp", "trailer", "subscriptlist", "subscript", "sliceop", "exprlist", "testlist", "dictorsetmaker", "classdef", "arglist", "argument", "comp_iter", "comp_for", "comp_if", "yield_expr", "yield_arg", "str", "number", "integer"];
function Python3Parser(input) {
  antlr4.Parser.call(this, input);
  this._interp = new antlr4.atn.ParserATNSimulator(this, atn, decisionsToDFA, sharedContextCache);
  this.ruleNames = ruleNames;
  this.literalNames = literalNames;
  this.symbolicNames = symbolicNames;
  return this;
}
Python3Parser.prototype = Object.create(antlr4.Parser.prototype);
Python3Parser.prototype.constructor = Python3Parser;
Object.defineProperty(Python3Parser.prototype, "atn", {
  get: function get() {
    return atn;
  }
});
Python3Parser.EOF = antlr4.Token.EOF;
Python3Parser.DEF = 1;
Python3Parser.RETURN = 2;
Python3Parser.RAISE = 3;
Python3Parser.FROM = 4;
Python3Parser.IMPORT = 5;
Python3Parser.AS = 6;
Python3Parser.GLOBAL = 7;
Python3Parser.NONLOCAL = 8;
Python3Parser.ASSERT = 9;
Python3Parser.IF = 10;
Python3Parser.ELIF = 11;
Python3Parser.ELSE = 12;
Python3Parser.WHILE = 13;
Python3Parser.FOR = 14;
Python3Parser.IN = 15;
Python3Parser.TRY = 16;
Python3Parser.FINALLY = 17;
Python3Parser.WITH = 18;
Python3Parser.EXCEPT = 19;
Python3Parser.LAMBDA = 20;
Python3Parser.OR = 21;
Python3Parser.AND = 22;
Python3Parser.NOT = 23;
Python3Parser.IS = 24;
Python3Parser.NONE = 25;
Python3Parser.TRUE = 26;
Python3Parser.FALSE = 27;
Python3Parser.CLASS = 28;
Python3Parser.YIELD = 29;
Python3Parser.DEL = 30;
Python3Parser.PASS = 31;
Python3Parser.CONTINUE = 32;
Python3Parser.BREAK = 33;
Python3Parser.ASYNC = 34;
Python3Parser.AWAIT = 35;
Python3Parser.NEWLINE = 36;
Python3Parser.NAME = 37;
Python3Parser.STRING_LITERAL = 38;
Python3Parser.BYTES_LITERAL = 39;
Python3Parser.DECIMAL_INTEGER = 40;
Python3Parser.OCT_INTEGER = 41;
Python3Parser.HEX_INTEGER = 42;
Python3Parser.BIN_INTEGER = 43;
Python3Parser.FLOAT_NUMBER = 44;
Python3Parser.IMAG_NUMBER = 45;
Python3Parser.DOT = 46;
Python3Parser.ELLIPSIS = 47;
Python3Parser.STAR = 48;
Python3Parser.OPEN_PAREN = 49;
Python3Parser.CLOSE_PAREN = 50;
Python3Parser.COMMA = 51;
Python3Parser.COLON = 52;
Python3Parser.SEMI_COLON = 53;
Python3Parser.POWER = 54;
Python3Parser.ASSIGN = 55;
Python3Parser.OPEN_BRACK = 56;
Python3Parser.CLOSE_BRACK = 57;
Python3Parser.OR_OP = 58;
Python3Parser.XOR = 59;
Python3Parser.AND_OP = 60;
Python3Parser.LEFT_SHIFT = 61;
Python3Parser.RIGHT_SHIFT = 62;
Python3Parser.ADD = 63;
Python3Parser.MINUS = 64;
Python3Parser.DIV = 65;
Python3Parser.MOD = 66;
Python3Parser.IDIV = 67;
Python3Parser.NOT_OP = 68;
Python3Parser.OPEN_BRACE = 69;
Python3Parser.CLOSE_BRACE = 70;
Python3Parser.LESS_THAN = 71;
Python3Parser.GREATER_THAN = 72;
Python3Parser.EQUALS = 73;
Python3Parser.GT_EQ = 74;
Python3Parser.LT_EQ = 75;
Python3Parser.NOT_EQ_1 = 76;
Python3Parser.NOT_EQ_2 = 77;
Python3Parser.AT = 78;
Python3Parser.ARROW = 79;
Python3Parser.ADD_ASSIGN = 80;
Python3Parser.SUB_ASSIGN = 81;
Python3Parser.MULT_ASSIGN = 82;
Python3Parser.AT_ASSIGN = 83;
Python3Parser.DIV_ASSIGN = 84;
Python3Parser.MOD_ASSIGN = 85;
Python3Parser.AND_ASSIGN = 86;
Python3Parser.OR_ASSIGN = 87;
Python3Parser.XOR_ASSIGN = 88;
Python3Parser.LEFT_SHIFT_ASSIGN = 89;
Python3Parser.RIGHT_SHIFT_ASSIGN = 90;
Python3Parser.POWER_ASSIGN = 91;
Python3Parser.IDIV_ASSIGN = 92;
Python3Parser.SKIP_ = 93;
Python3Parser.UNKNOWN_CHAR = 94;
Python3Parser.INDENT = 95;
Python3Parser.DEDENT = 96;
Python3Parser.RULE_root = 0;
Python3Parser.RULE_single_input = 1;
Python3Parser.RULE_file_input = 2;
Python3Parser.RULE_eval_input = 3;
Python3Parser.RULE_decorator = 4;
Python3Parser.RULE_decorators = 5;
Python3Parser.RULE_decorated = 6;
Python3Parser.RULE_async_funcdef = 7;
Python3Parser.RULE_funcdef = 8;
Python3Parser.RULE_parameters = 9;
Python3Parser.RULE_typedargslist = 10;
Python3Parser.RULE_tfpdef = 11;
Python3Parser.RULE_varargslist = 12;
Python3Parser.RULE_vfpdef = 13;
Python3Parser.RULE_stmt = 14;
Python3Parser.RULE_simple_stmt = 15;
Python3Parser.RULE_small_stmt = 16;
Python3Parser.RULE_expr_stmt = 17;
Python3Parser.RULE_testlist_star_expr = 18;
Python3Parser.RULE_augassign = 19;
Python3Parser.RULE_del_stmt = 20;
Python3Parser.RULE_pass_stmt = 21;
Python3Parser.RULE_flow_stmt = 22;
Python3Parser.RULE_break_stmt = 23;
Python3Parser.RULE_continue_stmt = 24;
Python3Parser.RULE_return_stmt = 25;
Python3Parser.RULE_yield_stmt = 26;
Python3Parser.RULE_raise_stmt = 27;
Python3Parser.RULE_import_stmt = 28;
Python3Parser.RULE_import_name = 29;
Python3Parser.RULE_import_from = 30;
Python3Parser.RULE_import_as_name = 31;
Python3Parser.RULE_dotted_as_name = 32;
Python3Parser.RULE_import_as_names = 33;
Python3Parser.RULE_dotted_as_names = 34;
Python3Parser.RULE_dotted_name = 35;
Python3Parser.RULE_global_stmt = 36;
Python3Parser.RULE_nonlocal_stmt = 37;
Python3Parser.RULE_assert_stmt = 38;
Python3Parser.RULE_compound_stmt = 39;
Python3Parser.RULE_async_stmt = 40;
Python3Parser.RULE_if_stmt = 41;
Python3Parser.RULE_while_stmt = 42;
Python3Parser.RULE_for_stmt = 43;
Python3Parser.RULE_try_stmt = 44;
Python3Parser.RULE_with_stmt = 45;
Python3Parser.RULE_with_item = 46;
Python3Parser.RULE_except_clause = 47;
Python3Parser.RULE_suite = 48;
Python3Parser.RULE_test = 49;
Python3Parser.RULE_test_nocond = 50;
Python3Parser.RULE_lambdef = 51;
Python3Parser.RULE_lambdef_nocond = 52;
Python3Parser.RULE_or_test = 53;
Python3Parser.RULE_and_test = 54;
Python3Parser.RULE_not_test = 55;
Python3Parser.RULE_comparison = 56;
Python3Parser.RULE_comp_op = 57;
Python3Parser.RULE_star_expr = 58;
Python3Parser.RULE_expr = 59;
Python3Parser.RULE_xor_expr = 60;
Python3Parser.RULE_and_expr = 61;
Python3Parser.RULE_shift_expr = 62;
Python3Parser.RULE_arith_expr = 63;
Python3Parser.RULE_term = 64;
Python3Parser.RULE_factor = 65;
Python3Parser.RULE_power = 66;
Python3Parser.RULE_atom_expr = 67;
Python3Parser.RULE_atom = 68;
Python3Parser.RULE_testlist_comp = 69;
Python3Parser.RULE_trailer = 70;
Python3Parser.RULE_subscriptlist = 71;
Python3Parser.RULE_subscript = 72;
Python3Parser.RULE_sliceop = 73;
Python3Parser.RULE_exprlist = 74;
Python3Parser.RULE_testlist = 75;
Python3Parser.RULE_dictorsetmaker = 76;
Python3Parser.RULE_classdef = 77;
Python3Parser.RULE_arglist = 78;
Python3Parser.RULE_argument = 79;
Python3Parser.RULE_comp_iter = 80;
Python3Parser.RULE_comp_for = 81;
Python3Parser.RULE_comp_if = 82;
Python3Parser.RULE_yield_expr = 83;
Python3Parser.RULE_yield_arg = 84;
Python3Parser.RULE_str = 85;
Python3Parser.RULE_number = 86;
Python3Parser.RULE_integer = 87;
function RootContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null;
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = Python3Parser.RULE_root;
  return this;
}
RootContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
RootContext.prototype.constructor = RootContext;
RootContext.prototype.EOF = function () {
  return this.getToken(Python3Parser.EOF, 0);
};
RootContext.prototype.single_input = function () {
  return this.getTypedRuleContext(Single_inputContext, 0);
};
RootContext.prototype.file_input = function () {
  return this.getTypedRuleContext(File_inputContext, 0);
};
RootContext.prototype.eval_input = function () {
  return this.getTypedRuleContext(Eval_inputContext, 0);
};
RootContext.prototype.enterRule = function (listener) {
  if (listener instanceof Python3Listener) {
    listener.enterRoot(this);
  }
};
RootContext.prototype.exitRule = function (listener) {
  if (listener instanceof Python3Listener) {
    listener.exitRoot(this);
  }
};
RootContext.prototype.accept = function (visitor) {
  if (visitor instanceof Python3Visitor) {
    return visitor.visitRoot(this);
  } else {
    return visitor.visitChildren(this);
  }
};
Python3Parser.RootContext = RootContext;
Python3Parser.prototype.root = function () {
  var localctx = new RootContext(this, this._ctx, this.state);
  this.enterRule(localctx, 0, Python3Parser.RULE_root);
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 179;
    this._errHandler.sync(this);
    var la_ = this._interp.adaptivePredict(this._input, 0, this._ctx);
    if (la_ === 1) {
      this.state = 176;
      this.single_input();
    } else if (la_ === 2) {
      this.state = 177;
      this.file_input();
    } else if (la_ === 3) {
      this.state = 178;
      this.eval_input();
    }
    this.state = 181;
    this.match(Python3Parser.EOF);
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};
function Single_inputContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null;
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = Python3Parser.RULE_single_input;
  return this;
}
Single_inputContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Single_inputContext.prototype.constructor = Single_inputContext;
Single_inputContext.prototype.NEWLINE = function () {
  return this.getToken(Python3Parser.NEWLINE, 0);
};
Single_inputContext.prototype.simple_stmt = function () {
  return this.getTypedRuleContext(Simple_stmtContext, 0);
};
Single_inputContext.prototype.compound_stmt = function () {
  return this.getTypedRuleContext(Compound_stmtContext, 0);
};
Single_inputContext.prototype.enterRule = function (listener) {
  if (listener instanceof Python3Listener) {
    listener.enterSingle_input(this);
  }
};
Single_inputContext.prototype.exitRule = function (listener) {
  if (listener instanceof Python3Listener) {
    listener.exitSingle_input(this);
  }
};
Single_inputContext.prototype.accept = function (visitor) {
  if (visitor instanceof Python3Visitor) {
    return visitor.visitSingle_input(this);
  } else {
    return visitor.visitChildren(this);
  }
};
Python3Parser.Single_inputContext = Single_inputContext;
Python3Parser.prototype.single_input = function () {
  var localctx = new Single_inputContext(this, this._ctx, this.state);
  this.enterRule(localctx, 2, Python3Parser.RULE_single_input);
  try {
    this.state = 188;
    this._errHandler.sync(this);
    switch (this._input.LA(1)) {
      case Python3Parser.NEWLINE:
        this.enterOuterAlt(localctx, 1);
        this.state = 183;
        this.match(Python3Parser.NEWLINE);
        break;
      case Python3Parser.RETURN:
      case Python3Parser.RAISE:
      case Python3Parser.FROM:
      case Python3Parser.IMPORT:
      case Python3Parser.GLOBAL:
      case Python3Parser.NONLOCAL:
      case Python3Parser.ASSERT:
      case Python3Parser.LAMBDA:
      case Python3Parser.NOT:
      case Python3Parser.NONE:
      case Python3Parser.TRUE:
      case Python3Parser.FALSE:
      case Python3Parser.YIELD:
      case Python3Parser.DEL:
      case Python3Parser.PASS:
      case Python3Parser.CONTINUE:
      case Python3Parser.BREAK:
      case Python3Parser.AWAIT:
      case Python3Parser.NAME:
      case Python3Parser.STRING_LITERAL:
      case Python3Parser.BYTES_LITERAL:
      case Python3Parser.DECIMAL_INTEGER:
      case Python3Parser.OCT_INTEGER:
      case Python3Parser.HEX_INTEGER:
      case Python3Parser.BIN_INTEGER:
      case Python3Parser.FLOAT_NUMBER:
      case Python3Parser.IMAG_NUMBER:
      case Python3Parser.ELLIPSIS:
      case Python3Parser.STAR:
      case Python3Parser.OPEN_PAREN:
      case Python3Parser.OPEN_BRACK:
      case Python3Parser.ADD:
      case Python3Parser.MINUS:
      case Python3Parser.NOT_OP:
      case Python3Parser.OPEN_BRACE:
        this.enterOuterAlt(localctx, 2);
        this.state = 184;
        this.simple_stmt();
        break;
      case Python3Parser.DEF:
      case Python3Parser.IF:
      case Python3Parser.WHILE:
      case Python3Parser.FOR:
      case Python3Parser.TRY:
      case Python3Parser.WITH:
      case Python3Parser.CLASS:
      case Python3Parser.ASYNC:
      case Python3Parser.AT:
        this.enterOuterAlt(localctx, 3);
        this.state = 185;
        this.compound_stmt();
        this.state = 186;
        this.match(Python3Parser.NEWLINE);
        break;
      default:
        throw new antlr4.error.NoViableAltException(this);
    }
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};
function File_inputContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null;
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = Python3Parser.RULE_file_input;
  return this;
}
File_inputContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
File_inputContext.prototype.constructor = File_inputContext;
File_inputContext.prototype.EOF = function () {
  return this.getToken(Python3Parser.EOF, 0);
};
File_inputContext.prototype.NEWLINE = function (i) {
  if (i === undefined) {
    i = null;
  }
  if (i === null) {
    return this.getTokens(Python3Parser.NEWLINE);
  } else {
    return this.getToken(Python3Parser.NEWLINE, i);
  }
};
File_inputContext.prototype.stmt = function (i) {
  if (i === undefined) {
    i = null;
  }
  if (i === null) {
    return this.getTypedRuleContexts(StmtContext);
  } else {
    return this.getTypedRuleContext(StmtContext, i);
  }
};
File_inputContext.prototype.enterRule = function (listener) {
  if (listener instanceof Python3Listener) {
    listener.enterFile_input(this);
  }
};
File_inputContext.prototype.exitRule = function (listener) {
  if (listener instanceof Python3Listener) {
    listener.exitFile_input(this);
  }
};
File_inputContext.prototype.accept = function (visitor) {
  if (visitor instanceof Python3Visitor) {
    return visitor.visitFile_input(this);
  } else {
    return visitor.visitChildren(this);
  }
};
Python3Parser.File_inputContext = File_inputContext;
Python3Parser.prototype.file_input = function () {
  var localctx = new File_inputContext(this, this._ctx, this.state);
  this.enterRule(localctx, 4, Python3Parser.RULE_file_input);
  var _la = 0; // Token type
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 194;
    this._errHandler.sync(this);
    _la = this._input.LA(1);
    while ((_la & ~0x1f) == 0 && (1 << _la & (1 << Python3Parser.DEF | 1 << Python3Parser.RETURN | 1 << Python3Parser.RAISE | 1 << Python3Parser.FROM | 1 << Python3Parser.IMPORT | 1 << Python3Parser.GLOBAL | 1 << Python3Parser.NONLOCAL | 1 << Python3Parser.ASSERT | 1 << Python3Parser.IF | 1 << Python3Parser.WHILE | 1 << Python3Parser.FOR | 1 << Python3Parser.TRY | 1 << Python3Parser.WITH | 1 << Python3Parser.LAMBDA | 1 << Python3Parser.NOT | 1 << Python3Parser.NONE | 1 << Python3Parser.TRUE | 1 << Python3Parser.FALSE | 1 << Python3Parser.CLASS | 1 << Python3Parser.YIELD | 1 << Python3Parser.DEL | 1 << Python3Parser.PASS)) !== 0 || (_la - 32 & ~0x1f) == 0 && (1 << _la - 32 & (1 << Python3Parser.CONTINUE - 32 | 1 << Python3Parser.BREAK - 32 | 1 << Python3Parser.ASYNC - 32 | 1 << Python3Parser.AWAIT - 32 | 1 << Python3Parser.NEWLINE - 32 | 1 << Python3Parser.NAME - 32 | 1 << Python3Parser.STRING_LITERAL - 32 | 1 << Python3Parser.BYTES_LITERAL - 32 | 1 << Python3Parser.DECIMAL_INTEGER - 32 | 1 << Python3Parser.OCT_INTEGER - 32 | 1 << Python3Parser.HEX_INTEGER - 32 | 1 << Python3Parser.BIN_INTEGER - 32 | 1 << Python3Parser.FLOAT_NUMBER - 32 | 1 << Python3Parser.IMAG_NUMBER - 32 | 1 << Python3Parser.ELLIPSIS - 32 | 1 << Python3Parser.STAR - 32 | 1 << Python3Parser.OPEN_PAREN - 32 | 1 << Python3Parser.OPEN_BRACK - 32 | 1 << Python3Parser.ADD - 32)) !== 0 || (_la - 64 & ~0x1f) == 0 && (1 << _la - 64 & (1 << Python3Parser.MINUS - 64 | 1 << Python3Parser.NOT_OP - 64 | 1 << Python3Parser.OPEN_BRACE - 64 | 1 << Python3Parser.AT - 64)) !== 0) {
      this.state = 192;
      this._errHandler.sync(this);
      switch (this._input.LA(1)) {
        case Python3Parser.NEWLINE:
          this.state = 190;
          this.match(Python3Parser.NEWLINE);
          break;
        case Python3Parser.DEF:
        case Python3Parser.RETURN:
        case Python3Parser.RAISE:
        case Python3Parser.FROM:
        case Python3Parser.IMPORT:
        case Python3Parser.GLOBAL:
        case Python3Parser.NONLOCAL:
        case Python3Parser.ASSERT:
        case Python3Parser.IF:
        case Python3Parser.WHILE:
        case Python3Parser.FOR:
        case Python3Parser.TRY:
        case Python3Parser.WITH:
        case Python3Parser.LAMBDA:
        case Python3Parser.NOT:
        case Python3Parser.NONE:
        case Python3Parser.TRUE:
        case Python3Parser.FALSE:
        case Python3Parser.CLASS:
        case Python3Parser.YIELD:
        case Python3Parser.DEL:
        case Python3Parser.PASS:
        case Python3Parser.CONTINUE:
        case Python3Parser.BREAK:
        case Python3Parser.ASYNC:
        case Python3Parser.AWAIT:
        case Python3Parser.NAME:
        case Python3Parser.STRING_LITERAL:
        case Python3Parser.BYTES_LITERAL:
        case Python3Parser.DECIMAL_INTEGER:
        case Python3Parser.OCT_INTEGER:
        case Python3Parser.HEX_INTEGER:
        case Python3Parser.BIN_INTEGER:
        case Python3Parser.FLOAT_NUMBER:
        case Python3Parser.IMAG_NUMBER:
        case Python3Parser.ELLIPSIS:
        case Python3Parser.STAR:
        case Python3Parser.OPEN_PAREN:
        case Python3Parser.OPEN_BRACK:
        case Python3Parser.ADD:
        case Python3Parser.MINUS:
        case Python3Parser.NOT_OP:
        case Python3Parser.OPEN_BRACE:
        case Python3Parser.AT:
          this.state = 191;
          this.stmt();
          break;
        default:
          throw new antlr4.error.NoViableAltException(this);
      }
      this.state = 196;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
    }
    this.state = 197;
    this.match(Python3Parser.EOF);
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};
function Eval_inputContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null;
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = Python3Parser.RULE_eval_input;
  return this;
}
Eval_inputContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Eval_inputContext.prototype.constructor = Eval_inputContext;
Eval_inputContext.prototype.testlist = function () {
  return this.getTypedRuleContext(TestlistContext, 0);
};
Eval_inputContext.prototype.EOF = function () {
  return this.getToken(Python3Parser.EOF, 0);
};
Eval_inputContext.prototype.NEWLINE = function (i) {
  if (i === undefined) {
    i = null;
  }
  if (i === null) {
    return this.getTokens(Python3Parser.NEWLINE);
  } else {
    return this.getToken(Python3Parser.NEWLINE, i);
  }
};
Eval_inputContext.prototype.enterRule = function (listener) {
  if (listener instanceof Python3Listener) {
    listener.enterEval_input(this);
  }
};
Eval_inputContext.prototype.exitRule = function (listener) {
  if (listener instanceof Python3Listener) {
    listener.exitEval_input(this);
  }
};
Eval_inputContext.prototype.accept = function (visitor) {
  if (visitor instanceof Python3Visitor) {
    return visitor.visitEval_input(this);
  } else {
    return visitor.visitChildren(this);
  }
};
Python3Parser.Eval_inputContext = Eval_inputContext;
Python3Parser.prototype.eval_input = function () {
  var localctx = new Eval_inputContext(this, this._ctx, this.state);
  this.enterRule(localctx, 6, Python3Parser.RULE_eval_input);
  var _la = 0; // Token type
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 199;
    this.testlist();
    this.state = 203;
    this._errHandler.sync(this);
    _la = this._input.LA(1);
    while (_la === Python3Parser.NEWLINE) {
      this.state = 200;
      this.match(Python3Parser.NEWLINE);
      this.state = 205;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
    }
    this.state = 206;
    this.match(Python3Parser.EOF);
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};
function DecoratorContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null;
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = Python3Parser.RULE_decorator;
  return this;
}
DecoratorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DecoratorContext.prototype.constructor = DecoratorContext;
DecoratorContext.prototype.AT = function () {
  return this.getToken(Python3Parser.AT, 0);
};
DecoratorContext.prototype.dotted_name = function () {
  return this.getTypedRuleContext(Dotted_nameContext, 0);
};
DecoratorContext.prototype.NEWLINE = function () {
  return this.getToken(Python3Parser.NEWLINE, 0);
};
DecoratorContext.prototype.OPEN_PAREN = function () {
  return this.getToken(Python3Parser.OPEN_PAREN, 0);
};
DecoratorContext.prototype.CLOSE_PAREN = function () {
  return this.getToken(Python3Parser.CLOSE_PAREN, 0);
};
DecoratorContext.prototype.arglist = function () {
  return this.getTypedRuleContext(ArglistContext, 0);
};
DecoratorContext.prototype.enterRule = function (listener) {
  if (listener instanceof Python3Listener) {
    listener.enterDecorator(this);
  }
};
DecoratorContext.prototype.exitRule = function (listener) {
  if (listener instanceof Python3Listener) {
    listener.exitDecorator(this);
  }
};
DecoratorContext.prototype.accept = function (visitor) {
  if (visitor instanceof Python3Visitor) {
    return visitor.visitDecorator(this);
  } else {
    return visitor.visitChildren(this);
  }
};
Python3Parser.DecoratorContext = DecoratorContext;
Python3Parser.prototype.decorator = function () {
  var localctx = new DecoratorContext(this, this._ctx, this.state);
  this.enterRule(localctx, 8, Python3Parser.RULE_decorator);
  var _la = 0; // Token type
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 208;
    this.match(Python3Parser.AT);
    this.state = 209;
    this.dotted_name();
    this.state = 215;
    this._errHandler.sync(this);
    _la = this._input.LA(1);
    if (_la === Python3Parser.OPEN_PAREN) {
      this.state = 210;
      this.match(Python3Parser.OPEN_PAREN);
      this.state = 212;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if ((_la - 20 & ~0x1f) == 0 && (1 << _la - 20 & (1 << Python3Parser.LAMBDA - 20 | 1 << Python3Parser.NOT - 20 | 1 << Python3Parser.NONE - 20 | 1 << Python3Parser.TRUE - 20 | 1 << Python3Parser.FALSE - 20 | 1 << Python3Parser.AWAIT - 20 | 1 << Python3Parser.NAME - 20 | 1 << Python3Parser.STRING_LITERAL - 20 | 1 << Python3Parser.BYTES_LITERAL - 20 | 1 << Python3Parser.DECIMAL_INTEGER - 20 | 1 << Python3Parser.OCT_INTEGER - 20 | 1 << Python3Parser.HEX_INTEGER - 20 | 1 << Python3Parser.BIN_INTEGER - 20 | 1 << Python3Parser.FLOAT_NUMBER - 20 | 1 << Python3Parser.IMAG_NUMBER - 20 | 1 << Python3Parser.ELLIPSIS - 20 | 1 << Python3Parser.STAR - 20 | 1 << Python3Parser.OPEN_PAREN - 20)) !== 0 || (_la - 54 & ~0x1f) == 0 && (1 << _la - 54 & (1 << Python3Parser.POWER - 54 | 1 << Python3Parser.OPEN_BRACK - 54 | 1 << Python3Parser.ADD - 54 | 1 << Python3Parser.MINUS - 54 | 1 << Python3Parser.NOT_OP - 54 | 1 << Python3Parser.OPEN_BRACE - 54)) !== 0) {
        this.state = 211;
        this.arglist();
      }
      this.state = 214;
      this.match(Python3Parser.CLOSE_PAREN);
    }
    this.state = 217;
    this.match(Python3Parser.NEWLINE);
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};
function DecoratorsContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null;
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = Python3Parser.RULE_decorators;
  return this;
}
DecoratorsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DecoratorsContext.prototype.constructor = DecoratorsContext;
DecoratorsContext.prototype.decorator = function (i) {
  if (i === undefined) {
    i = null;
  }
  if (i === null) {
    return this.getTypedRuleContexts(DecoratorContext);
  } else {
    return this.getTypedRuleContext(DecoratorContext, i);
  }
};
DecoratorsContext.prototype.enterRule = function (listener) {
  if (listener instanceof Python3Listener) {
    listener.enterDecorators(this);
  }
};
DecoratorsContext.prototype.exitRule = function (listener) {
  if (listener instanceof Python3Listener) {
    listener.exitDecorators(this);
  }
};
DecoratorsContext.prototype.accept = function (visitor) {
  if (visitor instanceof Python3Visitor) {
    return visitor.visitDecorators(this);
  } else {
    return visitor.visitChildren(this);
  }
};
Python3Parser.DecoratorsContext = DecoratorsContext;
Python3Parser.prototype.decorators = function () {
  var localctx = new DecoratorsContext(this, this._ctx, this.state);
  this.enterRule(localctx, 10, Python3Parser.RULE_decorators);
  var _la = 0; // Token type
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 220;
    this._errHandler.sync(this);
    _la = this._input.LA(1);
    do {
      this.state = 219;
      this.decorator();
      this.state = 222;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
    } while (_la === Python3Parser.AT);
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};
function DecoratedContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null;
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = Python3Parser.RULE_decorated;
  return this;
}
DecoratedContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DecoratedContext.prototype.constructor = DecoratedContext;
DecoratedContext.prototype.decorators = function () {
  return this.getTypedRuleContext(DecoratorsContext, 0);
};
DecoratedContext.prototype.classdef = function () {
  return this.getTypedRuleContext(ClassdefContext, 0);
};
DecoratedContext.prototype.funcdef = function () {
  return this.getTypedRuleContext(FuncdefContext, 0);
};
DecoratedContext.prototype.async_funcdef = function () {
  return this.getTypedRuleContext(Async_funcdefContext, 0);
};
DecoratedContext.prototype.enterRule = function (listener) {
  if (listener instanceof Python3Listener) {
    listener.enterDecorated(this);
  }
};
DecoratedContext.prototype.exitRule = function (listener) {
  if (listener instanceof Python3Listener) {
    listener.exitDecorated(this);
  }
};
DecoratedContext.prototype.accept = function (visitor) {
  if (visitor instanceof Python3Visitor) {
    return visitor.visitDecorated(this);
  } else {
    return visitor.visitChildren(this);
  }
};
Python3Parser.DecoratedContext = DecoratedContext;
Python3Parser.prototype.decorated = function () {
  var localctx = new DecoratedContext(this, this._ctx, this.state);
  this.enterRule(localctx, 12, Python3Parser.RULE_decorated);
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 224;
    this.decorators();
    this.state = 228;
    this._errHandler.sync(this);
    switch (this._input.LA(1)) {
      case Python3Parser.CLASS:
        this.state = 225;
        this.classdef();
        break;
      case Python3Parser.DEF:
        this.state = 226;
        this.funcdef();
        break;
      case Python3Parser.ASYNC:
        this.state = 227;
        this.async_funcdef();
        break;
      default:
        throw new antlr4.error.NoViableAltException(this);
    }
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};
function Async_funcdefContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null;
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = Python3Parser.RULE_async_funcdef;
  return this;
}
Async_funcdefContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Async_funcdefContext.prototype.constructor = Async_funcdefContext;
Async_funcdefContext.prototype.ASYNC = function () {
  return this.getToken(Python3Parser.ASYNC, 0);
};
Async_funcdefContext.prototype.funcdef = function () {
  return this.getTypedRuleContext(FuncdefContext, 0);
};
Async_funcdefContext.prototype.enterRule = function (listener) {
  if (listener instanceof Python3Listener) {
    listener.enterAsync_funcdef(this);
  }
};
Async_funcdefContext.prototype.exitRule = function (listener) {
  if (listener instanceof Python3Listener) {
    listener.exitAsync_funcdef(this);
  }
};
Async_funcdefContext.prototype.accept = function (visitor) {
  if (visitor instanceof Python3Visitor) {
    return visitor.visitAsync_funcdef(this);
  } else {
    return visitor.visitChildren(this);
  }
};
Python3Parser.Async_funcdefContext = Async_funcdefContext;
Python3Parser.prototype.async_funcdef = function () {
  var localctx = new Async_funcdefContext(this, this._ctx, this.state);
  this.enterRule(localctx, 14, Python3Parser.RULE_async_funcdef);
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 230;
    this.match(Python3Parser.ASYNC);
    this.state = 231;
    this.funcdef();
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};
function FuncdefContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null;
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = Python3Parser.RULE_funcdef;
  return this;
}
FuncdefContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FuncdefContext.prototype.constructor = FuncdefContext;
FuncdefContext.prototype.DEF = function () {
  return this.getToken(Python3Parser.DEF, 0);
};
FuncdefContext.prototype.NAME = function () {
  return this.getToken(Python3Parser.NAME, 0);
};
FuncdefContext.prototype.parameters = function () {
  return this.getTypedRuleContext(ParametersContext, 0);
};
FuncdefContext.prototype.COLON = function () {
  return this.getToken(Python3Parser.COLON, 0);
};
FuncdefContext.prototype.suite = function () {
  return this.getTypedRuleContext(SuiteContext, 0);
};
FuncdefContext.prototype.ARROW = function () {
  return this.getToken(Python3Parser.ARROW, 0);
};
FuncdefContext.prototype.test = function () {
  return this.getTypedRuleContext(TestContext, 0);
};
FuncdefContext.prototype.enterRule = function (listener) {
  if (listener instanceof Python3Listener) {
    listener.enterFuncdef(this);
  }
};
FuncdefContext.prototype.exitRule = function (listener) {
  if (listener instanceof Python3Listener) {
    listener.exitFuncdef(this);
  }
};
FuncdefContext.prototype.accept = function (visitor) {
  if (visitor instanceof Python3Visitor) {
    return visitor.visitFuncdef(this);
  } else {
    return visitor.visitChildren(this);
  }
};
Python3Parser.FuncdefContext = FuncdefContext;
Python3Parser.prototype.funcdef = function () {
  var localctx = new FuncdefContext(this, this._ctx, this.state);
  this.enterRule(localctx, 16, Python3Parser.RULE_funcdef);
  var _la = 0; // Token type
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 233;
    this.match(Python3Parser.DEF);
    this.state = 234;
    this.match(Python3Parser.NAME);
    this.state = 235;
    this.parameters();
    this.state = 238;
    this._errHandler.sync(this);
    _la = this._input.LA(1);
    if (_la === Python3Parser.ARROW) {
      this.state = 236;
      this.match(Python3Parser.ARROW);
      this.state = 237;
      this.test();
    }
    this.state = 240;
    this.match(Python3Parser.COLON);
    this.state = 241;
    this.suite();
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};
function ParametersContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null;
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = Python3Parser.RULE_parameters;
  return this;
}
ParametersContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ParametersContext.prototype.constructor = ParametersContext;
ParametersContext.prototype.OPEN_PAREN = function () {
  return this.getToken(Python3Parser.OPEN_PAREN, 0);
};
ParametersContext.prototype.CLOSE_PAREN = function () {
  return this.getToken(Python3Parser.CLOSE_PAREN, 0);
};
ParametersContext.prototype.typedargslist = function () {
  return this.getTypedRuleContext(TypedargslistContext, 0);
};
ParametersContext.prototype.enterRule = function (listener) {
  if (listener instanceof Python3Listener) {
    listener.enterParameters(this);
  }
};
ParametersContext.prototype.exitRule = function (listener) {
  if (listener instanceof Python3Listener) {
    listener.exitParameters(this);
  }
};
ParametersContext.prototype.accept = function (visitor) {
  if (visitor instanceof Python3Visitor) {
    return visitor.visitParameters(this);
  } else {
    return visitor.visitChildren(this);
  }
};
Python3Parser.ParametersContext = ParametersContext;
Python3Parser.prototype.parameters = function () {
  var localctx = new ParametersContext(this, this._ctx, this.state);
  this.enterRule(localctx, 18, Python3Parser.RULE_parameters);
  var _la = 0; // Token type
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 243;
    this.match(Python3Parser.OPEN_PAREN);
    this.state = 245;
    this._errHandler.sync(this);
    _la = this._input.LA(1);
    if ((_la - 37 & ~0x1f) == 0 && (1 << _la - 37 & (1 << Python3Parser.NAME - 37 | 1 << Python3Parser.STAR - 37 | 1 << Python3Parser.POWER - 37)) !== 0) {
      this.state = 244;
      this.typedargslist();
    }
    this.state = 247;
    this.match(Python3Parser.CLOSE_PAREN);
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};
function TypedargslistContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null;
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = Python3Parser.RULE_typedargslist;
  return this;
}
TypedargslistContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TypedargslistContext.prototype.constructor = TypedargslistContext;
TypedargslistContext.prototype.tfpdef = function (i) {
  if (i === undefined) {
    i = null;
  }
  if (i === null) {
    return this.getTypedRuleContexts(TfpdefContext);
  } else {
    return this.getTypedRuleContext(TfpdefContext, i);
  }
};
TypedargslistContext.prototype.ASSIGN = function (i) {
  if (i === undefined) {
    i = null;
  }
  if (i === null) {
    return this.getTokens(Python3Parser.ASSIGN);
  } else {
    return this.getToken(Python3Parser.ASSIGN, i);
  }
};
TypedargslistContext.prototype.test = function (i) {
  if (i === undefined) {
    i = null;
  }
  if (i === null) {
    return this.getTypedRuleContexts(TestContext);
  } else {
    return this.getTypedRuleContext(TestContext, i);
  }
};
TypedargslistContext.prototype.COMMA = function (i) {
  if (i === undefined) {
    i = null;
  }
  if (i === null) {
    return this.getTokens(Python3Parser.COMMA);
  } else {
    return this.getToken(Python3Parser.COMMA, i);
  }
};
TypedargslistContext.prototype.STAR = function () {
  return this.getToken(Python3Parser.STAR, 0);
};
TypedargslistContext.prototype.POWER = function () {
  return this.getToken(Python3Parser.POWER, 0);
};
TypedargslistContext.prototype.enterRule = function (listener) {
  if (listener instanceof Python3Listener) {
    listener.enterTypedargslist(this);
  }
};
TypedargslistContext.prototype.exitRule = function (listener) {
  if (listener instanceof Python3Listener) {
    listener.exitTypedargslist(this);
  }
};
TypedargslistContext.prototype.accept = function (visitor) {
  if (visitor instanceof Python3Visitor) {
    return visitor.visitTypedargslist(this);
  } else {
    return visitor.visitChildren(this);
  }
};
Python3Parser.TypedargslistContext = TypedargslistContext;
Python3Parser.prototype.typedargslist = function () {
  var localctx = new TypedargslistContext(this, this._ctx, this.state);
  this.enterRule(localctx, 20, Python3Parser.RULE_typedargslist);
  var _la = 0; // Token type
  try {
    this.state = 314;
    this._errHandler.sync(this);
    switch (this._input.LA(1)) {
      case Python3Parser.NAME:
        this.enterOuterAlt(localctx, 1);
        this.state = 249;
        this.tfpdef();
        this.state = 252;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if (_la === Python3Parser.ASSIGN) {
          this.state = 250;
          this.match(Python3Parser.ASSIGN);
          this.state = 251;
          this.test();
        }
        this.state = 262;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input, 13, this._ctx);
        while (_alt != 2 && _alt != antlr4.atn.ATN.INVALID_ALT_NUMBER) {
          if (_alt === 1) {
            this.state = 254;
            this.match(Python3Parser.COMMA);
            this.state = 255;
            this.tfpdef();
            this.state = 258;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === Python3Parser.ASSIGN) {
              this.state = 256;
              this.match(Python3Parser.ASSIGN);
              this.state = 257;
              this.test();
            }
          }
          this.state = 264;
          this._errHandler.sync(this);
          _alt = this._interp.adaptivePredict(this._input, 13, this._ctx);
        }
        this.state = 290;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if (_la === Python3Parser.COMMA) {
          this.state = 265;
          this.match(Python3Parser.COMMA);
          this.state = 288;
          this._errHandler.sync(this);
          switch (this._input.LA(1)) {
            case Python3Parser.STAR:
              this.state = 266;
              this.match(Python3Parser.STAR);
              this.state = 268;
              this._errHandler.sync(this);
              _la = this._input.LA(1);
              if (_la === Python3Parser.NAME) {
                this.state = 267;
                this.tfpdef();
              }
              this.state = 278;
              this._errHandler.sync(this);
              var _alt = this._interp.adaptivePredict(this._input, 16, this._ctx);
              while (_alt != 2 && _alt != antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                if (_alt === 1) {
                  this.state = 270;
                  this.match(Python3Parser.COMMA);
                  this.state = 271;
                  this.tfpdef();
                  this.state = 274;
                  this._errHandler.sync(this);
                  _la = this._input.LA(1);
                  if (_la === Python3Parser.ASSIGN) {
                    this.state = 272;
                    this.match(Python3Parser.ASSIGN);
                    this.state = 273;
                    this.test();
                  }
                }
                this.state = 280;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input, 16, this._ctx);
              }
              this.state = 284;
              this._errHandler.sync(this);
              _la = this._input.LA(1);
              if (_la === Python3Parser.COMMA) {
                this.state = 281;
                this.match(Python3Parser.COMMA);
                this.state = 282;
                this.match(Python3Parser.POWER);
                this.state = 283;
                this.tfpdef();
              }
              break;
            case Python3Parser.POWER:
              this.state = 286;
              this.match(Python3Parser.POWER);
              this.state = 287;
              this.tfpdef();
              break;
            case Python3Parser.CLOSE_PAREN:
              break;
            default:
              break;
          }
        }
        break;
      case Python3Parser.STAR:
        this.enterOuterAlt(localctx, 2);
        this.state = 292;
        this.match(Python3Parser.STAR);
        this.state = 294;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if (_la === Python3Parser.NAME) {
          this.state = 293;
          this.tfpdef();
        }
        this.state = 304;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input, 22, this._ctx);
        while (_alt != 2 && _alt != antlr4.atn.ATN.INVALID_ALT_NUMBER) {
          if (_alt === 1) {
            this.state = 296;
            this.match(Python3Parser.COMMA);
            this.state = 297;
            this.tfpdef();
            this.state = 300;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === Python3Parser.ASSIGN) {
              this.state = 298;
              this.match(Python3Parser.ASSIGN);
              this.state = 299;
              this.test();
            }
          }
          this.state = 306;
          this._errHandler.sync(this);
          _alt = this._interp.adaptivePredict(this._input, 22, this._ctx);
        }
        this.state = 310;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if (_la === Python3Parser.COMMA) {
          this.state = 307;
          this.match(Python3Parser.COMMA);
          this.state = 308;
          this.match(Python3Parser.POWER);
          this.state = 309;
          this.tfpdef();
        }
        break;
      case Python3Parser.POWER:
        this.enterOuterAlt(localctx, 3);
        this.state = 312;
        this.match(Python3Parser.POWER);
        this.state = 313;
        this.tfpdef();
        break;
      default:
        throw new antlr4.error.NoViableAltException(this);
    }
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};
function TfpdefContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null;
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = Python3Parser.RULE_tfpdef;
  return this;
}
TfpdefContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TfpdefContext.prototype.constructor = TfpdefContext;
TfpdefContext.prototype.NAME = function () {
  return this.getToken(Python3Parser.NAME, 0);
};
TfpdefContext.prototype.COLON = function () {
  return this.getToken(Python3Parser.COLON, 0);
};
TfpdefContext.prototype.test = function () {
  return this.getTypedRuleContext(TestContext, 0);
};
TfpdefContext.prototype.enterRule = function (listener) {
  if (listener instanceof Python3Listener) {
    listener.enterTfpdef(this);
  }
};
TfpdefContext.prototype.exitRule = function (listener) {
  if (listener instanceof Python3Listener) {
    listener.exitTfpdef(this);
  }
};
TfpdefContext.prototype.accept = function (visitor) {
  if (visitor instanceof Python3Visitor) {
    return visitor.visitTfpdef(this);
  } else {
    return visitor.visitChildren(this);
  }
};
Python3Parser.TfpdefContext = TfpdefContext;
Python3Parser.prototype.tfpdef = function () {
  var localctx = new TfpdefContext(this, this._ctx, this.state);
  this.enterRule(localctx, 22, Python3Parser.RULE_tfpdef);
  var _la = 0; // Token type
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 316;
    this.match(Python3Parser.NAME);
    this.state = 319;
    this._errHandler.sync(this);
    _la = this._input.LA(1);
    if (_la === Python3Parser.COLON) {
      this.state = 317;
      this.match(Python3Parser.COLON);
      this.state = 318;
      this.test();
    }
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};
function VarargslistContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null;
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = Python3Parser.RULE_varargslist;
  return this;
}
VarargslistContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
VarargslistContext.prototype.constructor = VarargslistContext;
VarargslistContext.prototype.vfpdef = function (i) {
  if (i === undefined) {
    i = null;
  }
  if (i === null) {
    return this.getTypedRuleContexts(VfpdefContext);
  } else {
    return this.getTypedRuleContext(VfpdefContext, i);
  }
};
VarargslistContext.prototype.ASSIGN = function (i) {
  if (i === undefined) {
    i = null;
  }
  if (i === null) {
    return this.getTokens(Python3Parser.ASSIGN);
  } else {
    return this.getToken(Python3Parser.ASSIGN, i);
  }
};
VarargslistContext.prototype.test = function (i) {
  if (i === undefined) {
    i = null;
  }
  if (i === null) {
    return this.getTypedRuleContexts(TestContext);
  } else {
    return this.getTypedRuleContext(TestContext, i);
  }
};
VarargslistContext.prototype.COMMA = function (i) {
  if (i === undefined) {
    i = null;
  }
  if (i === null) {
    return this.getTokens(Python3Parser.COMMA);
  } else {
    return this.getToken(Python3Parser.COMMA, i);
  }
};
VarargslistContext.prototype.STAR = function () {
  return this.getToken(Python3Parser.STAR, 0);
};
VarargslistContext.prototype.POWER = function () {
  return this.getToken(Python3Parser.POWER, 0);
};
VarargslistContext.prototype.enterRule = function (listener) {
  if (listener instanceof Python3Listener) {
    listener.enterVarargslist(this);
  }
};
VarargslistContext.prototype.exitRule = function (listener) {
  if (listener instanceof Python3Listener) {
    listener.exitVarargslist(this);
  }
};
VarargslistContext.prototype.accept = function (visitor) {
  if (visitor instanceof Python3Visitor) {
    return visitor.visitVarargslist(this);
  } else {
    return visitor.visitChildren(this);
  }
};
Python3Parser.VarargslistContext = VarargslistContext;
Python3Parser.prototype.varargslist = function () {
  var localctx = new VarargslistContext(this, this._ctx, this.state);
  this.enterRule(localctx, 24, Python3Parser.RULE_varargslist);
  var _la = 0; // Token type
  try {
    this.state = 386;
    this._errHandler.sync(this);
    switch (this._input.LA(1)) {
      case Python3Parser.NAME:
        this.enterOuterAlt(localctx, 1);
        this.state = 321;
        this.vfpdef();
        this.state = 324;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if (_la === Python3Parser.ASSIGN) {
          this.state = 322;
          this.match(Python3Parser.ASSIGN);
          this.state = 323;
          this.test();
        }
        this.state = 334;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input, 28, this._ctx);
        while (_alt != 2 && _alt != antlr4.atn.ATN.INVALID_ALT_NUMBER) {
          if (_alt === 1) {
            this.state = 326;
            this.match(Python3Parser.COMMA);
            this.state = 327;
            this.vfpdef();
            this.state = 330;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === Python3Parser.ASSIGN) {
              this.state = 328;
              this.match(Python3Parser.ASSIGN);
              this.state = 329;
              this.test();
            }
          }
          this.state = 336;
          this._errHandler.sync(this);
          _alt = this._interp.adaptivePredict(this._input, 28, this._ctx);
        }
        this.state = 362;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if (_la === Python3Parser.COMMA) {
          this.state = 337;
          this.match(Python3Parser.COMMA);
          this.state = 360;
          this._errHandler.sync(this);
          switch (this._input.LA(1)) {
            case Python3Parser.STAR:
              this.state = 338;
              this.match(Python3Parser.STAR);
              this.state = 340;
              this._errHandler.sync(this);
              _la = this._input.LA(1);
              if (_la === Python3Parser.NAME) {
                this.state = 339;
                this.vfpdef();
              }
              this.state = 350;
              this._errHandler.sync(this);
              var _alt = this._interp.adaptivePredict(this._input, 31, this._ctx);
              while (_alt != 2 && _alt != antlr4.atn.ATN.INVALID_ALT_NUMBER) {
                if (_alt === 1) {
                  this.state = 342;
                  this.match(Python3Parser.COMMA);
                  this.state = 343;
                  this.vfpdef();
                  this.state = 346;
                  this._errHandler.sync(this);
                  _la = this._input.LA(1);
                  if (_la === Python3Parser.ASSIGN) {
                    this.state = 344;
                    this.match(Python3Parser.ASSIGN);
                    this.state = 345;
                    this.test();
                  }
                }
                this.state = 352;
                this._errHandler.sync(this);
                _alt = this._interp.adaptivePredict(this._input, 31, this._ctx);
              }
              this.state = 356;
              this._errHandler.sync(this);
              _la = this._input.LA(1);
              if (_la === Python3Parser.COMMA) {
                this.state = 353;
                this.match(Python3Parser.COMMA);
                this.state = 354;
                this.match(Python3Parser.POWER);
                this.state = 355;
                this.vfpdef();
              }
              break;
            case Python3Parser.POWER:
              this.state = 358;
              this.match(Python3Parser.POWER);
              this.state = 359;
              this.vfpdef();
              break;
            case Python3Parser.COLON:
              break;
            default:
              break;
          }
        }
        break;
      case Python3Parser.STAR:
        this.enterOuterAlt(localctx, 2);
        this.state = 364;
        this.match(Python3Parser.STAR);
        this.state = 366;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if (_la === Python3Parser.NAME) {
          this.state = 365;
          this.vfpdef();
        }
        this.state = 376;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input, 37, this._ctx);
        while (_alt != 2 && _alt != antlr4.atn.ATN.INVALID_ALT_NUMBER) {
          if (_alt === 1) {
            this.state = 368;
            this.match(Python3Parser.COMMA);
            this.state = 369;
            this.vfpdef();
            this.state = 372;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === Python3Parser.ASSIGN) {
              this.state = 370;
              this.match(Python3Parser.ASSIGN);
              this.state = 371;
              this.test();
            }
          }
          this.state = 378;
          this._errHandler.sync(this);
          _alt = this._interp.adaptivePredict(this._input, 37, this._ctx);
        }
        this.state = 382;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if (_la === Python3Parser.COMMA) {
          this.state = 379;
          this.match(Python3Parser.COMMA);
          this.state = 380;
          this.match(Python3Parser.POWER);
          this.state = 381;
          this.vfpdef();
        }
        break;
      case Python3Parser.POWER:
        this.enterOuterAlt(localctx, 3);
        this.state = 384;
        this.match(Python3Parser.POWER);
        this.state = 385;
        this.vfpdef();
        break;
      default:
        throw new antlr4.error.NoViableAltException(this);
    }
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};
function VfpdefContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null;
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = Python3Parser.RULE_vfpdef;
  return this;
}
VfpdefContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
VfpdefContext.prototype.constructor = VfpdefContext;
VfpdefContext.prototype.NAME = function () {
  return this.getToken(Python3Parser.NAME, 0);
};
VfpdefContext.prototype.enterRule = function (listener) {
  if (listener instanceof Python3Listener) {
    listener.enterVfpdef(this);
  }
};
VfpdefContext.prototype.exitRule = function (listener) {
  if (listener instanceof Python3Listener) {
    listener.exitVfpdef(this);
  }
};
VfpdefContext.prototype.accept = function (visitor) {
  if (visitor instanceof Python3Visitor) {
    return visitor.visitVfpdef(this);
  } else {
    return visitor.visitChildren(this);
  }
};
Python3Parser.VfpdefContext = VfpdefContext;
Python3Parser.prototype.vfpdef = function () {
  var localctx = new VfpdefContext(this, this._ctx, this.state);
  this.enterRule(localctx, 26, Python3Parser.RULE_vfpdef);
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 388;
    this.match(Python3Parser.NAME);
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};
function StmtContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null;
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = Python3Parser.RULE_stmt;
  return this;
}
StmtContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
StmtContext.prototype.constructor = StmtContext;
StmtContext.prototype.simple_stmt = function () {
  return this.getTypedRuleContext(Simple_stmtContext, 0);
};
StmtContext.prototype.compound_stmt = function () {
  return this.getTypedRuleContext(Compound_stmtContext, 0);
};
StmtContext.prototype.enterRule = function (listener) {
  if (listener instanceof Python3Listener) {
    listener.enterStmt(this);
  }
};
StmtContext.prototype.exitRule = function (listener) {
  if (listener instanceof Python3Listener) {
    listener.exitStmt(this);
  }
};
StmtContext.prototype.accept = function (visitor) {
  if (visitor instanceof Python3Visitor) {
    return visitor.visitStmt(this);
  } else {
    return visitor.visitChildren(this);
  }
};
Python3Parser.StmtContext = StmtContext;
Python3Parser.prototype.stmt = function () {
  var localctx = new StmtContext(this, this._ctx, this.state);
  this.enterRule(localctx, 28, Python3Parser.RULE_stmt);
  try {
    this.state = 392;
    this._errHandler.sync(this);
    switch (this._input.LA(1)) {
      case Python3Parser.RETURN:
      case Python3Parser.RAISE:
      case Python3Parser.FROM:
      case Python3Parser.IMPORT:
      case Python3Parser.GLOBAL:
      case Python3Parser.NONLOCAL:
      case Python3Parser.ASSERT:
      case Python3Parser.LAMBDA:
      case Python3Parser.NOT:
      case Python3Parser.NONE:
      case Python3Parser.TRUE:
      case Python3Parser.FALSE:
      case Python3Parser.YIELD:
      case Python3Parser.DEL:
      case Python3Parser.PASS:
      case Python3Parser.CONTINUE:
      case Python3Parser.BREAK:
      case Python3Parser.AWAIT:
      case Python3Parser.NAME:
      case Python3Parser.STRING_LITERAL:
      case Python3Parser.BYTES_LITERAL:
      case Python3Parser.DECIMAL_INTEGER:
      case Python3Parser.OCT_INTEGER:
      case Python3Parser.HEX_INTEGER:
      case Python3Parser.BIN_INTEGER:
      case Python3Parser.FLOAT_NUMBER:
      case Python3Parser.IMAG_NUMBER:
      case Python3Parser.ELLIPSIS:
      case Python3Parser.STAR:
      case Python3Parser.OPEN_PAREN:
      case Python3Parser.OPEN_BRACK:
      case Python3Parser.ADD:
      case Python3Parser.MINUS:
      case Python3Parser.NOT_OP:
      case Python3Parser.OPEN_BRACE:
        this.enterOuterAlt(localctx, 1);
        this.state = 390;
        this.simple_stmt();
        break;
      case Python3Parser.DEF:
      case Python3Parser.IF:
      case Python3Parser.WHILE:
      case Python3Parser.FOR:
      case Python3Parser.TRY:
      case Python3Parser.WITH:
      case Python3Parser.CLASS:
      case Python3Parser.ASYNC:
      case Python3Parser.AT:
        this.enterOuterAlt(localctx, 2);
        this.state = 391;
        this.compound_stmt();
        break;
      default:
        throw new antlr4.error.NoViableAltException(this);
    }
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};
function Simple_stmtContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null;
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = Python3Parser.RULE_simple_stmt;
  return this;
}
Simple_stmtContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Simple_stmtContext.prototype.constructor = Simple_stmtContext;
Simple_stmtContext.prototype.small_stmt = function (i) {
  if (i === undefined) {
    i = null;
  }
  if (i === null) {
    return this.getTypedRuleContexts(Small_stmtContext);
  } else {
    return this.getTypedRuleContext(Small_stmtContext, i);
  }
};
Simple_stmtContext.prototype.NEWLINE = function () {
  return this.getToken(Python3Parser.NEWLINE, 0);
};
Simple_stmtContext.prototype.SEMI_COLON = function (i) {
  if (i === undefined) {
    i = null;
  }
  if (i === null) {
    return this.getTokens(Python3Parser.SEMI_COLON);
  } else {
    return this.getToken(Python3Parser.SEMI_COLON, i);
  }
};
Simple_stmtContext.prototype.enterRule = function (listener) {
  if (listener instanceof Python3Listener) {
    listener.enterSimple_stmt(this);
  }
};
Simple_stmtContext.prototype.exitRule = function (listener) {
  if (listener instanceof Python3Listener) {
    listener.exitSimple_stmt(this);
  }
};
Simple_stmtContext.prototype.accept = function (visitor) {
  if (visitor instanceof Python3Visitor) {
    return visitor.visitSimple_stmt(this);
  } else {
    return visitor.visitChildren(this);
  }
};
Python3Parser.Simple_stmtContext = Simple_stmtContext;
Python3Parser.prototype.simple_stmt = function () {
  var localctx = new Simple_stmtContext(this, this._ctx, this.state);
  this.enterRule(localctx, 30, Python3Parser.RULE_simple_stmt);
  var _la = 0; // Token type
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 394;
    this.small_stmt();
    this.state = 399;
    this._errHandler.sync(this);
    var _alt = this._interp.adaptivePredict(this._input, 41, this._ctx);
    while (_alt != 2 && _alt != antlr4.atn.ATN.INVALID_ALT_NUMBER) {
      if (_alt === 1) {
        this.state = 395;
        this.match(Python3Parser.SEMI_COLON);
        this.state = 396;
        this.small_stmt();
      }
      this.state = 401;
      this._errHandler.sync(this);
      _alt = this._interp.adaptivePredict(this._input, 41, this._ctx);
    }
    this.state = 403;
    this._errHandler.sync(this);
    _la = this._input.LA(1);
    if (_la === Python3Parser.SEMI_COLON) {
      this.state = 402;
      this.match(Python3Parser.SEMI_COLON);
    }
    this.state = 405;
    this.match(Python3Parser.NEWLINE);
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};
function Small_stmtContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null;
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = Python3Parser.RULE_small_stmt;
  return this;
}
Small_stmtContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Small_stmtContext.prototype.constructor = Small_stmtContext;
Small_stmtContext.prototype.expr_stmt = function () {
  return this.getTypedRuleContext(Expr_stmtContext, 0);
};
Small_stmtContext.prototype.del_stmt = function () {
  return this.getTypedRuleContext(Del_stmtContext, 0);
};
Small_stmtContext.prototype.pass_stmt = function () {
  return this.getTypedRuleContext(Pass_stmtContext, 0);
};
Small_stmtContext.prototype.flow_stmt = function () {
  return this.getTypedRuleContext(Flow_stmtContext, 0);
};
Small_stmtContext.prototype.import_stmt = function () {
  return this.getTypedRuleContext(Import_stmtContext, 0);
};
Small_stmtContext.prototype.global_stmt = function () {
  return this.getTypedRuleContext(Global_stmtContext, 0);
};
Small_stmtContext.prototype.nonlocal_stmt = function () {
  return this.getTypedRuleContext(Nonlocal_stmtContext, 0);
};
Small_stmtContext.prototype.assert_stmt = function () {
  return this.getTypedRuleContext(Assert_stmtContext, 0);
};
Small_stmtContext.prototype.enterRule = function (listener) {
  if (listener instanceof Python3Listener) {
    listener.enterSmall_stmt(this);
  }
};
Small_stmtContext.prototype.exitRule = function (listener) {
  if (listener instanceof Python3Listener) {
    listener.exitSmall_stmt(this);
  }
};
Small_stmtContext.prototype.accept = function (visitor) {
  if (visitor instanceof Python3Visitor) {
    return visitor.visitSmall_stmt(this);
  } else {
    return visitor.visitChildren(this);
  }
};
Python3Parser.Small_stmtContext = Small_stmtContext;
Python3Parser.prototype.small_stmt = function () {
  var localctx = new Small_stmtContext(this, this._ctx, this.state);
  this.enterRule(localctx, 32, Python3Parser.RULE_small_stmt);
  try {
    this.state = 415;
    this._errHandler.sync(this);
    switch (this._input.LA(1)) {
      case Python3Parser.LAMBDA:
      case Python3Parser.NOT:
      case Python3Parser.NONE:
      case Python3Parser.TRUE:
      case Python3Parser.FALSE:
      case Python3Parser.AWAIT:
      case Python3Parser.NAME:
      case Python3Parser.STRING_LITERAL:
      case Python3Parser.BYTES_LITERAL:
      case Python3Parser.DECIMAL_INTEGER:
      case Python3Parser.OCT_INTEGER:
      case Python3Parser.HEX_INTEGER:
      case Python3Parser.BIN_INTEGER:
      case Python3Parser.FLOAT_NUMBER:
      case Python3Parser.IMAG_NUMBER:
      case Python3Parser.ELLIPSIS:
      case Python3Parser.STAR:
      case Python3Parser.OPEN_PAREN:
      case Python3Parser.OPEN_BRACK:
      case Python3Parser.ADD:
      case Python3Parser.MINUS:
      case Python3Parser.NOT_OP:
      case Python3Parser.OPEN_BRACE:
        this.enterOuterAlt(localctx, 1);
        this.state = 407;
        this.expr_stmt();
        break;
      case Python3Parser.DEL:
        this.enterOuterAlt(localctx, 2);
        this.state = 408;
        this.del_stmt();
        break;
      case Python3Parser.PASS:
        this.enterOuterAlt(localctx, 3);
        this.state = 409;
        this.pass_stmt();
        break;
      case Python3Parser.RETURN:
      case Python3Parser.RAISE:
      case Python3Parser.YIELD:
      case Python3Parser.CONTINUE:
      case Python3Parser.BREAK:
        this.enterOuterAlt(localctx, 4);
        this.state = 410;
        this.flow_stmt();
        break;
      case Python3Parser.FROM:
      case Python3Parser.IMPORT:
        this.enterOuterAlt(localctx, 5);
        this.state = 411;
        this.import_stmt();
        break;
      case Python3Parser.GLOBAL:
        this.enterOuterAlt(localctx, 6);
        this.state = 412;
        this.global_stmt();
        break;
      case Python3Parser.NONLOCAL:
        this.enterOuterAlt(localctx, 7);
        this.state = 413;
        this.nonlocal_stmt();
        break;
      case Python3Parser.ASSERT:
        this.enterOuterAlt(localctx, 8);
        this.state = 414;
        this.assert_stmt();
        break;
      default:
        throw new antlr4.error.NoViableAltException(this);
    }
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};
function Expr_stmtContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null;
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = Python3Parser.RULE_expr_stmt;
  return this;
}
Expr_stmtContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Expr_stmtContext.prototype.constructor = Expr_stmtContext;
Expr_stmtContext.prototype.testlist_star_expr = function (i) {
  if (i === undefined) {
    i = null;
  }
  if (i === null) {
    return this.getTypedRuleContexts(Testlist_star_exprContext);
  } else {
    return this.getTypedRuleContext(Testlist_star_exprContext, i);
  }
};
Expr_stmtContext.prototype.augassign = function () {
  return this.getTypedRuleContext(AugassignContext, 0);
};
Expr_stmtContext.prototype.yield_expr = function (i) {
  if (i === undefined) {
    i = null;
  }
  if (i === null) {
    return this.getTypedRuleContexts(Yield_exprContext);
  } else {
    return this.getTypedRuleContext(Yield_exprContext, i);
  }
};
Expr_stmtContext.prototype.testlist = function () {
  return this.getTypedRuleContext(TestlistContext, 0);
};
Expr_stmtContext.prototype.ASSIGN = function (i) {
  if (i === undefined) {
    i = null;
  }
  if (i === null) {
    return this.getTokens(Python3Parser.ASSIGN);
  } else {
    return this.getToken(Python3Parser.ASSIGN, i);
  }
};
Expr_stmtContext.prototype.enterRule = function (listener) {
  if (listener instanceof Python3Listener) {
    listener.enterExpr_stmt(this);
  }
};
Expr_stmtContext.prototype.exitRule = function (listener) {
  if (listener instanceof Python3Listener) {
    listener.exitExpr_stmt(this);
  }
};
Expr_stmtContext.prototype.accept = function (visitor) {
  if (visitor instanceof Python3Visitor) {
    return visitor.visitExpr_stmt(this);
  } else {
    return visitor.visitChildren(this);
  }
};
Python3Parser.Expr_stmtContext = Expr_stmtContext;
Python3Parser.prototype.expr_stmt = function () {
  var localctx = new Expr_stmtContext(this, this._ctx, this.state);
  this.enterRule(localctx, 34, Python3Parser.RULE_expr_stmt);
  var _la = 0; // Token type
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 417;
    this.testlist_star_expr();
    this.state = 433;
    this._errHandler.sync(this);
    switch (this._input.LA(1)) {
      case Python3Parser.ADD_ASSIGN:
      case Python3Parser.SUB_ASSIGN:
      case Python3Parser.MULT_ASSIGN:
      case Python3Parser.AT_ASSIGN:
      case Python3Parser.DIV_ASSIGN:
      case Python3Parser.MOD_ASSIGN:
      case Python3Parser.AND_ASSIGN:
      case Python3Parser.OR_ASSIGN:
      case Python3Parser.XOR_ASSIGN:
      case Python3Parser.LEFT_SHIFT_ASSIGN:
      case Python3Parser.RIGHT_SHIFT_ASSIGN:
      case Python3Parser.POWER_ASSIGN:
      case Python3Parser.IDIV_ASSIGN:
        this.state = 418;
        this.augassign();
        this.state = 421;
        this._errHandler.sync(this);
        switch (this._input.LA(1)) {
          case Python3Parser.YIELD:
            this.state = 419;
            this.yield_expr();
            break;
          case Python3Parser.LAMBDA:
          case Python3Parser.NOT:
          case Python3Parser.NONE:
          case Python3Parser.TRUE:
          case Python3Parser.FALSE:
          case Python3Parser.AWAIT:
          case Python3Parser.NAME:
          case Python3Parser.STRING_LITERAL:
          case Python3Parser.BYTES_LITERAL:
          case Python3Parser.DECIMAL_INTEGER:
          case Python3Parser.OCT_INTEGER:
          case Python3Parser.HEX_INTEGER:
          case Python3Parser.BIN_INTEGER:
          case Python3Parser.FLOAT_NUMBER:
          case Python3Parser.IMAG_NUMBER:
          case Python3Parser.ELLIPSIS:
          case Python3Parser.STAR:
          case Python3Parser.OPEN_PAREN:
          case Python3Parser.OPEN_BRACK:
          case Python3Parser.ADD:
          case Python3Parser.MINUS:
          case Python3Parser.NOT_OP:
          case Python3Parser.OPEN_BRACE:
            this.state = 420;
            this.testlist();
            break;
          default:
            throw new antlr4.error.NoViableAltException(this);
        }
        break;
      case Python3Parser.NEWLINE:
      case Python3Parser.SEMI_COLON:
      case Python3Parser.ASSIGN:
        this.state = 430;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while (_la === Python3Parser.ASSIGN) {
          this.state = 423;
          this.match(Python3Parser.ASSIGN);
          this.state = 426;
          this._errHandler.sync(this);
          switch (this._input.LA(1)) {
            case Python3Parser.YIELD:
              this.state = 424;
              this.yield_expr();
              break;
            case Python3Parser.LAMBDA:
            case Python3Parser.NOT:
            case Python3Parser.NONE:
            case Python3Parser.TRUE:
            case Python3Parser.FALSE:
            case Python3Parser.AWAIT:
            case Python3Parser.NAME:
            case Python3Parser.STRING_LITERAL:
            case Python3Parser.BYTES_LITERAL:
            case Python3Parser.DECIMAL_INTEGER:
            case Python3Parser.OCT_INTEGER:
            case Python3Parser.HEX_INTEGER:
            case Python3Parser.BIN_INTEGER:
            case Python3Parser.FLOAT_NUMBER:
            case Python3Parser.IMAG_NUMBER:
            case Python3Parser.ELLIPSIS:
            case Python3Parser.STAR:
            case Python3Parser.OPEN_PAREN:
            case Python3Parser.OPEN_BRACK:
            case Python3Parser.ADD:
            case Python3Parser.MINUS:
            case Python3Parser.NOT_OP:
            case Python3Parser.OPEN_BRACE:
              this.state = 425;
              this.testlist_star_expr();
              break;
            default:
              throw new antlr4.error.NoViableAltException(this);
          }
          this.state = 432;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
        }
        break;
      default:
        throw new antlr4.error.NoViableAltException(this);
    }
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};
function Testlist_star_exprContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null;
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = Python3Parser.RULE_testlist_star_expr;
  return this;
}
Testlist_star_exprContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Testlist_star_exprContext.prototype.constructor = Testlist_star_exprContext;
Testlist_star_exprContext.prototype.test = function (i) {
  if (i === undefined) {
    i = null;
  }
  if (i === null) {
    return this.getTypedRuleContexts(TestContext);
  } else {
    return this.getTypedRuleContext(TestContext, i);
  }
};
Testlist_star_exprContext.prototype.star_expr = function (i) {
  if (i === undefined) {
    i = null;
  }
  if (i === null) {
    return this.getTypedRuleContexts(Star_exprContext);
  } else {
    return this.getTypedRuleContext(Star_exprContext, i);
  }
};
Testlist_star_exprContext.prototype.COMMA = function (i) {
  if (i === undefined) {
    i = null;
  }
  if (i === null) {
    return this.getTokens(Python3Parser.COMMA);
  } else {
    return this.getToken(Python3Parser.COMMA, i);
  }
};
Testlist_star_exprContext.prototype.enterRule = function (listener) {
  if (listener instanceof Python3Listener) {
    listener.enterTestlist_star_expr(this);
  }
};
Testlist_star_exprContext.prototype.exitRule = function (listener) {
  if (listener instanceof Python3Listener) {
    listener.exitTestlist_star_expr(this);
  }
};
Testlist_star_exprContext.prototype.accept = function (visitor) {
  if (visitor instanceof Python3Visitor) {
    return visitor.visitTestlist_star_expr(this);
  } else {
    return visitor.visitChildren(this);
  }
};
Python3Parser.Testlist_star_exprContext = Testlist_star_exprContext;
Python3Parser.prototype.testlist_star_expr = function () {
  var localctx = new Testlist_star_exprContext(this, this._ctx, this.state);
  this.enterRule(localctx, 36, Python3Parser.RULE_testlist_star_expr);
  var _la = 0; // Token type
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 437;
    this._errHandler.sync(this);
    var la_ = this._interp.adaptivePredict(this._input, 48, this._ctx);
    switch (la_) {
      case 1:
        this.state = 435;
        this.test();
        break;
      case 2:
        this.state = 436;
        this.star_expr();
        break;
    }
    this.state = 446;
    this._errHandler.sync(this);
    var _alt = this._interp.adaptivePredict(this._input, 50, this._ctx);
    while (_alt != 2 && _alt != antlr4.atn.ATN.INVALID_ALT_NUMBER) {
      if (_alt === 1) {
        this.state = 439;
        this.match(Python3Parser.COMMA);
        this.state = 442;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input, 49, this._ctx);
        switch (la_) {
          case 1:
            this.state = 440;
            this.test();
            break;
          case 2:
            this.state = 441;
            this.star_expr();
            break;
        }
      }
      this.state = 448;
      this._errHandler.sync(this);
      _alt = this._interp.adaptivePredict(this._input, 50, this._ctx);
    }
    this.state = 450;
    this._errHandler.sync(this);
    _la = this._input.LA(1);
    if (_la === Python3Parser.COMMA) {
      this.state = 449;
      this.match(Python3Parser.COMMA);
    }
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};
function AugassignContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null;
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = Python3Parser.RULE_augassign;
  return this;
}
AugassignContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AugassignContext.prototype.constructor = AugassignContext;
AugassignContext.prototype.ADD_ASSIGN = function () {
  return this.getToken(Python3Parser.ADD_ASSIGN, 0);
};
AugassignContext.prototype.SUB_ASSIGN = function () {
  return this.getToken(Python3Parser.SUB_ASSIGN, 0);
};
AugassignContext.prototype.MULT_ASSIGN = function () {
  return this.getToken(Python3Parser.MULT_ASSIGN, 0);
};
AugassignContext.prototype.AT_ASSIGN = function () {
  return this.getToken(Python3Parser.AT_ASSIGN, 0);
};
AugassignContext.prototype.DIV_ASSIGN = function () {
  return this.getToken(Python3Parser.DIV_ASSIGN, 0);
};
AugassignContext.prototype.MOD_ASSIGN = function () {
  return this.getToken(Python3Parser.MOD_ASSIGN, 0);
};
AugassignContext.prototype.AND_ASSIGN = function () {
  return this.getToken(Python3Parser.AND_ASSIGN, 0);
};
AugassignContext.prototype.OR_ASSIGN = function () {
  return this.getToken(Python3Parser.OR_ASSIGN, 0);
};
AugassignContext.prototype.XOR_ASSIGN = function () {
  return this.getToken(Python3Parser.XOR_ASSIGN, 0);
};
AugassignContext.prototype.LEFT_SHIFT_ASSIGN = function () {
  return this.getToken(Python3Parser.LEFT_SHIFT_ASSIGN, 0);
};
AugassignContext.prototype.RIGHT_SHIFT_ASSIGN = function () {
  return this.getToken(Python3Parser.RIGHT_SHIFT_ASSIGN, 0);
};
AugassignContext.prototype.POWER_ASSIGN = function () {
  return this.getToken(Python3Parser.POWER_ASSIGN, 0);
};
AugassignContext.prototype.IDIV_ASSIGN = function () {
  return this.getToken(Python3Parser.IDIV_ASSIGN, 0);
};
AugassignContext.prototype.enterRule = function (listener) {
  if (listener instanceof Python3Listener) {
    listener.enterAugassign(this);
  }
};
AugassignContext.prototype.exitRule = function (listener) {
  if (listener instanceof Python3Listener) {
    listener.exitAugassign(this);
  }
};
AugassignContext.prototype.accept = function (visitor) {
  if (visitor instanceof Python3Visitor) {
    return visitor.visitAugassign(this);
  } else {
    return visitor.visitChildren(this);
  }
};
Python3Parser.AugassignContext = AugassignContext;
Python3Parser.prototype.augassign = function () {
  var localctx = new AugassignContext(this, this._ctx, this.state);
  this.enterRule(localctx, 38, Python3Parser.RULE_augassign);
  var _la = 0; // Token type
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 452;
    _la = this._input.LA(1);
    if (!((_la - 80 & ~0x1f) == 0 && (1 << _la - 80 & (1 << Python3Parser.ADD_ASSIGN - 80 | 1 << Python3Parser.SUB_ASSIGN - 80 | 1 << Python3Parser.MULT_ASSIGN - 80 | 1 << Python3Parser.AT_ASSIGN - 80 | 1 << Python3Parser.DIV_ASSIGN - 80 | 1 << Python3Parser.MOD_ASSIGN - 80 | 1 << Python3Parser.AND_ASSIGN - 80 | 1 << Python3Parser.OR_ASSIGN - 80 | 1 << Python3Parser.XOR_ASSIGN - 80 | 1 << Python3Parser.LEFT_SHIFT_ASSIGN - 80 | 1 << Python3Parser.RIGHT_SHIFT_ASSIGN - 80 | 1 << Python3Parser.POWER_ASSIGN - 80 | 1 << Python3Parser.IDIV_ASSIGN - 80)) !== 0)) {
      this._errHandler.recoverInline(this);
    } else {
      this._errHandler.reportMatch(this);
      this.consume();
    }
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};
function Del_stmtContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null;
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = Python3Parser.RULE_del_stmt;
  return this;
}
Del_stmtContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Del_stmtContext.prototype.constructor = Del_stmtContext;
Del_stmtContext.prototype.DEL = function () {
  return this.getToken(Python3Parser.DEL, 0);
};
Del_stmtContext.prototype.exprlist = function () {
  return this.getTypedRuleContext(ExprlistContext, 0);
};
Del_stmtContext.prototype.enterRule = function (listener) {
  if (listener instanceof Python3Listener) {
    listener.enterDel_stmt(this);
  }
};
Del_stmtContext.prototype.exitRule = function (listener) {
  if (listener instanceof Python3Listener) {
    listener.exitDel_stmt(this);
  }
};
Del_stmtContext.prototype.accept = function (visitor) {
  if (visitor instanceof Python3Visitor) {
    return visitor.visitDel_stmt(this);
  } else {
    return visitor.visitChildren(this);
  }
};
Python3Parser.Del_stmtContext = Del_stmtContext;
Python3Parser.prototype.del_stmt = function () {
  var localctx = new Del_stmtContext(this, this._ctx, this.state);
  this.enterRule(localctx, 40, Python3Parser.RULE_del_stmt);
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 454;
    this.match(Python3Parser.DEL);
    this.state = 455;
    this.exprlist();
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};
function Pass_stmtContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null;
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = Python3Parser.RULE_pass_stmt;
  return this;
}
Pass_stmtContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Pass_stmtContext.prototype.constructor = Pass_stmtContext;
Pass_stmtContext.prototype.PASS = function () {
  return this.getToken(Python3Parser.PASS, 0);
};
Pass_stmtContext.prototype.enterRule = function (listener) {
  if (listener instanceof Python3Listener) {
    listener.enterPass_stmt(this);
  }
};
Pass_stmtContext.prototype.exitRule = function (listener) {
  if (listener instanceof Python3Listener) {
    listener.exitPass_stmt(this);
  }
};
Pass_stmtContext.prototype.accept = function (visitor) {
  if (visitor instanceof Python3Visitor) {
    return visitor.visitPass_stmt(this);
  } else {
    return visitor.visitChildren(this);
  }
};
Python3Parser.Pass_stmtContext = Pass_stmtContext;
Python3Parser.prototype.pass_stmt = function () {
  var localctx = new Pass_stmtContext(this, this._ctx, this.state);
  this.enterRule(localctx, 42, Python3Parser.RULE_pass_stmt);
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 457;
    this.match(Python3Parser.PASS);
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};
function Flow_stmtContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null;
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = Python3Parser.RULE_flow_stmt;
  return this;
}
Flow_stmtContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Flow_stmtContext.prototype.constructor = Flow_stmtContext;
Flow_stmtContext.prototype.break_stmt = function () {
  return this.getTypedRuleContext(Break_stmtContext, 0);
};
Flow_stmtContext.prototype.continue_stmt = function () {
  return this.getTypedRuleContext(Continue_stmtContext, 0);
};
Flow_stmtContext.prototype.return_stmt = function () {
  return this.getTypedRuleContext(Return_stmtContext, 0);
};
Flow_stmtContext.prototype.raise_stmt = function () {
  return this.getTypedRuleContext(Raise_stmtContext, 0);
};
Flow_stmtContext.prototype.yield_stmt = function () {
  return this.getTypedRuleContext(Yield_stmtContext, 0);
};
Flow_stmtContext.prototype.enterRule = function (listener) {
  if (listener instanceof Python3Listener) {
    listener.enterFlow_stmt(this);
  }
};
Flow_stmtContext.prototype.exitRule = function (listener) {
  if (listener instanceof Python3Listener) {
    listener.exitFlow_stmt(this);
  }
};
Flow_stmtContext.prototype.accept = function (visitor) {
  if (visitor instanceof Python3Visitor) {
    return visitor.visitFlow_stmt(this);
  } else {
    return visitor.visitChildren(this);
  }
};
Python3Parser.Flow_stmtContext = Flow_stmtContext;
Python3Parser.prototype.flow_stmt = function () {
  var localctx = new Flow_stmtContext(this, this._ctx, this.state);
  this.enterRule(localctx, 44, Python3Parser.RULE_flow_stmt);
  try {
    this.state = 464;
    this._errHandler.sync(this);
    switch (this._input.LA(1)) {
      case Python3Parser.BREAK:
        this.enterOuterAlt(localctx, 1);
        this.state = 459;
        this.break_stmt();
        break;
      case Python3Parser.CONTINUE:
        this.enterOuterAlt(localctx, 2);
        this.state = 460;
        this.continue_stmt();
        break;
      case Python3Parser.RETURN:
        this.enterOuterAlt(localctx, 3);
        this.state = 461;
        this.return_stmt();
        break;
      case Python3Parser.RAISE:
        this.enterOuterAlt(localctx, 4);
        this.state = 462;
        this.raise_stmt();
        break;
      case Python3Parser.YIELD:
        this.enterOuterAlt(localctx, 5);
        this.state = 463;
        this.yield_stmt();
        break;
      default:
        throw new antlr4.error.NoViableAltException(this);
    }
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};
function Break_stmtContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null;
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = Python3Parser.RULE_break_stmt;
  return this;
}
Break_stmtContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Break_stmtContext.prototype.constructor = Break_stmtContext;
Break_stmtContext.prototype.BREAK = function () {
  return this.getToken(Python3Parser.BREAK, 0);
};
Break_stmtContext.prototype.enterRule = function (listener) {
  if (listener instanceof Python3Listener) {
    listener.enterBreak_stmt(this);
  }
};
Break_stmtContext.prototype.exitRule = function (listener) {
  if (listener instanceof Python3Listener) {
    listener.exitBreak_stmt(this);
  }
};
Break_stmtContext.prototype.accept = function (visitor) {
  if (visitor instanceof Python3Visitor) {
    return visitor.visitBreak_stmt(this);
  } else {
    return visitor.visitChildren(this);
  }
};
Python3Parser.Break_stmtContext = Break_stmtContext;
Python3Parser.prototype.break_stmt = function () {
  var localctx = new Break_stmtContext(this, this._ctx, this.state);
  this.enterRule(localctx, 46, Python3Parser.RULE_break_stmt);
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 466;
    this.match(Python3Parser.BREAK);
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};
function Continue_stmtContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null;
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = Python3Parser.RULE_continue_stmt;
  return this;
}
Continue_stmtContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Continue_stmtContext.prototype.constructor = Continue_stmtContext;
Continue_stmtContext.prototype.CONTINUE = function () {
  return this.getToken(Python3Parser.CONTINUE, 0);
};
Continue_stmtContext.prototype.enterRule = function (listener) {
  if (listener instanceof Python3Listener) {
    listener.enterContinue_stmt(this);
  }
};
Continue_stmtContext.prototype.exitRule = function (listener) {
  if (listener instanceof Python3Listener) {
    listener.exitContinue_stmt(this);
  }
};
Continue_stmtContext.prototype.accept = function (visitor) {
  if (visitor instanceof Python3Visitor) {
    return visitor.visitContinue_stmt(this);
  } else {
    return visitor.visitChildren(this);
  }
};
Python3Parser.Continue_stmtContext = Continue_stmtContext;
Python3Parser.prototype.continue_stmt = function () {
  var localctx = new Continue_stmtContext(this, this._ctx, this.state);
  this.enterRule(localctx, 48, Python3Parser.RULE_continue_stmt);
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 468;
    this.match(Python3Parser.CONTINUE);
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};
function Return_stmtContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null;
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = Python3Parser.RULE_return_stmt;
  return this;
}
Return_stmtContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Return_stmtContext.prototype.constructor = Return_stmtContext;
Return_stmtContext.prototype.RETURN = function () {
  return this.getToken(Python3Parser.RETURN, 0);
};
Return_stmtContext.prototype.testlist = function () {
  return this.getTypedRuleContext(TestlistContext, 0);
};
Return_stmtContext.prototype.enterRule = function (listener) {
  if (listener instanceof Python3Listener) {
    listener.enterReturn_stmt(this);
  }
};
Return_stmtContext.prototype.exitRule = function (listener) {
  if (listener instanceof Python3Listener) {
    listener.exitReturn_stmt(this);
  }
};
Return_stmtContext.prototype.accept = function (visitor) {
  if (visitor instanceof Python3Visitor) {
    return visitor.visitReturn_stmt(this);
  } else {
    return visitor.visitChildren(this);
  }
};
Python3Parser.Return_stmtContext = Return_stmtContext;
Python3Parser.prototype.return_stmt = function () {
  var localctx = new Return_stmtContext(this, this._ctx, this.state);
  this.enterRule(localctx, 50, Python3Parser.RULE_return_stmt);
  var _la = 0; // Token type
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 470;
    this.match(Python3Parser.RETURN);
    this.state = 472;
    this._errHandler.sync(this);
    _la = this._input.LA(1);
    if ((_la - 20 & ~0x1f) == 0 && (1 << _la - 20 & (1 << Python3Parser.LAMBDA - 20 | 1 << Python3Parser.NOT - 20 | 1 << Python3Parser.NONE - 20 | 1 << Python3Parser.TRUE - 20 | 1 << Python3Parser.FALSE - 20 | 1 << Python3Parser.AWAIT - 20 | 1 << Python3Parser.NAME - 20 | 1 << Python3Parser.STRING_LITERAL - 20 | 1 << Python3Parser.BYTES_LITERAL - 20 | 1 << Python3Parser.DECIMAL_INTEGER - 20 | 1 << Python3Parser.OCT_INTEGER - 20 | 1 << Python3Parser.HEX_INTEGER - 20 | 1 << Python3Parser.BIN_INTEGER - 20 | 1 << Python3Parser.FLOAT_NUMBER - 20 | 1 << Python3Parser.IMAG_NUMBER - 20 | 1 << Python3Parser.ELLIPSIS - 20 | 1 << Python3Parser.STAR - 20 | 1 << Python3Parser.OPEN_PAREN - 20)) !== 0 || (_la - 56 & ~0x1f) == 0 && (1 << _la - 56 & (1 << Python3Parser.OPEN_BRACK - 56 | 1 << Python3Parser.ADD - 56 | 1 << Python3Parser.MINUS - 56 | 1 << Python3Parser.NOT_OP - 56 | 1 << Python3Parser.OPEN_BRACE - 56)) !== 0) {
      this.state = 471;
      this.testlist();
    }
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};
function Yield_stmtContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null;
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = Python3Parser.RULE_yield_stmt;
  return this;
}
Yield_stmtContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Yield_stmtContext.prototype.constructor = Yield_stmtContext;
Yield_stmtContext.prototype.yield_expr = function () {
  return this.getTypedRuleContext(Yield_exprContext, 0);
};
Yield_stmtContext.prototype.enterRule = function (listener) {
  if (listener instanceof Python3Listener) {
    listener.enterYield_stmt(this);
  }
};
Yield_stmtContext.prototype.exitRule = function (listener) {
  if (listener instanceof Python3Listener) {
    listener.exitYield_stmt(this);
  }
};
Yield_stmtContext.prototype.accept = function (visitor) {
  if (visitor instanceof Python3Visitor) {
    return visitor.visitYield_stmt(this);
  } else {
    return visitor.visitChildren(this);
  }
};
Python3Parser.Yield_stmtContext = Yield_stmtContext;
Python3Parser.prototype.yield_stmt = function () {
  var localctx = new Yield_stmtContext(this, this._ctx, this.state);
  this.enterRule(localctx, 52, Python3Parser.RULE_yield_stmt);
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 474;
    this.yield_expr();
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};
function Raise_stmtContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null;
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = Python3Parser.RULE_raise_stmt;
  return this;
}
Raise_stmtContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Raise_stmtContext.prototype.constructor = Raise_stmtContext;
Raise_stmtContext.prototype.RAISE = function () {
  return this.getToken(Python3Parser.RAISE, 0);
};
Raise_stmtContext.prototype.test = function (i) {
  if (i === undefined) {
    i = null;
  }
  if (i === null) {
    return this.getTypedRuleContexts(TestContext);
  } else {
    return this.getTypedRuleContext(TestContext, i);
  }
};
Raise_stmtContext.prototype.FROM = function () {
  return this.getToken(Python3Parser.FROM, 0);
};
Raise_stmtContext.prototype.enterRule = function (listener) {
  if (listener instanceof Python3Listener) {
    listener.enterRaise_stmt(this);
  }
};
Raise_stmtContext.prototype.exitRule = function (listener) {
  if (listener instanceof Python3Listener) {
    listener.exitRaise_stmt(this);
  }
};
Raise_stmtContext.prototype.accept = function (visitor) {
  if (visitor instanceof Python3Visitor) {
    return visitor.visitRaise_stmt(this);
  } else {
    return visitor.visitChildren(this);
  }
};
Python3Parser.Raise_stmtContext = Raise_stmtContext;
Python3Parser.prototype.raise_stmt = function () {
  var localctx = new Raise_stmtContext(this, this._ctx, this.state);
  this.enterRule(localctx, 54, Python3Parser.RULE_raise_stmt);
  var _la = 0; // Token type
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 476;
    this.match(Python3Parser.RAISE);
    this.state = 482;
    this._errHandler.sync(this);
    _la = this._input.LA(1);
    if ((_la - 20 & ~0x1f) == 0 && (1 << _la - 20 & (1 << Python3Parser.LAMBDA - 20 | 1 << Python3Parser.NOT - 20 | 1 << Python3Parser.NONE - 20 | 1 << Python3Parser.TRUE - 20 | 1 << Python3Parser.FALSE - 20 | 1 << Python3Parser.AWAIT - 20 | 1 << Python3Parser.NAME - 20 | 1 << Python3Parser.STRING_LITERAL - 20 | 1 << Python3Parser.BYTES_LITERAL - 20 | 1 << Python3Parser.DECIMAL_INTEGER - 20 | 1 << Python3Parser.OCT_INTEGER - 20 | 1 << Python3Parser.HEX_INTEGER - 20 | 1 << Python3Parser.BIN_INTEGER - 20 | 1 << Python3Parser.FLOAT_NUMBER - 20 | 1 << Python3Parser.IMAG_NUMBER - 20 | 1 << Python3Parser.ELLIPSIS - 20 | 1 << Python3Parser.STAR - 20 | 1 << Python3Parser.OPEN_PAREN - 20)) !== 0 || (_la - 56 & ~0x1f) == 0 && (1 << _la - 56 & (1 << Python3Parser.OPEN_BRACK - 56 | 1 << Python3Parser.ADD - 56 | 1 << Python3Parser.MINUS - 56 | 1 << Python3Parser.NOT_OP - 56 | 1 << Python3Parser.OPEN_BRACE - 56)) !== 0) {
      this.state = 477;
      this.test();
      this.state = 480;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === Python3Parser.FROM) {
        this.state = 478;
        this.match(Python3Parser.FROM);
        this.state = 479;
        this.test();
      }
    }
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};
function Import_stmtContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null;
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = Python3Parser.RULE_import_stmt;
  return this;
}
Import_stmtContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Import_stmtContext.prototype.constructor = Import_stmtContext;
Import_stmtContext.prototype.import_name = function () {
  return this.getTypedRuleContext(Import_nameContext, 0);
};
Import_stmtContext.prototype.import_from = function () {
  return this.getTypedRuleContext(Import_fromContext, 0);
};
Import_stmtContext.prototype.enterRule = function (listener) {
  if (listener instanceof Python3Listener) {
    listener.enterImport_stmt(this);
  }
};
Import_stmtContext.prototype.exitRule = function (listener) {
  if (listener instanceof Python3Listener) {
    listener.exitImport_stmt(this);
  }
};
Import_stmtContext.prototype.accept = function (visitor) {
  if (visitor instanceof Python3Visitor) {
    return visitor.visitImport_stmt(this);
  } else {
    return visitor.visitChildren(this);
  }
};
Python3Parser.Import_stmtContext = Import_stmtContext;
Python3Parser.prototype.import_stmt = function () {
  var localctx = new Import_stmtContext(this, this._ctx, this.state);
  this.enterRule(localctx, 56, Python3Parser.RULE_import_stmt);
  try {
    this.state = 486;
    this._errHandler.sync(this);
    switch (this._input.LA(1)) {
      case Python3Parser.IMPORT:
        this.enterOuterAlt(localctx, 1);
        this.state = 484;
        this.import_name();
        break;
      case Python3Parser.FROM:
        this.enterOuterAlt(localctx, 2);
        this.state = 485;
        this.import_from();
        break;
      default:
        throw new antlr4.error.NoViableAltException(this);
    }
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};
function Import_nameContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null;
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = Python3Parser.RULE_import_name;
  return this;
}
Import_nameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Import_nameContext.prototype.constructor = Import_nameContext;
Import_nameContext.prototype.IMPORT = function () {
  return this.getToken(Python3Parser.IMPORT, 0);
};
Import_nameContext.prototype.dotted_as_names = function () {
  return this.getTypedRuleContext(Dotted_as_namesContext, 0);
};
Import_nameContext.prototype.enterRule = function (listener) {
  if (listener instanceof Python3Listener) {
    listener.enterImport_name(this);
  }
};
Import_nameContext.prototype.exitRule = function (listener) {
  if (listener instanceof Python3Listener) {
    listener.exitImport_name(this);
  }
};
Import_nameContext.prototype.accept = function (visitor) {
  if (visitor instanceof Python3Visitor) {
    return visitor.visitImport_name(this);
  } else {
    return visitor.visitChildren(this);
  }
};
Python3Parser.Import_nameContext = Import_nameContext;
Python3Parser.prototype.import_name = function () {
  var localctx = new Import_nameContext(this, this._ctx, this.state);
  this.enterRule(localctx, 58, Python3Parser.RULE_import_name);
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 488;
    this.match(Python3Parser.IMPORT);
    this.state = 489;
    this.dotted_as_names();
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};
function Import_fromContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null;
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = Python3Parser.RULE_import_from;
  return this;
}
Import_fromContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Import_fromContext.prototype.constructor = Import_fromContext;
Import_fromContext.prototype.FROM = function () {
  return this.getToken(Python3Parser.FROM, 0);
};
Import_fromContext.prototype.IMPORT = function () {
  return this.getToken(Python3Parser.IMPORT, 0);
};
Import_fromContext.prototype.dotted_name = function () {
  return this.getTypedRuleContext(Dotted_nameContext, 0);
};
Import_fromContext.prototype.STAR = function () {
  return this.getToken(Python3Parser.STAR, 0);
};
Import_fromContext.prototype.OPEN_PAREN = function () {
  return this.getToken(Python3Parser.OPEN_PAREN, 0);
};
Import_fromContext.prototype.import_as_names = function () {
  return this.getTypedRuleContext(Import_as_namesContext, 0);
};
Import_fromContext.prototype.CLOSE_PAREN = function () {
  return this.getToken(Python3Parser.CLOSE_PAREN, 0);
};
Import_fromContext.prototype.DOT = function (i) {
  if (i === undefined) {
    i = null;
  }
  if (i === null) {
    return this.getTokens(Python3Parser.DOT);
  } else {
    return this.getToken(Python3Parser.DOT, i);
  }
};
Import_fromContext.prototype.ELLIPSIS = function (i) {
  if (i === undefined) {
    i = null;
  }
  if (i === null) {
    return this.getTokens(Python3Parser.ELLIPSIS);
  } else {
    return this.getToken(Python3Parser.ELLIPSIS, i);
  }
};
Import_fromContext.prototype.enterRule = function (listener) {
  if (listener instanceof Python3Listener) {
    listener.enterImport_from(this);
  }
};
Import_fromContext.prototype.exitRule = function (listener) {
  if (listener instanceof Python3Listener) {
    listener.exitImport_from(this);
  }
};
Import_fromContext.prototype.accept = function (visitor) {
  if (visitor instanceof Python3Visitor) {
    return visitor.visitImport_from(this);
  } else {
    return visitor.visitChildren(this);
  }
};
Python3Parser.Import_fromContext = Import_fromContext;
Python3Parser.prototype.import_from = function () {
  var localctx = new Import_fromContext(this, this._ctx, this.state);
  this.enterRule(localctx, 60, Python3Parser.RULE_import_from);
  var _la = 0; // Token type
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 491;
    this.match(Python3Parser.FROM);
    this.state = 504;
    this._errHandler.sync(this);
    var la_ = this._interp.adaptivePredict(this._input, 59, this._ctx);
    switch (la_) {
      case 1:
        this.state = 495;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while (_la === Python3Parser.DOT || _la === Python3Parser.ELLIPSIS) {
          this.state = 492;
          _la = this._input.LA(1);
          if (!(_la === Python3Parser.DOT || _la === Python3Parser.ELLIPSIS)) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          this.state = 497;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
        }
        this.state = 498;
        this.dotted_name();
        break;
      case 2:
        this.state = 500;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
          this.state = 499;
          _la = this._input.LA(1);
          if (!(_la === Python3Parser.DOT || _la === Python3Parser.ELLIPSIS)) {
            this._errHandler.recoverInline(this);
          } else {
            this._errHandler.reportMatch(this);
            this.consume();
          }
          this.state = 502;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
        } while (_la === Python3Parser.DOT || _la === Python3Parser.ELLIPSIS);
        break;
    }
    this.state = 506;
    this.match(Python3Parser.IMPORT);
    this.state = 513;
    this._errHandler.sync(this);
    switch (this._input.LA(1)) {
      case Python3Parser.STAR:
        this.state = 507;
        this.match(Python3Parser.STAR);
        break;
      case Python3Parser.OPEN_PAREN:
        this.state = 508;
        this.match(Python3Parser.OPEN_PAREN);
        this.state = 509;
        this.import_as_names();
        this.state = 510;
        this.match(Python3Parser.CLOSE_PAREN);
        break;
      case Python3Parser.NAME:
        this.state = 512;
        this.import_as_names();
        break;
      default:
        throw new antlr4.error.NoViableAltException(this);
    }
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};
function Import_as_nameContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null;
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = Python3Parser.RULE_import_as_name;
  return this;
}
Import_as_nameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Import_as_nameContext.prototype.constructor = Import_as_nameContext;
Import_as_nameContext.prototype.NAME = function (i) {
  if (i === undefined) {
    i = null;
  }
  if (i === null) {
    return this.getTokens(Python3Parser.NAME);
  } else {
    return this.getToken(Python3Parser.NAME, i);
  }
};
Import_as_nameContext.prototype.AS = function () {
  return this.getToken(Python3Parser.AS, 0);
};
Import_as_nameContext.prototype.enterRule = function (listener) {
  if (listener instanceof Python3Listener) {
    listener.enterImport_as_name(this);
  }
};
Import_as_nameContext.prototype.exitRule = function (listener) {
  if (listener instanceof Python3Listener) {
    listener.exitImport_as_name(this);
  }
};
Import_as_nameContext.prototype.accept = function (visitor) {
  if (visitor instanceof Python3Visitor) {
    return visitor.visitImport_as_name(this);
  } else {
    return visitor.visitChildren(this);
  }
};
Python3Parser.Import_as_nameContext = Import_as_nameContext;
Python3Parser.prototype.import_as_name = function () {
  var localctx = new Import_as_nameContext(this, this._ctx, this.state);
  this.enterRule(localctx, 62, Python3Parser.RULE_import_as_name);
  var _la = 0; // Token type
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 515;
    this.match(Python3Parser.NAME);
    this.state = 518;
    this._errHandler.sync(this);
    _la = this._input.LA(1);
    if (_la === Python3Parser.AS) {
      this.state = 516;
      this.match(Python3Parser.AS);
      this.state = 517;
      this.match(Python3Parser.NAME);
    }
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};
function Dotted_as_nameContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null;
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = Python3Parser.RULE_dotted_as_name;
  return this;
}
Dotted_as_nameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Dotted_as_nameContext.prototype.constructor = Dotted_as_nameContext;
Dotted_as_nameContext.prototype.dotted_name = function () {
  return this.getTypedRuleContext(Dotted_nameContext, 0);
};
Dotted_as_nameContext.prototype.AS = function () {
  return this.getToken(Python3Parser.AS, 0);
};
Dotted_as_nameContext.prototype.NAME = function () {
  return this.getToken(Python3Parser.NAME, 0);
};
Dotted_as_nameContext.prototype.enterRule = function (listener) {
  if (listener instanceof Python3Listener) {
    listener.enterDotted_as_name(this);
  }
};
Dotted_as_nameContext.prototype.exitRule = function (listener) {
  if (listener instanceof Python3Listener) {
    listener.exitDotted_as_name(this);
  }
};
Dotted_as_nameContext.prototype.accept = function (visitor) {
  if (visitor instanceof Python3Visitor) {
    return visitor.visitDotted_as_name(this);
  } else {
    return visitor.visitChildren(this);
  }
};
Python3Parser.Dotted_as_nameContext = Dotted_as_nameContext;
Python3Parser.prototype.dotted_as_name = function () {
  var localctx = new Dotted_as_nameContext(this, this._ctx, this.state);
  this.enterRule(localctx, 64, Python3Parser.RULE_dotted_as_name);
  var _la = 0; // Token type
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 520;
    this.dotted_name();
    this.state = 523;
    this._errHandler.sync(this);
    _la = this._input.LA(1);
    if (_la === Python3Parser.AS) {
      this.state = 521;
      this.match(Python3Parser.AS);
      this.state = 522;
      this.match(Python3Parser.NAME);
    }
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};
function Import_as_namesContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null;
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = Python3Parser.RULE_import_as_names;
  return this;
}
Import_as_namesContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Import_as_namesContext.prototype.constructor = Import_as_namesContext;
Import_as_namesContext.prototype.import_as_name = function (i) {
  if (i === undefined) {
    i = null;
  }
  if (i === null) {
    return this.getTypedRuleContexts(Import_as_nameContext);
  } else {
    return this.getTypedRuleContext(Import_as_nameContext, i);
  }
};
Import_as_namesContext.prototype.COMMA = function (i) {
  if (i === undefined) {
    i = null;
  }
  if (i === null) {
    return this.getTokens(Python3Parser.COMMA);
  } else {
    return this.getToken(Python3Parser.COMMA, i);
  }
};
Import_as_namesContext.prototype.enterRule = function (listener) {
  if (listener instanceof Python3Listener) {
    listener.enterImport_as_names(this);
  }
};
Import_as_namesContext.prototype.exitRule = function (listener) {
  if (listener instanceof Python3Listener) {
    listener.exitImport_as_names(this);
  }
};
Import_as_namesContext.prototype.accept = function (visitor) {
  if (visitor instanceof Python3Visitor) {
    return visitor.visitImport_as_names(this);
  } else {
    return visitor.visitChildren(this);
  }
};
Python3Parser.Import_as_namesContext = Import_as_namesContext;
Python3Parser.prototype.import_as_names = function () {
  var localctx = new Import_as_namesContext(this, this._ctx, this.state);
  this.enterRule(localctx, 66, Python3Parser.RULE_import_as_names);
  var _la = 0; // Token type
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 525;
    this.import_as_name();
    this.state = 530;
    this._errHandler.sync(this);
    var _alt = this._interp.adaptivePredict(this._input, 63, this._ctx);
    while (_alt != 2 && _alt != antlr4.atn.ATN.INVALID_ALT_NUMBER) {
      if (_alt === 1) {
        this.state = 526;
        this.match(Python3Parser.COMMA);
        this.state = 527;
        this.import_as_name();
      }
      this.state = 532;
      this._errHandler.sync(this);
      _alt = this._interp.adaptivePredict(this._input, 63, this._ctx);
    }
    this.state = 534;
    this._errHandler.sync(this);
    _la = this._input.LA(1);
    if (_la === Python3Parser.COMMA) {
      this.state = 533;
      this.match(Python3Parser.COMMA);
    }
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};
function Dotted_as_namesContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null;
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = Python3Parser.RULE_dotted_as_names;
  return this;
}
Dotted_as_namesContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Dotted_as_namesContext.prototype.constructor = Dotted_as_namesContext;
Dotted_as_namesContext.prototype.dotted_as_name = function (i) {
  if (i === undefined) {
    i = null;
  }
  if (i === null) {
    return this.getTypedRuleContexts(Dotted_as_nameContext);
  } else {
    return this.getTypedRuleContext(Dotted_as_nameContext, i);
  }
};
Dotted_as_namesContext.prototype.COMMA = function (i) {
  if (i === undefined) {
    i = null;
  }
  if (i === null) {
    return this.getTokens(Python3Parser.COMMA);
  } else {
    return this.getToken(Python3Parser.COMMA, i);
  }
};
Dotted_as_namesContext.prototype.enterRule = function (listener) {
  if (listener instanceof Python3Listener) {
    listener.enterDotted_as_names(this);
  }
};
Dotted_as_namesContext.prototype.exitRule = function (listener) {
  if (listener instanceof Python3Listener) {
    listener.exitDotted_as_names(this);
  }
};
Dotted_as_namesContext.prototype.accept = function (visitor) {
  if (visitor instanceof Python3Visitor) {
    return visitor.visitDotted_as_names(this);
  } else {
    return visitor.visitChildren(this);
  }
};
Python3Parser.Dotted_as_namesContext = Dotted_as_namesContext;
Python3Parser.prototype.dotted_as_names = function () {
  var localctx = new Dotted_as_namesContext(this, this._ctx, this.state);
  this.enterRule(localctx, 68, Python3Parser.RULE_dotted_as_names);
  var _la = 0; // Token type
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 536;
    this.dotted_as_name();
    this.state = 541;
    this._errHandler.sync(this);
    _la = this._input.LA(1);
    while (_la === Python3Parser.COMMA) {
      this.state = 537;
      this.match(Python3Parser.COMMA);
      this.state = 538;
      this.dotted_as_name();
      this.state = 543;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
    }
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};
function Dotted_nameContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null;
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = Python3Parser.RULE_dotted_name;
  return this;
}
Dotted_nameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Dotted_nameContext.prototype.constructor = Dotted_nameContext;
Dotted_nameContext.prototype.NAME = function (i) {
  if (i === undefined) {
    i = null;
  }
  if (i === null) {
    return this.getTokens(Python3Parser.NAME);
  } else {
    return this.getToken(Python3Parser.NAME, i);
  }
};
Dotted_nameContext.prototype.DOT = function (i) {
  if (i === undefined) {
    i = null;
  }
  if (i === null) {
    return this.getTokens(Python3Parser.DOT);
  } else {
    return this.getToken(Python3Parser.DOT, i);
  }
};
Dotted_nameContext.prototype.enterRule = function (listener) {
  if (listener instanceof Python3Listener) {
    listener.enterDotted_name(this);
  }
};
Dotted_nameContext.prototype.exitRule = function (listener) {
  if (listener instanceof Python3Listener) {
    listener.exitDotted_name(this);
  }
};
Dotted_nameContext.prototype.accept = function (visitor) {
  if (visitor instanceof Python3Visitor) {
    return visitor.visitDotted_name(this);
  } else {
    return visitor.visitChildren(this);
  }
};
Python3Parser.Dotted_nameContext = Dotted_nameContext;
Python3Parser.prototype.dotted_name = function () {
  var localctx = new Dotted_nameContext(this, this._ctx, this.state);
  this.enterRule(localctx, 70, Python3Parser.RULE_dotted_name);
  var _la = 0; // Token type
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 544;
    this.match(Python3Parser.NAME);
    this.state = 549;
    this._errHandler.sync(this);
    _la = this._input.LA(1);
    while (_la === Python3Parser.DOT) {
      this.state = 545;
      this.match(Python3Parser.DOT);
      this.state = 546;
      this.match(Python3Parser.NAME);
      this.state = 551;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
    }
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};
function Global_stmtContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null;
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = Python3Parser.RULE_global_stmt;
  return this;
}
Global_stmtContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Global_stmtContext.prototype.constructor = Global_stmtContext;
Global_stmtContext.prototype.GLOBAL = function () {
  return this.getToken(Python3Parser.GLOBAL, 0);
};
Global_stmtContext.prototype.NAME = function (i) {
  if (i === undefined) {
    i = null;
  }
  if (i === null) {
    return this.getTokens(Python3Parser.NAME);
  } else {
    return this.getToken(Python3Parser.NAME, i);
  }
};
Global_stmtContext.prototype.COMMA = function (i) {
  if (i === undefined) {
    i = null;
  }
  if (i === null) {
    return this.getTokens(Python3Parser.COMMA);
  } else {
    return this.getToken(Python3Parser.COMMA, i);
  }
};
Global_stmtContext.prototype.enterRule = function (listener) {
  if (listener instanceof Python3Listener) {
    listener.enterGlobal_stmt(this);
  }
};
Global_stmtContext.prototype.exitRule = function (listener) {
  if (listener instanceof Python3Listener) {
    listener.exitGlobal_stmt(this);
  }
};
Global_stmtContext.prototype.accept = function (visitor) {
  if (visitor instanceof Python3Visitor) {
    return visitor.visitGlobal_stmt(this);
  } else {
    return visitor.visitChildren(this);
  }
};
Python3Parser.Global_stmtContext = Global_stmtContext;
Python3Parser.prototype.global_stmt = function () {
  var localctx = new Global_stmtContext(this, this._ctx, this.state);
  this.enterRule(localctx, 72, Python3Parser.RULE_global_stmt);
  var _la = 0; // Token type
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 552;
    this.match(Python3Parser.GLOBAL);
    this.state = 553;
    this.match(Python3Parser.NAME);
    this.state = 558;
    this._errHandler.sync(this);
    _la = this._input.LA(1);
    while (_la === Python3Parser.COMMA) {
      this.state = 554;
      this.match(Python3Parser.COMMA);
      this.state = 555;
      this.match(Python3Parser.NAME);
      this.state = 560;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
    }
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};
function Nonlocal_stmtContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null;
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = Python3Parser.RULE_nonlocal_stmt;
  return this;
}
Nonlocal_stmtContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Nonlocal_stmtContext.prototype.constructor = Nonlocal_stmtContext;
Nonlocal_stmtContext.prototype.NONLOCAL = function () {
  return this.getToken(Python3Parser.NONLOCAL, 0);
};
Nonlocal_stmtContext.prototype.NAME = function (i) {
  if (i === undefined) {
    i = null;
  }
  if (i === null) {
    return this.getTokens(Python3Parser.NAME);
  } else {
    return this.getToken(Python3Parser.NAME, i);
  }
};
Nonlocal_stmtContext.prototype.COMMA = function (i) {
  if (i === undefined) {
    i = null;
  }
  if (i === null) {
    return this.getTokens(Python3Parser.COMMA);
  } else {
    return this.getToken(Python3Parser.COMMA, i);
  }
};
Nonlocal_stmtContext.prototype.enterRule = function (listener) {
  if (listener instanceof Python3Listener) {
    listener.enterNonlocal_stmt(this);
  }
};
Nonlocal_stmtContext.prototype.exitRule = function (listener) {
  if (listener instanceof Python3Listener) {
    listener.exitNonlocal_stmt(this);
  }
};
Nonlocal_stmtContext.prototype.accept = function (visitor) {
  if (visitor instanceof Python3Visitor) {
    return visitor.visitNonlocal_stmt(this);
  } else {
    return visitor.visitChildren(this);
  }
};
Python3Parser.Nonlocal_stmtContext = Nonlocal_stmtContext;
Python3Parser.prototype.nonlocal_stmt = function () {
  var localctx = new Nonlocal_stmtContext(this, this._ctx, this.state);
  this.enterRule(localctx, 74, Python3Parser.RULE_nonlocal_stmt);
  var _la = 0; // Token type
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 561;
    this.match(Python3Parser.NONLOCAL);
    this.state = 562;
    this.match(Python3Parser.NAME);
    this.state = 567;
    this._errHandler.sync(this);
    _la = this._input.LA(1);
    while (_la === Python3Parser.COMMA) {
      this.state = 563;
      this.match(Python3Parser.COMMA);
      this.state = 564;
      this.match(Python3Parser.NAME);
      this.state = 569;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
    }
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};
function Assert_stmtContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null;
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = Python3Parser.RULE_assert_stmt;
  return this;
}
Assert_stmtContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Assert_stmtContext.prototype.constructor = Assert_stmtContext;
Assert_stmtContext.prototype.ASSERT = function () {
  return this.getToken(Python3Parser.ASSERT, 0);
};
Assert_stmtContext.prototype.test = function (i) {
  if (i === undefined) {
    i = null;
  }
  if (i === null) {
    return this.getTypedRuleContexts(TestContext);
  } else {
    return this.getTypedRuleContext(TestContext, i);
  }
};
Assert_stmtContext.prototype.COMMA = function () {
  return this.getToken(Python3Parser.COMMA, 0);
};
Assert_stmtContext.prototype.enterRule = function (listener) {
  if (listener instanceof Python3Listener) {
    listener.enterAssert_stmt(this);
  }
};
Assert_stmtContext.prototype.exitRule = function (listener) {
  if (listener instanceof Python3Listener) {
    listener.exitAssert_stmt(this);
  }
};
Assert_stmtContext.prototype.accept = function (visitor) {
  if (visitor instanceof Python3Visitor) {
    return visitor.visitAssert_stmt(this);
  } else {
    return visitor.visitChildren(this);
  }
};
Python3Parser.Assert_stmtContext = Assert_stmtContext;
Python3Parser.prototype.assert_stmt = function () {
  var localctx = new Assert_stmtContext(this, this._ctx, this.state);
  this.enterRule(localctx, 76, Python3Parser.RULE_assert_stmt);
  var _la = 0; // Token type
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 570;
    this.match(Python3Parser.ASSERT);
    this.state = 571;
    this.test();
    this.state = 574;
    this._errHandler.sync(this);
    _la = this._input.LA(1);
    if (_la === Python3Parser.COMMA) {
      this.state = 572;
      this.match(Python3Parser.COMMA);
      this.state = 573;
      this.test();
    }
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};
function Compound_stmtContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null;
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = Python3Parser.RULE_compound_stmt;
  return this;
}
Compound_stmtContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Compound_stmtContext.prototype.constructor = Compound_stmtContext;
Compound_stmtContext.prototype.if_stmt = function () {
  return this.getTypedRuleContext(If_stmtContext, 0);
};
Compound_stmtContext.prototype.while_stmt = function () {
  return this.getTypedRuleContext(While_stmtContext, 0);
};
Compound_stmtContext.prototype.for_stmt = function () {
  return this.getTypedRuleContext(For_stmtContext, 0);
};
Compound_stmtContext.prototype.try_stmt = function () {
  return this.getTypedRuleContext(Try_stmtContext, 0);
};
Compound_stmtContext.prototype.with_stmt = function () {
  return this.getTypedRuleContext(With_stmtContext, 0);
};
Compound_stmtContext.prototype.funcdef = function () {
  return this.getTypedRuleContext(FuncdefContext, 0);
};
Compound_stmtContext.prototype.classdef = function () {
  return this.getTypedRuleContext(ClassdefContext, 0);
};
Compound_stmtContext.prototype.decorated = function () {
  return this.getTypedRuleContext(DecoratedContext, 0);
};
Compound_stmtContext.prototype.async_stmt = function () {
  return this.getTypedRuleContext(Async_stmtContext, 0);
};
Compound_stmtContext.prototype.enterRule = function (listener) {
  if (listener instanceof Python3Listener) {
    listener.enterCompound_stmt(this);
  }
};
Compound_stmtContext.prototype.exitRule = function (listener) {
  if (listener instanceof Python3Listener) {
    listener.exitCompound_stmt(this);
  }
};
Compound_stmtContext.prototype.accept = function (visitor) {
  if (visitor instanceof Python3Visitor) {
    return visitor.visitCompound_stmt(this);
  } else {
    return visitor.visitChildren(this);
  }
};
Python3Parser.Compound_stmtContext = Compound_stmtContext;
Python3Parser.prototype.compound_stmt = function () {
  var localctx = new Compound_stmtContext(this, this._ctx, this.state);
  this.enterRule(localctx, 78, Python3Parser.RULE_compound_stmt);
  try {
    this.state = 585;
    this._errHandler.sync(this);
    switch (this._input.LA(1)) {
      case Python3Parser.IF:
        this.enterOuterAlt(localctx, 1);
        this.state = 576;
        this.if_stmt();
        break;
      case Python3Parser.WHILE:
        this.enterOuterAlt(localctx, 2);
        this.state = 577;
        this.while_stmt();
        break;
      case Python3Parser.FOR:
        this.enterOuterAlt(localctx, 3);
        this.state = 578;
        this.for_stmt();
        break;
      case Python3Parser.TRY:
        this.enterOuterAlt(localctx, 4);
        this.state = 579;
        this.try_stmt();
        break;
      case Python3Parser.WITH:
        this.enterOuterAlt(localctx, 5);
        this.state = 580;
        this.with_stmt();
        break;
      case Python3Parser.DEF:
        this.enterOuterAlt(localctx, 6);
        this.state = 581;
        this.funcdef();
        break;
      case Python3Parser.CLASS:
        this.enterOuterAlt(localctx, 7);
        this.state = 582;
        this.classdef();
        break;
      case Python3Parser.AT:
        this.enterOuterAlt(localctx, 8);
        this.state = 583;
        this.decorated();
        break;
      case Python3Parser.ASYNC:
        this.enterOuterAlt(localctx, 9);
        this.state = 584;
        this.async_stmt();
        break;
      default:
        throw new antlr4.error.NoViableAltException(this);
    }
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};
function Async_stmtContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null;
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = Python3Parser.RULE_async_stmt;
  return this;
}
Async_stmtContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Async_stmtContext.prototype.constructor = Async_stmtContext;
Async_stmtContext.prototype.ASYNC = function () {
  return this.getToken(Python3Parser.ASYNC, 0);
};
Async_stmtContext.prototype.funcdef = function () {
  return this.getTypedRuleContext(FuncdefContext, 0);
};
Async_stmtContext.prototype.with_stmt = function () {
  return this.getTypedRuleContext(With_stmtContext, 0);
};
Async_stmtContext.prototype.for_stmt = function () {
  return this.getTypedRuleContext(For_stmtContext, 0);
};
Async_stmtContext.prototype.enterRule = function (listener) {
  if (listener instanceof Python3Listener) {
    listener.enterAsync_stmt(this);
  }
};
Async_stmtContext.prototype.exitRule = function (listener) {
  if (listener instanceof Python3Listener) {
    listener.exitAsync_stmt(this);
  }
};
Async_stmtContext.prototype.accept = function (visitor) {
  if (visitor instanceof Python3Visitor) {
    return visitor.visitAsync_stmt(this);
  } else {
    return visitor.visitChildren(this);
  }
};
Python3Parser.Async_stmtContext = Async_stmtContext;
Python3Parser.prototype.async_stmt = function () {
  var localctx = new Async_stmtContext(this, this._ctx, this.state);
  this.enterRule(localctx, 80, Python3Parser.RULE_async_stmt);
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 587;
    this.match(Python3Parser.ASYNC);
    this.state = 591;
    this._errHandler.sync(this);
    switch (this._input.LA(1)) {
      case Python3Parser.DEF:
        this.state = 588;
        this.funcdef();
        break;
      case Python3Parser.WITH:
        this.state = 589;
        this.with_stmt();
        break;
      case Python3Parser.FOR:
        this.state = 590;
        this.for_stmt();
        break;
      default:
        throw new antlr4.error.NoViableAltException(this);
    }
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};
function If_stmtContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null;
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = Python3Parser.RULE_if_stmt;
  return this;
}
If_stmtContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
If_stmtContext.prototype.constructor = If_stmtContext;
If_stmtContext.prototype.IF = function () {
  return this.getToken(Python3Parser.IF, 0);
};
If_stmtContext.prototype.test = function (i) {
  if (i === undefined) {
    i = null;
  }
  if (i === null) {
    return this.getTypedRuleContexts(TestContext);
  } else {
    return this.getTypedRuleContext(TestContext, i);
  }
};
If_stmtContext.prototype.COLON = function (i) {
  if (i === undefined) {
    i = null;
  }
  if (i === null) {
    return this.getTokens(Python3Parser.COLON);
  } else {
    return this.getToken(Python3Parser.COLON, i);
  }
};
If_stmtContext.prototype.suite = function (i) {
  if (i === undefined) {
    i = null;
  }
  if (i === null) {
    return this.getTypedRuleContexts(SuiteContext);
  } else {
    return this.getTypedRuleContext(SuiteContext, i);
  }
};
If_stmtContext.prototype.ELIF = function (i) {
  if (i === undefined) {
    i = null;
  }
  if (i === null) {
    return this.getTokens(Python3Parser.ELIF);
  } else {
    return this.getToken(Python3Parser.ELIF, i);
  }
};
If_stmtContext.prototype.ELSE = function () {
  return this.getToken(Python3Parser.ELSE, 0);
};
If_stmtContext.prototype.enterRule = function (listener) {
  if (listener instanceof Python3Listener) {
    listener.enterIf_stmt(this);
  }
};
If_stmtContext.prototype.exitRule = function (listener) {
  if (listener instanceof Python3Listener) {
    listener.exitIf_stmt(this);
  }
};
If_stmtContext.prototype.accept = function (visitor) {
  if (visitor instanceof Python3Visitor) {
    return visitor.visitIf_stmt(this);
  } else {
    return visitor.visitChildren(this);
  }
};
Python3Parser.If_stmtContext = If_stmtContext;
Python3Parser.prototype.if_stmt = function () {
  var localctx = new If_stmtContext(this, this._ctx, this.state);
  this.enterRule(localctx, 82, Python3Parser.RULE_if_stmt);
  var _la = 0; // Token type
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 593;
    this.match(Python3Parser.IF);
    this.state = 594;
    this.test();
    this.state = 595;
    this.match(Python3Parser.COLON);
    this.state = 596;
    this.suite();
    this.state = 604;
    this._errHandler.sync(this);
    _la = this._input.LA(1);
    while (_la === Python3Parser.ELIF) {
      this.state = 597;
      this.match(Python3Parser.ELIF);
      this.state = 598;
      this.test();
      this.state = 599;
      this.match(Python3Parser.COLON);
      this.state = 600;
      this.suite();
      this.state = 606;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
    }
    this.state = 610;
    this._errHandler.sync(this);
    _la = this._input.LA(1);
    if (_la === Python3Parser.ELSE) {
      this.state = 607;
      this.match(Python3Parser.ELSE);
      this.state = 608;
      this.match(Python3Parser.COLON);
      this.state = 609;
      this.suite();
    }
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};
function While_stmtContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null;
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = Python3Parser.RULE_while_stmt;
  return this;
}
While_stmtContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
While_stmtContext.prototype.constructor = While_stmtContext;
While_stmtContext.prototype.WHILE = function () {
  return this.getToken(Python3Parser.WHILE, 0);
};
While_stmtContext.prototype.test = function () {
  return this.getTypedRuleContext(TestContext, 0);
};
While_stmtContext.prototype.COLON = function (i) {
  if (i === undefined) {
    i = null;
  }
  if (i === null) {
    return this.getTokens(Python3Parser.COLON);
  } else {
    return this.getToken(Python3Parser.COLON, i);
  }
};
While_stmtContext.prototype.suite = function (i) {
  if (i === undefined) {
    i = null;
  }
  if (i === null) {
    return this.getTypedRuleContexts(SuiteContext);
  } else {
    return this.getTypedRuleContext(SuiteContext, i);
  }
};
While_stmtContext.prototype.ELSE = function () {
  return this.getToken(Python3Parser.ELSE, 0);
};
While_stmtContext.prototype.enterRule = function (listener) {
  if (listener instanceof Python3Listener) {
    listener.enterWhile_stmt(this);
  }
};
While_stmtContext.prototype.exitRule = function (listener) {
  if (listener instanceof Python3Listener) {
    listener.exitWhile_stmt(this);
  }
};
While_stmtContext.prototype.accept = function (visitor) {
  if (visitor instanceof Python3Visitor) {
    return visitor.visitWhile_stmt(this);
  } else {
    return visitor.visitChildren(this);
  }
};
Python3Parser.While_stmtContext = While_stmtContext;
Python3Parser.prototype.while_stmt = function () {
  var localctx = new While_stmtContext(this, this._ctx, this.state);
  this.enterRule(localctx, 84, Python3Parser.RULE_while_stmt);
  var _la = 0; // Token type
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 612;
    this.match(Python3Parser.WHILE);
    this.state = 613;
    this.test();
    this.state = 614;
    this.match(Python3Parser.COLON);
    this.state = 615;
    this.suite();
    this.state = 619;
    this._errHandler.sync(this);
    _la = this._input.LA(1);
    if (_la === Python3Parser.ELSE) {
      this.state = 616;
      this.match(Python3Parser.ELSE);
      this.state = 617;
      this.match(Python3Parser.COLON);
      this.state = 618;
      this.suite();
    }
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};
function For_stmtContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null;
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = Python3Parser.RULE_for_stmt;
  return this;
}
For_stmtContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
For_stmtContext.prototype.constructor = For_stmtContext;
For_stmtContext.prototype.FOR = function () {
  return this.getToken(Python3Parser.FOR, 0);
};
For_stmtContext.prototype.exprlist = function () {
  return this.getTypedRuleContext(ExprlistContext, 0);
};
For_stmtContext.prototype.IN = function () {
  return this.getToken(Python3Parser.IN, 0);
};
For_stmtContext.prototype.testlist = function () {
  return this.getTypedRuleContext(TestlistContext, 0);
};
For_stmtContext.prototype.COLON = function (i) {
  if (i === undefined) {
    i = null;
  }
  if (i === null) {
    return this.getTokens(Python3Parser.COLON);
  } else {
    return this.getToken(Python3Parser.COLON, i);
  }
};
For_stmtContext.prototype.suite = function (i) {
  if (i === undefined) {
    i = null;
  }
  if (i === null) {
    return this.getTypedRuleContexts(SuiteContext);
  } else {
    return this.getTypedRuleContext(SuiteContext, i);
  }
};
For_stmtContext.prototype.ELSE = function () {
  return this.getToken(Python3Parser.ELSE, 0);
};
For_stmtContext.prototype.enterRule = function (listener) {
  if (listener instanceof Python3Listener) {
    listener.enterFor_stmt(this);
  }
};
For_stmtContext.prototype.exitRule = function (listener) {
  if (listener instanceof Python3Listener) {
    listener.exitFor_stmt(this);
  }
};
For_stmtContext.prototype.accept = function (visitor) {
  if (visitor instanceof Python3Visitor) {
    return visitor.visitFor_stmt(this);
  } else {
    return visitor.visitChildren(this);
  }
};
Python3Parser.For_stmtContext = For_stmtContext;
Python3Parser.prototype.for_stmt = function () {
  var localctx = new For_stmtContext(this, this._ctx, this.state);
  this.enterRule(localctx, 86, Python3Parser.RULE_for_stmt);
  var _la = 0; // Token type
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 621;
    this.match(Python3Parser.FOR);
    this.state = 622;
    this.exprlist();
    this.state = 623;
    this.match(Python3Parser.IN);
    this.state = 624;
    this.testlist();
    this.state = 625;
    this.match(Python3Parser.COLON);
    this.state = 626;
    this.suite();
    this.state = 630;
    this._errHandler.sync(this);
    _la = this._input.LA(1);
    if (_la === Python3Parser.ELSE) {
      this.state = 627;
      this.match(Python3Parser.ELSE);
      this.state = 628;
      this.match(Python3Parser.COLON);
      this.state = 629;
      this.suite();
    }
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};
function Try_stmtContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null;
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = Python3Parser.RULE_try_stmt;
  return this;
}
Try_stmtContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Try_stmtContext.prototype.constructor = Try_stmtContext;
Try_stmtContext.prototype.TRY = function () {
  return this.getToken(Python3Parser.TRY, 0);
};
Try_stmtContext.prototype.COLON = function (i) {
  if (i === undefined) {
    i = null;
  }
  if (i === null) {
    return this.getTokens(Python3Parser.COLON);
  } else {
    return this.getToken(Python3Parser.COLON, i);
  }
};
Try_stmtContext.prototype.suite = function (i) {
  if (i === undefined) {
    i = null;
  }
  if (i === null) {
    return this.getTypedRuleContexts(SuiteContext);
  } else {
    return this.getTypedRuleContext(SuiteContext, i);
  }
};
Try_stmtContext.prototype.FINALLY = function () {
  return this.getToken(Python3Parser.FINALLY, 0);
};
Try_stmtContext.prototype.except_clause = function (i) {
  if (i === undefined) {
    i = null;
  }
  if (i === null) {
    return this.getTypedRuleContexts(Except_clauseContext);
  } else {
    return this.getTypedRuleContext(Except_clauseContext, i);
  }
};
Try_stmtContext.prototype.ELSE = function () {
  return this.getToken(Python3Parser.ELSE, 0);
};
Try_stmtContext.prototype.enterRule = function (listener) {
  if (listener instanceof Python3Listener) {
    listener.enterTry_stmt(this);
  }
};
Try_stmtContext.prototype.exitRule = function (listener) {
  if (listener instanceof Python3Listener) {
    listener.exitTry_stmt(this);
  }
};
Try_stmtContext.prototype.accept = function (visitor) {
  if (visitor instanceof Python3Visitor) {
    return visitor.visitTry_stmt(this);
  } else {
    return visitor.visitChildren(this);
  }
};
Python3Parser.Try_stmtContext = Try_stmtContext;
Python3Parser.prototype.try_stmt = function () {
  var localctx = new Try_stmtContext(this, this._ctx, this.state);
  this.enterRule(localctx, 88, Python3Parser.RULE_try_stmt);
  var _la = 0; // Token type
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 632;
    this.match(Python3Parser.TRY);
    this.state = 633;
    this.match(Python3Parser.COLON);
    this.state = 634;
    this.suite();
    this.state = 656;
    this._errHandler.sync(this);
    switch (this._input.LA(1)) {
      case Python3Parser.EXCEPT:
        this.state = 639;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
          this.state = 635;
          this.except_clause();
          this.state = 636;
          this.match(Python3Parser.COLON);
          this.state = 637;
          this.suite();
          this.state = 641;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
        } while (_la === Python3Parser.EXCEPT);
        this.state = 646;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if (_la === Python3Parser.ELSE) {
          this.state = 643;
          this.match(Python3Parser.ELSE);
          this.state = 644;
          this.match(Python3Parser.COLON);
          this.state = 645;
          this.suite();
        }
        this.state = 651;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if (_la === Python3Parser.FINALLY) {
          this.state = 648;
          this.match(Python3Parser.FINALLY);
          this.state = 649;
          this.match(Python3Parser.COLON);
          this.state = 650;
          this.suite();
        }
        break;
      case Python3Parser.FINALLY:
        this.state = 653;
        this.match(Python3Parser.FINALLY);
        this.state = 654;
        this.match(Python3Parser.COLON);
        this.state = 655;
        this.suite();
        break;
      default:
        throw new antlr4.error.NoViableAltException(this);
    }
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};
function With_stmtContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null;
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = Python3Parser.RULE_with_stmt;
  return this;
}
With_stmtContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
With_stmtContext.prototype.constructor = With_stmtContext;
With_stmtContext.prototype.WITH = function () {
  return this.getToken(Python3Parser.WITH, 0);
};
With_stmtContext.prototype.with_item = function (i) {
  if (i === undefined) {
    i = null;
  }
  if (i === null) {
    return this.getTypedRuleContexts(With_itemContext);
  } else {
    return this.getTypedRuleContext(With_itemContext, i);
  }
};
With_stmtContext.prototype.COLON = function () {
  return this.getToken(Python3Parser.COLON, 0);
};
With_stmtContext.prototype.suite = function () {
  return this.getTypedRuleContext(SuiteContext, 0);
};
With_stmtContext.prototype.COMMA = function (i) {
  if (i === undefined) {
    i = null;
  }
  if (i === null) {
    return this.getTokens(Python3Parser.COMMA);
  } else {
    return this.getToken(Python3Parser.COMMA, i);
  }
};
With_stmtContext.prototype.enterRule = function (listener) {
  if (listener instanceof Python3Listener) {
    listener.enterWith_stmt(this);
  }
};
With_stmtContext.prototype.exitRule = function (listener) {
  if (listener instanceof Python3Listener) {
    listener.exitWith_stmt(this);
  }
};
With_stmtContext.prototype.accept = function (visitor) {
  if (visitor instanceof Python3Visitor) {
    return visitor.visitWith_stmt(this);
  } else {
    return visitor.visitChildren(this);
  }
};
Python3Parser.With_stmtContext = With_stmtContext;
Python3Parser.prototype.with_stmt = function () {
  var localctx = new With_stmtContext(this, this._ctx, this.state);
  this.enterRule(localctx, 90, Python3Parser.RULE_with_stmt);
  var _la = 0; // Token type
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 658;
    this.match(Python3Parser.WITH);
    this.state = 659;
    this.with_item();
    this.state = 664;
    this._errHandler.sync(this);
    _la = this._input.LA(1);
    while (_la === Python3Parser.COMMA) {
      this.state = 660;
      this.match(Python3Parser.COMMA);
      this.state = 661;
      this.with_item();
      this.state = 666;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
    }
    this.state = 667;
    this.match(Python3Parser.COLON);
    this.state = 668;
    this.suite();
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};
function With_itemContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null;
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = Python3Parser.RULE_with_item;
  return this;
}
With_itemContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
With_itemContext.prototype.constructor = With_itemContext;
With_itemContext.prototype.test = function () {
  return this.getTypedRuleContext(TestContext, 0);
};
With_itemContext.prototype.AS = function () {
  return this.getToken(Python3Parser.AS, 0);
};
With_itemContext.prototype.expr = function () {
  return this.getTypedRuleContext(ExprContext, 0);
};
With_itemContext.prototype.enterRule = function (listener) {
  if (listener instanceof Python3Listener) {
    listener.enterWith_item(this);
  }
};
With_itemContext.prototype.exitRule = function (listener) {
  if (listener instanceof Python3Listener) {
    listener.exitWith_item(this);
  }
};
With_itemContext.prototype.accept = function (visitor) {
  if (visitor instanceof Python3Visitor) {
    return visitor.visitWith_item(this);
  } else {
    return visitor.visitChildren(this);
  }
};
Python3Parser.With_itemContext = With_itemContext;
Python3Parser.prototype.with_item = function () {
  var localctx = new With_itemContext(this, this._ctx, this.state);
  this.enterRule(localctx, 92, Python3Parser.RULE_with_item);
  var _la = 0; // Token type
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 670;
    this.test();
    this.state = 673;
    this._errHandler.sync(this);
    _la = this._input.LA(1);
    if (_la === Python3Parser.AS) {
      this.state = 671;
      this.match(Python3Parser.AS);
      this.state = 672;
      this.expr();
    }
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};
function Except_clauseContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null;
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = Python3Parser.RULE_except_clause;
  return this;
}
Except_clauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Except_clauseContext.prototype.constructor = Except_clauseContext;
Except_clauseContext.prototype.EXCEPT = function () {
  return this.getToken(Python3Parser.EXCEPT, 0);
};
Except_clauseContext.prototype.test = function () {
  return this.getTypedRuleContext(TestContext, 0);
};
Except_clauseContext.prototype.AS = function () {
  return this.getToken(Python3Parser.AS, 0);
};
Except_clauseContext.prototype.NAME = function () {
  return this.getToken(Python3Parser.NAME, 0);
};
Except_clauseContext.prototype.enterRule = function (listener) {
  if (listener instanceof Python3Listener) {
    listener.enterExcept_clause(this);
  }
};
Except_clauseContext.prototype.exitRule = function (listener) {
  if (listener instanceof Python3Listener) {
    listener.exitExcept_clause(this);
  }
};
Except_clauseContext.prototype.accept = function (visitor) {
  if (visitor instanceof Python3Visitor) {
    return visitor.visitExcept_clause(this);
  } else {
    return visitor.visitChildren(this);
  }
};
Python3Parser.Except_clauseContext = Except_clauseContext;
Python3Parser.prototype.except_clause = function () {
  var localctx = new Except_clauseContext(this, this._ctx, this.state);
  this.enterRule(localctx, 94, Python3Parser.RULE_except_clause);
  var _la = 0; // Token type
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 675;
    this.match(Python3Parser.EXCEPT);
    this.state = 681;
    this._errHandler.sync(this);
    _la = this._input.LA(1);
    if ((_la - 20 & ~0x1f) == 0 && (1 << _la - 20 & (1 << Python3Parser.LAMBDA - 20 | 1 << Python3Parser.NOT - 20 | 1 << Python3Parser.NONE - 20 | 1 << Python3Parser.TRUE - 20 | 1 << Python3Parser.FALSE - 20 | 1 << Python3Parser.AWAIT - 20 | 1 << Python3Parser.NAME - 20 | 1 << Python3Parser.STRING_LITERAL - 20 | 1 << Python3Parser.BYTES_LITERAL - 20 | 1 << Python3Parser.DECIMAL_INTEGER - 20 | 1 << Python3Parser.OCT_INTEGER - 20 | 1 << Python3Parser.HEX_INTEGER - 20 | 1 << Python3Parser.BIN_INTEGER - 20 | 1 << Python3Parser.FLOAT_NUMBER - 20 | 1 << Python3Parser.IMAG_NUMBER - 20 | 1 << Python3Parser.ELLIPSIS - 20 | 1 << Python3Parser.STAR - 20 | 1 << Python3Parser.OPEN_PAREN - 20)) !== 0 || (_la - 56 & ~0x1f) == 0 && (1 << _la - 56 & (1 << Python3Parser.OPEN_BRACK - 56 | 1 << Python3Parser.ADD - 56 | 1 << Python3Parser.MINUS - 56 | 1 << Python3Parser.NOT_OP - 56 | 1 << Python3Parser.OPEN_BRACE - 56)) !== 0) {
      this.state = 676;
      this.test();
      this.state = 679;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if (_la === Python3Parser.AS) {
        this.state = 677;
        this.match(Python3Parser.AS);
        this.state = 678;
        this.match(Python3Parser.NAME);
      }
    }
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};
function SuiteContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null;
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = Python3Parser.RULE_suite;
  return this;
}
SuiteContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SuiteContext.prototype.constructor = SuiteContext;
SuiteContext.prototype.simple_stmt = function () {
  return this.getTypedRuleContext(Simple_stmtContext, 0);
};
SuiteContext.prototype.NEWLINE = function () {
  return this.getToken(Python3Parser.NEWLINE, 0);
};
SuiteContext.prototype.INDENT = function () {
  return this.getToken(Python3Parser.INDENT, 0);
};
SuiteContext.prototype.DEDENT = function () {
  return this.getToken(Python3Parser.DEDENT, 0);
};
SuiteContext.prototype.stmt = function (i) {
  if (i === undefined) {
    i = null;
  }
  if (i === null) {
    return this.getTypedRuleContexts(StmtContext);
  } else {
    return this.getTypedRuleContext(StmtContext, i);
  }
};
SuiteContext.prototype.enterRule = function (listener) {
  if (listener instanceof Python3Listener) {
    listener.enterSuite(this);
  }
};
SuiteContext.prototype.exitRule = function (listener) {
  if (listener instanceof Python3Listener) {
    listener.exitSuite(this);
  }
};
SuiteContext.prototype.accept = function (visitor) {
  if (visitor instanceof Python3Visitor) {
    return visitor.visitSuite(this);
  } else {
    return visitor.visitChildren(this);
  }
};
Python3Parser.SuiteContext = SuiteContext;
Python3Parser.prototype.suite = function () {
  var localctx = new SuiteContext(this, this._ctx, this.state);
  this.enterRule(localctx, 96, Python3Parser.RULE_suite);
  var _la = 0; // Token type
  try {
    this.state = 693;
    this._errHandler.sync(this);
    switch (this._input.LA(1)) {
      case Python3Parser.RETURN:
      case Python3Parser.RAISE:
      case Python3Parser.FROM:
      case Python3Parser.IMPORT:
      case Python3Parser.GLOBAL:
      case Python3Parser.NONLOCAL:
      case Python3Parser.ASSERT:
      case Python3Parser.LAMBDA:
      case Python3Parser.NOT:
      case Python3Parser.NONE:
      case Python3Parser.TRUE:
      case Python3Parser.FALSE:
      case Python3Parser.YIELD:
      case Python3Parser.DEL:
      case Python3Parser.PASS:
      case Python3Parser.CONTINUE:
      case Python3Parser.BREAK:
      case Python3Parser.AWAIT:
      case Python3Parser.NAME:
      case Python3Parser.STRING_LITERAL:
      case Python3Parser.BYTES_LITERAL:
      case Python3Parser.DECIMAL_INTEGER:
      case Python3Parser.OCT_INTEGER:
      case Python3Parser.HEX_INTEGER:
      case Python3Parser.BIN_INTEGER:
      case Python3Parser.FLOAT_NUMBER:
      case Python3Parser.IMAG_NUMBER:
      case Python3Parser.ELLIPSIS:
      case Python3Parser.STAR:
      case Python3Parser.OPEN_PAREN:
      case Python3Parser.OPEN_BRACK:
      case Python3Parser.ADD:
      case Python3Parser.MINUS:
      case Python3Parser.NOT_OP:
      case Python3Parser.OPEN_BRACE:
        this.enterOuterAlt(localctx, 1);
        this.state = 683;
        this.simple_stmt();
        break;
      case Python3Parser.NEWLINE:
        this.enterOuterAlt(localctx, 2);
        this.state = 684;
        this.match(Python3Parser.NEWLINE);
        this.state = 685;
        this.match(Python3Parser.INDENT);
        this.state = 687;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
          this.state = 686;
          this.stmt();
          this.state = 689;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
        } while ((_la & ~0x1f) == 0 && (1 << _la & (1 << Python3Parser.DEF | 1 << Python3Parser.RETURN | 1 << Python3Parser.RAISE | 1 << Python3Parser.FROM | 1 << Python3Parser.IMPORT | 1 << Python3Parser.GLOBAL | 1 << Python3Parser.NONLOCAL | 1 << Python3Parser.ASSERT | 1 << Python3Parser.IF | 1 << Python3Parser.WHILE | 1 << Python3Parser.FOR | 1 << Python3Parser.TRY | 1 << Python3Parser.WITH | 1 << Python3Parser.LAMBDA | 1 << Python3Parser.NOT | 1 << Python3Parser.NONE | 1 << Python3Parser.TRUE | 1 << Python3Parser.FALSE | 1 << Python3Parser.CLASS | 1 << Python3Parser.YIELD | 1 << Python3Parser.DEL | 1 << Python3Parser.PASS)) !== 0 || (_la - 32 & ~0x1f) == 0 && (1 << _la - 32 & (1 << Python3Parser.CONTINUE - 32 | 1 << Python3Parser.BREAK - 32 | 1 << Python3Parser.ASYNC - 32 | 1 << Python3Parser.AWAIT - 32 | 1 << Python3Parser.NAME - 32 | 1 << Python3Parser.STRING_LITERAL - 32 | 1 << Python3Parser.BYTES_LITERAL - 32 | 1 << Python3Parser.DECIMAL_INTEGER - 32 | 1 << Python3Parser.OCT_INTEGER - 32 | 1 << Python3Parser.HEX_INTEGER - 32 | 1 << Python3Parser.BIN_INTEGER - 32 | 1 << Python3Parser.FLOAT_NUMBER - 32 | 1 << Python3Parser.IMAG_NUMBER - 32 | 1 << Python3Parser.ELLIPSIS - 32 | 1 << Python3Parser.STAR - 32 | 1 << Python3Parser.OPEN_PAREN - 32 | 1 << Python3Parser.OPEN_BRACK - 32 | 1 << Python3Parser.ADD - 32)) !== 0 || (_la - 64 & ~0x1f) == 0 && (1 << _la - 64 & (1 << Python3Parser.MINUS - 64 | 1 << Python3Parser.NOT_OP - 64 | 1 << Python3Parser.OPEN_BRACE - 64 | 1 << Python3Parser.AT - 64)) !== 0);
        this.state = 691;
        this.match(Python3Parser.DEDENT);
        break;
      default:
        throw new antlr4.error.NoViableAltException(this);
    }
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};
function TestContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null;
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = Python3Parser.RULE_test;
  return this;
}
TestContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TestContext.prototype.constructor = TestContext;
TestContext.prototype.or_test = function (i) {
  if (i === undefined) {
    i = null;
  }
  if (i === null) {
    return this.getTypedRuleContexts(Or_testContext);
  } else {
    return this.getTypedRuleContext(Or_testContext, i);
  }
};
TestContext.prototype.IF = function () {
  return this.getToken(Python3Parser.IF, 0);
};
TestContext.prototype.ELSE = function () {
  return this.getToken(Python3Parser.ELSE, 0);
};
TestContext.prototype.test = function () {
  return this.getTypedRuleContext(TestContext, 0);
};
TestContext.prototype.lambdef = function () {
  return this.getTypedRuleContext(LambdefContext, 0);
};
TestContext.prototype.enterRule = function (listener) {
  if (listener instanceof Python3Listener) {
    listener.enterTest(this);
  }
};
TestContext.prototype.exitRule = function (listener) {
  if (listener instanceof Python3Listener) {
    listener.exitTest(this);
  }
};
TestContext.prototype.accept = function (visitor) {
  if (visitor instanceof Python3Visitor) {
    return visitor.visitTest(this);
  } else {
    return visitor.visitChildren(this);
  }
};
Python3Parser.TestContext = TestContext;
Python3Parser.prototype.test = function () {
  var localctx = new TestContext(this, this._ctx, this.state);
  this.enterRule(localctx, 98, Python3Parser.RULE_test);
  var _la = 0; // Token type
  try {
    this.state = 704;
    this._errHandler.sync(this);
    switch (this._input.LA(1)) {
      case Python3Parser.NOT:
      case Python3Parser.NONE:
      case Python3Parser.TRUE:
      case Python3Parser.FALSE:
      case Python3Parser.AWAIT:
      case Python3Parser.NAME:
      case Python3Parser.STRING_LITERAL:
      case Python3Parser.BYTES_LITERAL:
      case Python3Parser.DECIMAL_INTEGER:
      case Python3Parser.OCT_INTEGER:
      case Python3Parser.HEX_INTEGER:
      case Python3Parser.BIN_INTEGER:
      case Python3Parser.FLOAT_NUMBER:
      case Python3Parser.IMAG_NUMBER:
      case Python3Parser.ELLIPSIS:
      case Python3Parser.STAR:
      case Python3Parser.OPEN_PAREN:
      case Python3Parser.OPEN_BRACK:
      case Python3Parser.ADD:
      case Python3Parser.MINUS:
      case Python3Parser.NOT_OP:
      case Python3Parser.OPEN_BRACE:
        this.enterOuterAlt(localctx, 1);
        this.state = 695;
        this.or_test();
        this.state = 701;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if (_la === Python3Parser.IF) {
          this.state = 696;
          this.match(Python3Parser.IF);
          this.state = 697;
          this.or_test();
          this.state = 698;
          this.match(Python3Parser.ELSE);
          this.state = 699;
          this.test();
        }
        break;
      case Python3Parser.LAMBDA:
        this.enterOuterAlt(localctx, 2);
        this.state = 703;
        this.lambdef();
        break;
      default:
        throw new antlr4.error.NoViableAltException(this);
    }
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};
function Test_nocondContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null;
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = Python3Parser.RULE_test_nocond;
  return this;
}
Test_nocondContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Test_nocondContext.prototype.constructor = Test_nocondContext;
Test_nocondContext.prototype.or_test = function () {
  return this.getTypedRuleContext(Or_testContext, 0);
};
Test_nocondContext.prototype.lambdef_nocond = function () {
  return this.getTypedRuleContext(Lambdef_nocondContext, 0);
};
Test_nocondContext.prototype.enterRule = function (listener) {
  if (listener instanceof Python3Listener) {
    listener.enterTest_nocond(this);
  }
};
Test_nocondContext.prototype.exitRule = function (listener) {
  if (listener instanceof Python3Listener) {
    listener.exitTest_nocond(this);
  }
};
Test_nocondContext.prototype.accept = function (visitor) {
  if (visitor instanceof Python3Visitor) {
    return visitor.visitTest_nocond(this);
  } else {
    return visitor.visitChildren(this);
  }
};
Python3Parser.Test_nocondContext = Test_nocondContext;
Python3Parser.prototype.test_nocond = function () {
  var localctx = new Test_nocondContext(this, this._ctx, this.state);
  this.enterRule(localctx, 100, Python3Parser.RULE_test_nocond);
  try {
    this.state = 708;
    this._errHandler.sync(this);
    switch (this._input.LA(1)) {
      case Python3Parser.NOT:
      case Python3Parser.NONE:
      case Python3Parser.TRUE:
      case Python3Parser.FALSE:
      case Python3Parser.AWAIT:
      case Python3Parser.NAME:
      case Python3Parser.STRING_LITERAL:
      case Python3Parser.BYTES_LITERAL:
      case Python3Parser.DECIMAL_INTEGER:
      case Python3Parser.OCT_INTEGER:
      case Python3Parser.HEX_INTEGER:
      case Python3Parser.BIN_INTEGER:
      case Python3Parser.FLOAT_NUMBER:
      case Python3Parser.IMAG_NUMBER:
      case Python3Parser.ELLIPSIS:
      case Python3Parser.STAR:
      case Python3Parser.OPEN_PAREN:
      case Python3Parser.OPEN_BRACK:
      case Python3Parser.ADD:
      case Python3Parser.MINUS:
      case Python3Parser.NOT_OP:
      case Python3Parser.OPEN_BRACE:
        this.enterOuterAlt(localctx, 1);
        this.state = 706;
        this.or_test();
        break;
      case Python3Parser.LAMBDA:
        this.enterOuterAlt(localctx, 2);
        this.state = 707;
        this.lambdef_nocond();
        break;
      default:
        throw new antlr4.error.NoViableAltException(this);
    }
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};
function LambdefContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null;
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = Python3Parser.RULE_lambdef;
  return this;
}
LambdefContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
LambdefContext.prototype.constructor = LambdefContext;
LambdefContext.prototype.LAMBDA = function () {
  return this.getToken(Python3Parser.LAMBDA, 0);
};
LambdefContext.prototype.COLON = function () {
  return this.getToken(Python3Parser.COLON, 0);
};
LambdefContext.prototype.test = function () {
  return this.getTypedRuleContext(TestContext, 0);
};
LambdefContext.prototype.varargslist = function () {
  return this.getTypedRuleContext(VarargslistContext, 0);
};
LambdefContext.prototype.enterRule = function (listener) {
  if (listener instanceof Python3Listener) {
    listener.enterLambdef(this);
  }
};
LambdefContext.prototype.exitRule = function (listener) {
  if (listener instanceof Python3Listener) {
    listener.exitLambdef(this);
  }
};
LambdefContext.prototype.accept = function (visitor) {
  if (visitor instanceof Python3Visitor) {
    return visitor.visitLambdef(this);
  } else {
    return visitor.visitChildren(this);
  }
};
Python3Parser.LambdefContext = LambdefContext;
Python3Parser.prototype.lambdef = function () {
  var localctx = new LambdefContext(this, this._ctx, this.state);
  this.enterRule(localctx, 102, Python3Parser.RULE_lambdef);
  var _la = 0; // Token type
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 710;
    this.match(Python3Parser.LAMBDA);
    this.state = 712;
    this._errHandler.sync(this);
    _la = this._input.LA(1);
    if ((_la - 37 & ~0x1f) == 0 && (1 << _la - 37 & (1 << Python3Parser.NAME - 37 | 1 << Python3Parser.STAR - 37 | 1 << Python3Parser.POWER - 37)) !== 0) {
      this.state = 711;
      this.varargslist();
    }
    this.state = 714;
    this.match(Python3Parser.COLON);
    this.state = 715;
    this.test();
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};
function Lambdef_nocondContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null;
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = Python3Parser.RULE_lambdef_nocond;
  return this;
}
Lambdef_nocondContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Lambdef_nocondContext.prototype.constructor = Lambdef_nocondContext;
Lambdef_nocondContext.prototype.LAMBDA = function () {
  return this.getToken(Python3Parser.LAMBDA, 0);
};
Lambdef_nocondContext.prototype.COLON = function () {
  return this.getToken(Python3Parser.COLON, 0);
};
Lambdef_nocondContext.prototype.test_nocond = function () {
  return this.getTypedRuleContext(Test_nocondContext, 0);
};
Lambdef_nocondContext.prototype.varargslist = function () {
  return this.getTypedRuleContext(VarargslistContext, 0);
};
Lambdef_nocondContext.prototype.enterRule = function (listener) {
  if (listener instanceof Python3Listener) {
    listener.enterLambdef_nocond(this);
  }
};
Lambdef_nocondContext.prototype.exitRule = function (listener) {
  if (listener instanceof Python3Listener) {
    listener.exitLambdef_nocond(this);
  }
};
Lambdef_nocondContext.prototype.accept = function (visitor) {
  if (visitor instanceof Python3Visitor) {
    return visitor.visitLambdef_nocond(this);
  } else {
    return visitor.visitChildren(this);
  }
};
Python3Parser.Lambdef_nocondContext = Lambdef_nocondContext;
Python3Parser.prototype.lambdef_nocond = function () {
  var localctx = new Lambdef_nocondContext(this, this._ctx, this.state);
  this.enterRule(localctx, 104, Python3Parser.RULE_lambdef_nocond);
  var _la = 0; // Token type
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 717;
    this.match(Python3Parser.LAMBDA);
    this.state = 719;
    this._errHandler.sync(this);
    _la = this._input.LA(1);
    if ((_la - 37 & ~0x1f) == 0 && (1 << _la - 37 & (1 << Python3Parser.NAME - 37 | 1 << Python3Parser.STAR - 37 | 1 << Python3Parser.POWER - 37)) !== 0) {
      this.state = 718;
      this.varargslist();
    }
    this.state = 721;
    this.match(Python3Parser.COLON);
    this.state = 722;
    this.test_nocond();
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};
function Or_testContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null;
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = Python3Parser.RULE_or_test;
  return this;
}
Or_testContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Or_testContext.prototype.constructor = Or_testContext;
Or_testContext.prototype.and_test = function (i) {
  if (i === undefined) {
    i = null;
  }
  if (i === null) {
    return this.getTypedRuleContexts(And_testContext);
  } else {
    return this.getTypedRuleContext(And_testContext, i);
  }
};
Or_testContext.prototype.OR = function (i) {
  if (i === undefined) {
    i = null;
  }
  if (i === null) {
    return this.getTokens(Python3Parser.OR);
  } else {
    return this.getToken(Python3Parser.OR, i);
  }
};
Or_testContext.prototype.enterRule = function (listener) {
  if (listener instanceof Python3Listener) {
    listener.enterOr_test(this);
  }
};
Or_testContext.prototype.exitRule = function (listener) {
  if (listener instanceof Python3Listener) {
    listener.exitOr_test(this);
  }
};
Or_testContext.prototype.accept = function (visitor) {
  if (visitor instanceof Python3Visitor) {
    return visitor.visitOr_test(this);
  } else {
    return visitor.visitChildren(this);
  }
};
Python3Parser.Or_testContext = Or_testContext;
Python3Parser.prototype.or_test = function () {
  var localctx = new Or_testContext(this, this._ctx, this.state);
  this.enterRule(localctx, 106, Python3Parser.RULE_or_test);
  var _la = 0; // Token type
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 724;
    this.and_test();
    this.state = 729;
    this._errHandler.sync(this);
    _la = this._input.LA(1);
    while (_la === Python3Parser.OR) {
      this.state = 725;
      this.match(Python3Parser.OR);
      this.state = 726;
      this.and_test();
      this.state = 731;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
    }
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};
function And_testContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null;
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = Python3Parser.RULE_and_test;
  return this;
}
And_testContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
And_testContext.prototype.constructor = And_testContext;
And_testContext.prototype.not_test = function (i) {
  if (i === undefined) {
    i = null;
  }
  if (i === null) {
    return this.getTypedRuleContexts(Not_testContext);
  } else {
    return this.getTypedRuleContext(Not_testContext, i);
  }
};
And_testContext.prototype.AND = function (i) {
  if (i === undefined) {
    i = null;
  }
  if (i === null) {
    return this.getTokens(Python3Parser.AND);
  } else {
    return this.getToken(Python3Parser.AND, i);
  }
};
And_testContext.prototype.enterRule = function (listener) {
  if (listener instanceof Python3Listener) {
    listener.enterAnd_test(this);
  }
};
And_testContext.prototype.exitRule = function (listener) {
  if (listener instanceof Python3Listener) {
    listener.exitAnd_test(this);
  }
};
And_testContext.prototype.accept = function (visitor) {
  if (visitor instanceof Python3Visitor) {
    return visitor.visitAnd_test(this);
  } else {
    return visitor.visitChildren(this);
  }
};
Python3Parser.And_testContext = And_testContext;
Python3Parser.prototype.and_test = function () {
  var localctx = new And_testContext(this, this._ctx, this.state);
  this.enterRule(localctx, 108, Python3Parser.RULE_and_test);
  var _la = 0; // Token type
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 732;
    this.not_test();
    this.state = 737;
    this._errHandler.sync(this);
    _la = this._input.LA(1);
    while (_la === Python3Parser.AND) {
      this.state = 733;
      this.match(Python3Parser.AND);
      this.state = 734;
      this.not_test();
      this.state = 739;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
    }
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};
function Not_testContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null;
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = Python3Parser.RULE_not_test;
  return this;
}
Not_testContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Not_testContext.prototype.constructor = Not_testContext;
Not_testContext.prototype.NOT = function () {
  return this.getToken(Python3Parser.NOT, 0);
};
Not_testContext.prototype.not_test = function () {
  return this.getTypedRuleContext(Not_testContext, 0);
};
Not_testContext.prototype.comparison = function () {
  return this.getTypedRuleContext(ComparisonContext, 0);
};
Not_testContext.prototype.enterRule = function (listener) {
  if (listener instanceof Python3Listener) {
    listener.enterNot_test(this);
  }
};
Not_testContext.prototype.exitRule = function (listener) {
  if (listener instanceof Python3Listener) {
    listener.exitNot_test(this);
  }
};
Not_testContext.prototype.accept = function (visitor) {
  if (visitor instanceof Python3Visitor) {
    return visitor.visitNot_test(this);
  } else {
    return visitor.visitChildren(this);
  }
};
Python3Parser.Not_testContext = Not_testContext;
Python3Parser.prototype.not_test = function () {
  var localctx = new Not_testContext(this, this._ctx, this.state);
  this.enterRule(localctx, 110, Python3Parser.RULE_not_test);
  try {
    this.state = 743;
    this._errHandler.sync(this);
    switch (this._input.LA(1)) {
      case Python3Parser.NOT:
        this.enterOuterAlt(localctx, 1);
        this.state = 740;
        this.match(Python3Parser.NOT);
        this.state = 741;
        this.not_test();
        break;
      case Python3Parser.NONE:
      case Python3Parser.TRUE:
      case Python3Parser.FALSE:
      case Python3Parser.AWAIT:
      case Python3Parser.NAME:
      case Python3Parser.STRING_LITERAL:
      case Python3Parser.BYTES_LITERAL:
      case Python3Parser.DECIMAL_INTEGER:
      case Python3Parser.OCT_INTEGER:
      case Python3Parser.HEX_INTEGER:
      case Python3Parser.BIN_INTEGER:
      case Python3Parser.FLOAT_NUMBER:
      case Python3Parser.IMAG_NUMBER:
      case Python3Parser.ELLIPSIS:
      case Python3Parser.STAR:
      case Python3Parser.OPEN_PAREN:
      case Python3Parser.OPEN_BRACK:
      case Python3Parser.ADD:
      case Python3Parser.MINUS:
      case Python3Parser.NOT_OP:
      case Python3Parser.OPEN_BRACE:
        this.enterOuterAlt(localctx, 2);
        this.state = 742;
        this.comparison();
        break;
      default:
        throw new antlr4.error.NoViableAltException(this);
    }
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};
function ComparisonContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null;
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = Python3Parser.RULE_comparison;
  return this;
}
ComparisonContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ComparisonContext.prototype.constructor = ComparisonContext;
ComparisonContext.prototype.star_expr = function (i) {
  if (i === undefined) {
    i = null;
  }
  if (i === null) {
    return this.getTypedRuleContexts(Star_exprContext);
  } else {
    return this.getTypedRuleContext(Star_exprContext, i);
  }
};
ComparisonContext.prototype.comp_op = function (i) {
  if (i === undefined) {
    i = null;
  }
  if (i === null) {
    return this.getTypedRuleContexts(Comp_opContext);
  } else {
    return this.getTypedRuleContext(Comp_opContext, i);
  }
};
ComparisonContext.prototype.enterRule = function (listener) {
  if (listener instanceof Python3Listener) {
    listener.enterComparison(this);
  }
};
ComparisonContext.prototype.exitRule = function (listener) {
  if (listener instanceof Python3Listener) {
    listener.exitComparison(this);
  }
};
ComparisonContext.prototype.accept = function (visitor) {
  if (visitor instanceof Python3Visitor) {
    return visitor.visitComparison(this);
  } else {
    return visitor.visitChildren(this);
  }
};
Python3Parser.ComparisonContext = ComparisonContext;
Python3Parser.prototype.comparison = function () {
  var localctx = new ComparisonContext(this, this._ctx, this.state);
  this.enterRule(localctx, 112, Python3Parser.RULE_comparison);
  var _la = 0; // Token type
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 745;
    this.star_expr();
    this.state = 751;
    this._errHandler.sync(this);
    _la = this._input.LA(1);
    while ((_la & ~0x1f) == 0 && (1 << _la & (1 << Python3Parser.IN | 1 << Python3Parser.NOT | 1 << Python3Parser.IS)) !== 0 || (_la - 71 & ~0x1f) == 0 && (1 << _la - 71 & (1 << Python3Parser.LESS_THAN - 71 | 1 << Python3Parser.GREATER_THAN - 71 | 1 << Python3Parser.EQUALS - 71 | 1 << Python3Parser.GT_EQ - 71 | 1 << Python3Parser.LT_EQ - 71 | 1 << Python3Parser.NOT_EQ_1 - 71 | 1 << Python3Parser.NOT_EQ_2 - 71)) !== 0) {
      this.state = 746;
      this.comp_op();
      this.state = 747;
      this.star_expr();
      this.state = 753;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
    }
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};
function Comp_opContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null;
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = Python3Parser.RULE_comp_op;
  return this;
}
Comp_opContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Comp_opContext.prototype.constructor = Comp_opContext;
Comp_opContext.prototype.LESS_THAN = function () {
  return this.getToken(Python3Parser.LESS_THAN, 0);
};
Comp_opContext.prototype.GREATER_THAN = function () {
  return this.getToken(Python3Parser.GREATER_THAN, 0);
};
Comp_opContext.prototype.EQUALS = function () {
  return this.getToken(Python3Parser.EQUALS, 0);
};
Comp_opContext.prototype.GT_EQ = function () {
  return this.getToken(Python3Parser.GT_EQ, 0);
};
Comp_opContext.prototype.LT_EQ = function () {
  return this.getToken(Python3Parser.LT_EQ, 0);
};
Comp_opContext.prototype.NOT_EQ_1 = function () {
  return this.getToken(Python3Parser.NOT_EQ_1, 0);
};
Comp_opContext.prototype.NOT_EQ_2 = function () {
  return this.getToken(Python3Parser.NOT_EQ_2, 0);
};
Comp_opContext.prototype.IN = function () {
  return this.getToken(Python3Parser.IN, 0);
};
Comp_opContext.prototype.NOT = function () {
  return this.getToken(Python3Parser.NOT, 0);
};
Comp_opContext.prototype.IS = function () {
  return this.getToken(Python3Parser.IS, 0);
};
Comp_opContext.prototype.enterRule = function (listener) {
  if (listener instanceof Python3Listener) {
    listener.enterComp_op(this);
  }
};
Comp_opContext.prototype.exitRule = function (listener) {
  if (listener instanceof Python3Listener) {
    listener.exitComp_op(this);
  }
};
Comp_opContext.prototype.accept = function (visitor) {
  if (visitor instanceof Python3Visitor) {
    return visitor.visitComp_op(this);
  } else {
    return visitor.visitChildren(this);
  }
};
Python3Parser.Comp_opContext = Comp_opContext;
Python3Parser.prototype.comp_op = function () {
  var localctx = new Comp_opContext(this, this._ctx, this.state);
  this.enterRule(localctx, 114, Python3Parser.RULE_comp_op);
  try {
    this.state = 767;
    this._errHandler.sync(this);
    var la_ = this._interp.adaptivePredict(this._input, 95, this._ctx);
    switch (la_) {
      case 1:
        this.enterOuterAlt(localctx, 1);
        this.state = 754;
        this.match(Python3Parser.LESS_THAN);
        break;
      case 2:
        this.enterOuterAlt(localctx, 2);
        this.state = 755;
        this.match(Python3Parser.GREATER_THAN);
        break;
      case 3:
        this.enterOuterAlt(localctx, 3);
        this.state = 756;
        this.match(Python3Parser.EQUALS);
        break;
      case 4:
        this.enterOuterAlt(localctx, 4);
        this.state = 757;
        this.match(Python3Parser.GT_EQ);
        break;
      case 5:
        this.enterOuterAlt(localctx, 5);
        this.state = 758;
        this.match(Python3Parser.LT_EQ);
        break;
      case 6:
        this.enterOuterAlt(localctx, 6);
        this.state = 759;
        this.match(Python3Parser.NOT_EQ_1);
        break;
      case 7:
        this.enterOuterAlt(localctx, 7);
        this.state = 760;
        this.match(Python3Parser.NOT_EQ_2);
        break;
      case 8:
        this.enterOuterAlt(localctx, 8);
        this.state = 761;
        this.match(Python3Parser.IN);
        break;
      case 9:
        this.enterOuterAlt(localctx, 9);
        this.state = 762;
        this.match(Python3Parser.NOT);
        this.state = 763;
        this.match(Python3Parser.IN);
        break;
      case 10:
        this.enterOuterAlt(localctx, 10);
        this.state = 764;
        this.match(Python3Parser.IS);
        break;
      case 11:
        this.enterOuterAlt(localctx, 11);
        this.state = 765;
        this.match(Python3Parser.IS);
        this.state = 766;
        this.match(Python3Parser.NOT);
        break;
    }
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};
function Star_exprContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null;
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = Python3Parser.RULE_star_expr;
  return this;
}
Star_exprContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Star_exprContext.prototype.constructor = Star_exprContext;
Star_exprContext.prototype.expr = function () {
  return this.getTypedRuleContext(ExprContext, 0);
};
Star_exprContext.prototype.STAR = function () {
  return this.getToken(Python3Parser.STAR, 0);
};
Star_exprContext.prototype.enterRule = function (listener) {
  if (listener instanceof Python3Listener) {
    listener.enterStar_expr(this);
  }
};
Star_exprContext.prototype.exitRule = function (listener) {
  if (listener instanceof Python3Listener) {
    listener.exitStar_expr(this);
  }
};
Star_exprContext.prototype.accept = function (visitor) {
  if (visitor instanceof Python3Visitor) {
    return visitor.visitStar_expr(this);
  } else {
    return visitor.visitChildren(this);
  }
};
Python3Parser.Star_exprContext = Star_exprContext;
Python3Parser.prototype.star_expr = function () {
  var localctx = new Star_exprContext(this, this._ctx, this.state);
  this.enterRule(localctx, 116, Python3Parser.RULE_star_expr);
  var _la = 0; // Token type
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 770;
    this._errHandler.sync(this);
    _la = this._input.LA(1);
    if (_la === Python3Parser.STAR) {
      this.state = 769;
      this.match(Python3Parser.STAR);
    }
    this.state = 772;
    this.expr();
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};
function ExprContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null;
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = Python3Parser.RULE_expr;
  return this;
}
ExprContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExprContext.prototype.constructor = ExprContext;
ExprContext.prototype.xor_expr = function (i) {
  if (i === undefined) {
    i = null;
  }
  if (i === null) {
    return this.getTypedRuleContexts(Xor_exprContext);
  } else {
    return this.getTypedRuleContext(Xor_exprContext, i);
  }
};
ExprContext.prototype.OR_OP = function (i) {
  if (i === undefined) {
    i = null;
  }
  if (i === null) {
    return this.getTokens(Python3Parser.OR_OP);
  } else {
    return this.getToken(Python3Parser.OR_OP, i);
  }
};
ExprContext.prototype.enterRule = function (listener) {
  if (listener instanceof Python3Listener) {
    listener.enterExpr(this);
  }
};
ExprContext.prototype.exitRule = function (listener) {
  if (listener instanceof Python3Listener) {
    listener.exitExpr(this);
  }
};
ExprContext.prototype.accept = function (visitor) {
  if (visitor instanceof Python3Visitor) {
    return visitor.visitExpr(this);
  } else {
    return visitor.visitChildren(this);
  }
};
Python3Parser.ExprContext = ExprContext;
Python3Parser.prototype.expr = function () {
  var localctx = new ExprContext(this, this._ctx, this.state);
  this.enterRule(localctx, 118, Python3Parser.RULE_expr);
  var _la = 0; // Token type
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 774;
    this.xor_expr();
    this.state = 779;
    this._errHandler.sync(this);
    _la = this._input.LA(1);
    while (_la === Python3Parser.OR_OP) {
      this.state = 775;
      this.match(Python3Parser.OR_OP);
      this.state = 776;
      this.xor_expr();
      this.state = 781;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
    }
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};
function Xor_exprContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null;
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = Python3Parser.RULE_xor_expr;
  return this;
}
Xor_exprContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Xor_exprContext.prototype.constructor = Xor_exprContext;
Xor_exprContext.prototype.and_expr = function (i) {
  if (i === undefined) {
    i = null;
  }
  if (i === null) {
    return this.getTypedRuleContexts(And_exprContext);
  } else {
    return this.getTypedRuleContext(And_exprContext, i);
  }
};
Xor_exprContext.prototype.XOR = function (i) {
  if (i === undefined) {
    i = null;
  }
  if (i === null) {
    return this.getTokens(Python3Parser.XOR);
  } else {
    return this.getToken(Python3Parser.XOR, i);
  }
};
Xor_exprContext.prototype.enterRule = function (listener) {
  if (listener instanceof Python3Listener) {
    listener.enterXor_expr(this);
  }
};
Xor_exprContext.prototype.exitRule = function (listener) {
  if (listener instanceof Python3Listener) {
    listener.exitXor_expr(this);
  }
};
Xor_exprContext.prototype.accept = function (visitor) {
  if (visitor instanceof Python3Visitor) {
    return visitor.visitXor_expr(this);
  } else {
    return visitor.visitChildren(this);
  }
};
Python3Parser.Xor_exprContext = Xor_exprContext;
Python3Parser.prototype.xor_expr = function () {
  var localctx = new Xor_exprContext(this, this._ctx, this.state);
  this.enterRule(localctx, 120, Python3Parser.RULE_xor_expr);
  var _la = 0; // Token type
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 782;
    this.and_expr();
    this.state = 787;
    this._errHandler.sync(this);
    _la = this._input.LA(1);
    while (_la === Python3Parser.XOR) {
      this.state = 783;
      this.match(Python3Parser.XOR);
      this.state = 784;
      this.and_expr();
      this.state = 789;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
    }
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};
function And_exprContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null;
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = Python3Parser.RULE_and_expr;
  return this;
}
And_exprContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
And_exprContext.prototype.constructor = And_exprContext;
And_exprContext.prototype.shift_expr = function (i) {
  if (i === undefined) {
    i = null;
  }
  if (i === null) {
    return this.getTypedRuleContexts(Shift_exprContext);
  } else {
    return this.getTypedRuleContext(Shift_exprContext, i);
  }
};
And_exprContext.prototype.AND_OP = function (i) {
  if (i === undefined) {
    i = null;
  }
  if (i === null) {
    return this.getTokens(Python3Parser.AND_OP);
  } else {
    return this.getToken(Python3Parser.AND_OP, i);
  }
};
And_exprContext.prototype.enterRule = function (listener) {
  if (listener instanceof Python3Listener) {
    listener.enterAnd_expr(this);
  }
};
And_exprContext.prototype.exitRule = function (listener) {
  if (listener instanceof Python3Listener) {
    listener.exitAnd_expr(this);
  }
};
And_exprContext.prototype.accept = function (visitor) {
  if (visitor instanceof Python3Visitor) {
    return visitor.visitAnd_expr(this);
  } else {
    return visitor.visitChildren(this);
  }
};
Python3Parser.And_exprContext = And_exprContext;
Python3Parser.prototype.and_expr = function () {
  var localctx = new And_exprContext(this, this._ctx, this.state);
  this.enterRule(localctx, 122, Python3Parser.RULE_and_expr);
  var _la = 0; // Token type
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 790;
    this.shift_expr();
    this.state = 795;
    this._errHandler.sync(this);
    _la = this._input.LA(1);
    while (_la === Python3Parser.AND_OP) {
      this.state = 791;
      this.match(Python3Parser.AND_OP);
      this.state = 792;
      this.shift_expr();
      this.state = 797;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
    }
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};
function Shift_exprContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null;
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = Python3Parser.RULE_shift_expr;
  return this;
}
Shift_exprContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Shift_exprContext.prototype.constructor = Shift_exprContext;
Shift_exprContext.prototype.arith_expr = function (i) {
  if (i === undefined) {
    i = null;
  }
  if (i === null) {
    return this.getTypedRuleContexts(Arith_exprContext);
  } else {
    return this.getTypedRuleContext(Arith_exprContext, i);
  }
};
Shift_exprContext.prototype.LEFT_SHIFT = function (i) {
  if (i === undefined) {
    i = null;
  }
  if (i === null) {
    return this.getTokens(Python3Parser.LEFT_SHIFT);
  } else {
    return this.getToken(Python3Parser.LEFT_SHIFT, i);
  }
};
Shift_exprContext.prototype.RIGHT_SHIFT = function (i) {
  if (i === undefined) {
    i = null;
  }
  if (i === null) {
    return this.getTokens(Python3Parser.RIGHT_SHIFT);
  } else {
    return this.getToken(Python3Parser.RIGHT_SHIFT, i);
  }
};
Shift_exprContext.prototype.enterRule = function (listener) {
  if (listener instanceof Python3Listener) {
    listener.enterShift_expr(this);
  }
};
Shift_exprContext.prototype.exitRule = function (listener) {
  if (listener instanceof Python3Listener) {
    listener.exitShift_expr(this);
  }
};
Shift_exprContext.prototype.accept = function (visitor) {
  if (visitor instanceof Python3Visitor) {
    return visitor.visitShift_expr(this);
  } else {
    return visitor.visitChildren(this);
  }
};
Python3Parser.Shift_exprContext = Shift_exprContext;
Python3Parser.prototype.shift_expr = function () {
  var localctx = new Shift_exprContext(this, this._ctx, this.state);
  this.enterRule(localctx, 124, Python3Parser.RULE_shift_expr);
  var _la = 0; // Token type
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 798;
    this.arith_expr();
    this.state = 805;
    this._errHandler.sync(this);
    _la = this._input.LA(1);
    while (_la === Python3Parser.LEFT_SHIFT || _la === Python3Parser.RIGHT_SHIFT) {
      this.state = 803;
      this._errHandler.sync(this);
      switch (this._input.LA(1)) {
        case Python3Parser.LEFT_SHIFT:
          this.state = 799;
          this.match(Python3Parser.LEFT_SHIFT);
          this.state = 800;
          this.arith_expr();
          break;
        case Python3Parser.RIGHT_SHIFT:
          this.state = 801;
          this.match(Python3Parser.RIGHT_SHIFT);
          this.state = 802;
          this.arith_expr();
          break;
        default:
          throw new antlr4.error.NoViableAltException(this);
      }
      this.state = 807;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
    }
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};
function Arith_exprContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null;
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = Python3Parser.RULE_arith_expr;
  return this;
}
Arith_exprContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Arith_exprContext.prototype.constructor = Arith_exprContext;
Arith_exprContext.prototype.term = function (i) {
  if (i === undefined) {
    i = null;
  }
  if (i === null) {
    return this.getTypedRuleContexts(TermContext);
  } else {
    return this.getTypedRuleContext(TermContext, i);
  }
};
Arith_exprContext.prototype.ADD = function (i) {
  if (i === undefined) {
    i = null;
  }
  if (i === null) {
    return this.getTokens(Python3Parser.ADD);
  } else {
    return this.getToken(Python3Parser.ADD, i);
  }
};
Arith_exprContext.prototype.MINUS = function (i) {
  if (i === undefined) {
    i = null;
  }
  if (i === null) {
    return this.getTokens(Python3Parser.MINUS);
  } else {
    return this.getToken(Python3Parser.MINUS, i);
  }
};
Arith_exprContext.prototype.enterRule = function (listener) {
  if (listener instanceof Python3Listener) {
    listener.enterArith_expr(this);
  }
};
Arith_exprContext.prototype.exitRule = function (listener) {
  if (listener instanceof Python3Listener) {
    listener.exitArith_expr(this);
  }
};
Arith_exprContext.prototype.accept = function (visitor) {
  if (visitor instanceof Python3Visitor) {
    return visitor.visitArith_expr(this);
  } else {
    return visitor.visitChildren(this);
  }
};
Python3Parser.Arith_exprContext = Arith_exprContext;
Python3Parser.prototype.arith_expr = function () {
  var localctx = new Arith_exprContext(this, this._ctx, this.state);
  this.enterRule(localctx, 126, Python3Parser.RULE_arith_expr);
  var _la = 0; // Token type
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 808;
    this.term();
    this.state = 815;
    this._errHandler.sync(this);
    _la = this._input.LA(1);
    while (_la === Python3Parser.ADD || _la === Python3Parser.MINUS) {
      this.state = 813;
      this._errHandler.sync(this);
      switch (this._input.LA(1)) {
        case Python3Parser.ADD:
          this.state = 809;
          this.match(Python3Parser.ADD);
          this.state = 810;
          this.term();
          break;
        case Python3Parser.MINUS:
          this.state = 811;
          this.match(Python3Parser.MINUS);
          this.state = 812;
          this.term();
          break;
        default:
          throw new antlr4.error.NoViableAltException(this);
      }
      this.state = 817;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
    }
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};
function TermContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null;
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = Python3Parser.RULE_term;
  return this;
}
TermContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TermContext.prototype.constructor = TermContext;
TermContext.prototype.factor = function (i) {
  if (i === undefined) {
    i = null;
  }
  if (i === null) {
    return this.getTypedRuleContexts(FactorContext);
  } else {
    return this.getTypedRuleContext(FactorContext, i);
  }
};
TermContext.prototype.STAR = function (i) {
  if (i === undefined) {
    i = null;
  }
  if (i === null) {
    return this.getTokens(Python3Parser.STAR);
  } else {
    return this.getToken(Python3Parser.STAR, i);
  }
};
TermContext.prototype.DIV = function (i) {
  if (i === undefined) {
    i = null;
  }
  if (i === null) {
    return this.getTokens(Python3Parser.DIV);
  } else {
    return this.getToken(Python3Parser.DIV, i);
  }
};
TermContext.prototype.MOD = function (i) {
  if (i === undefined) {
    i = null;
  }
  if (i === null) {
    return this.getTokens(Python3Parser.MOD);
  } else {
    return this.getToken(Python3Parser.MOD, i);
  }
};
TermContext.prototype.IDIV = function (i) {
  if (i === undefined) {
    i = null;
  }
  if (i === null) {
    return this.getTokens(Python3Parser.IDIV);
  } else {
    return this.getToken(Python3Parser.IDIV, i);
  }
};
TermContext.prototype.AT = function (i) {
  if (i === undefined) {
    i = null;
  }
  if (i === null) {
    return this.getTokens(Python3Parser.AT);
  } else {
    return this.getToken(Python3Parser.AT, i);
  }
};
TermContext.prototype.enterRule = function (listener) {
  if (listener instanceof Python3Listener) {
    listener.enterTerm(this);
  }
};
TermContext.prototype.exitRule = function (listener) {
  if (listener instanceof Python3Listener) {
    listener.exitTerm(this);
  }
};
TermContext.prototype.accept = function (visitor) {
  if (visitor instanceof Python3Visitor) {
    return visitor.visitTerm(this);
  } else {
    return visitor.visitChildren(this);
  }
};
Python3Parser.TermContext = TermContext;
Python3Parser.prototype.term = function () {
  var localctx = new TermContext(this, this._ctx, this.state);
  this.enterRule(localctx, 128, Python3Parser.RULE_term);
  var _la = 0; // Token type
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 818;
    this.factor();
    this.state = 831;
    this._errHandler.sync(this);
    _la = this._input.LA(1);
    while ((_la - 48 & ~0x1f) == 0 && (1 << _la - 48 & (1 << Python3Parser.STAR - 48 | 1 << Python3Parser.DIV - 48 | 1 << Python3Parser.MOD - 48 | 1 << Python3Parser.IDIV - 48 | 1 << Python3Parser.AT - 48)) !== 0) {
      this.state = 829;
      this._errHandler.sync(this);
      switch (this._input.LA(1)) {
        case Python3Parser.STAR:
          this.state = 819;
          this.match(Python3Parser.STAR);
          this.state = 820;
          this.factor();
          break;
        case Python3Parser.DIV:
          this.state = 821;
          this.match(Python3Parser.DIV);
          this.state = 822;
          this.factor();
          break;
        case Python3Parser.MOD:
          this.state = 823;
          this.match(Python3Parser.MOD);
          this.state = 824;
          this.factor();
          break;
        case Python3Parser.IDIV:
          this.state = 825;
          this.match(Python3Parser.IDIV);
          this.state = 826;
          this.factor();
          break;
        case Python3Parser.AT:
          this.state = 827;
          this.match(Python3Parser.AT);
          this.state = 828;
          this.factor();
          break;
        default:
          throw new antlr4.error.NoViableAltException(this);
      }
      this.state = 833;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
    }
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};
function FactorContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null;
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = Python3Parser.RULE_factor;
  return this;
}
FactorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FactorContext.prototype.constructor = FactorContext;
FactorContext.prototype.ADD = function () {
  return this.getToken(Python3Parser.ADD, 0);
};
FactorContext.prototype.factor = function () {
  return this.getTypedRuleContext(FactorContext, 0);
};
FactorContext.prototype.MINUS = function () {
  return this.getToken(Python3Parser.MINUS, 0);
};
FactorContext.prototype.NOT_OP = function () {
  return this.getToken(Python3Parser.NOT_OP, 0);
};
FactorContext.prototype.power = function () {
  return this.getTypedRuleContext(PowerContext, 0);
};
FactorContext.prototype.enterRule = function (listener) {
  if (listener instanceof Python3Listener) {
    listener.enterFactor(this);
  }
};
FactorContext.prototype.exitRule = function (listener) {
  if (listener instanceof Python3Listener) {
    listener.exitFactor(this);
  }
};
FactorContext.prototype.accept = function (visitor) {
  if (visitor instanceof Python3Visitor) {
    return visitor.visitFactor(this);
  } else {
    return visitor.visitChildren(this);
  }
};
Python3Parser.FactorContext = FactorContext;
Python3Parser.prototype.factor = function () {
  var localctx = new FactorContext(this, this._ctx, this.state);
  this.enterRule(localctx, 130, Python3Parser.RULE_factor);
  try {
    this.state = 841;
    this._errHandler.sync(this);
    switch (this._input.LA(1)) {
      case Python3Parser.ADD:
        this.enterOuterAlt(localctx, 1);
        this.state = 834;
        this.match(Python3Parser.ADD);
        this.state = 835;
        this.factor();
        break;
      case Python3Parser.MINUS:
        this.enterOuterAlt(localctx, 2);
        this.state = 836;
        this.match(Python3Parser.MINUS);
        this.state = 837;
        this.factor();
        break;
      case Python3Parser.NOT_OP:
        this.enterOuterAlt(localctx, 3);
        this.state = 838;
        this.match(Python3Parser.NOT_OP);
        this.state = 839;
        this.factor();
        break;
      case Python3Parser.NONE:
      case Python3Parser.TRUE:
      case Python3Parser.FALSE:
      case Python3Parser.AWAIT:
      case Python3Parser.NAME:
      case Python3Parser.STRING_LITERAL:
      case Python3Parser.BYTES_LITERAL:
      case Python3Parser.DECIMAL_INTEGER:
      case Python3Parser.OCT_INTEGER:
      case Python3Parser.HEX_INTEGER:
      case Python3Parser.BIN_INTEGER:
      case Python3Parser.FLOAT_NUMBER:
      case Python3Parser.IMAG_NUMBER:
      case Python3Parser.ELLIPSIS:
      case Python3Parser.OPEN_PAREN:
      case Python3Parser.OPEN_BRACK:
      case Python3Parser.OPEN_BRACE:
        this.enterOuterAlt(localctx, 4);
        this.state = 840;
        this.power();
        break;
      default:
        throw new antlr4.error.NoViableAltException(this);
    }
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};
function PowerContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null;
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = Python3Parser.RULE_power;
  return this;
}
PowerContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PowerContext.prototype.constructor = PowerContext;
PowerContext.prototype.atom_expr = function () {
  return this.getTypedRuleContext(Atom_exprContext, 0);
};
PowerContext.prototype.trailer = function (i) {
  if (i === undefined) {
    i = null;
  }
  if (i === null) {
    return this.getTypedRuleContexts(TrailerContext);
  } else {
    return this.getTypedRuleContext(TrailerContext, i);
  }
};
PowerContext.prototype.POWER = function () {
  return this.getToken(Python3Parser.POWER, 0);
};
PowerContext.prototype.factor = function () {
  return this.getTypedRuleContext(FactorContext, 0);
};
PowerContext.prototype.enterRule = function (listener) {
  if (listener instanceof Python3Listener) {
    listener.enterPower(this);
  }
};
PowerContext.prototype.exitRule = function (listener) {
  if (listener instanceof Python3Listener) {
    listener.exitPower(this);
  }
};
PowerContext.prototype.accept = function (visitor) {
  if (visitor instanceof Python3Visitor) {
    return visitor.visitPower(this);
  } else {
    return visitor.visitChildren(this);
  }
};
Python3Parser.PowerContext = PowerContext;
Python3Parser.prototype.power = function () {
  var localctx = new PowerContext(this, this._ctx, this.state);
  this.enterRule(localctx, 132, Python3Parser.RULE_power);
  var _la = 0; // Token type
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 843;
    this.atom_expr();
    this.state = 847;
    this._errHandler.sync(this);
    _la = this._input.LA(1);
    while ((_la - 46 & ~0x1f) == 0 && (1 << _la - 46 & (1 << Python3Parser.DOT - 46 | 1 << Python3Parser.OPEN_PAREN - 46 | 1 << Python3Parser.OPEN_BRACK - 46)) !== 0) {
      this.state = 844;
      this.trailer();
      this.state = 849;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
    }
    this.state = 852;
    this._errHandler.sync(this);
    _la = this._input.LA(1);
    if (_la === Python3Parser.POWER) {
      this.state = 850;
      this.match(Python3Parser.POWER);
      this.state = 851;
      this.factor();
    }
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};
function Atom_exprContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null;
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = Python3Parser.RULE_atom_expr;
  return this;
}
Atom_exprContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Atom_exprContext.prototype.constructor = Atom_exprContext;
Atom_exprContext.prototype.atom = function () {
  return this.getTypedRuleContext(AtomContext, 0);
};
Atom_exprContext.prototype.AWAIT = function () {
  return this.getToken(Python3Parser.AWAIT, 0);
};
Atom_exprContext.prototype.trailer = function (i) {
  if (i === undefined) {
    i = null;
  }
  if (i === null) {
    return this.getTypedRuleContexts(TrailerContext);
  } else {
    return this.getTypedRuleContext(TrailerContext, i);
  }
};
Atom_exprContext.prototype.enterRule = function (listener) {
  if (listener instanceof Python3Listener) {
    listener.enterAtom_expr(this);
  }
};
Atom_exprContext.prototype.exitRule = function (listener) {
  if (listener instanceof Python3Listener) {
    listener.exitAtom_expr(this);
  }
};
Atom_exprContext.prototype.accept = function (visitor) {
  if (visitor instanceof Python3Visitor) {
    return visitor.visitAtom_expr(this);
  } else {
    return visitor.visitChildren(this);
  }
};
Python3Parser.Atom_exprContext = Atom_exprContext;
Python3Parser.prototype.atom_expr = function () {
  var localctx = new Atom_exprContext(this, this._ctx, this.state);
  this.enterRule(localctx, 134, Python3Parser.RULE_atom_expr);
  var _la = 0; // Token type
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 855;
    this._errHandler.sync(this);
    _la = this._input.LA(1);
    if (_la === Python3Parser.AWAIT) {
      this.state = 854;
      this.match(Python3Parser.AWAIT);
    }
    this.state = 857;
    this.atom();
    this.state = 861;
    this._errHandler.sync(this);
    var _alt = this._interp.adaptivePredict(this._input, 110, this._ctx);
    while (_alt != 2 && _alt != antlr4.atn.ATN.INVALID_ALT_NUMBER) {
      if (_alt === 1) {
        this.state = 858;
        this.trailer();
      }
      this.state = 863;
      this._errHandler.sync(this);
      _alt = this._interp.adaptivePredict(this._input, 110, this._ctx);
    }
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};
function AtomContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null;
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = Python3Parser.RULE_atom;
  return this;
}
AtomContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AtomContext.prototype.constructor = AtomContext;
AtomContext.prototype.OPEN_PAREN = function () {
  return this.getToken(Python3Parser.OPEN_PAREN, 0);
};
AtomContext.prototype.CLOSE_PAREN = function () {
  return this.getToken(Python3Parser.CLOSE_PAREN, 0);
};
AtomContext.prototype.yield_expr = function () {
  return this.getTypedRuleContext(Yield_exprContext, 0);
};
AtomContext.prototype.testlist_comp = function () {
  return this.getTypedRuleContext(Testlist_compContext, 0);
};
AtomContext.prototype.OPEN_BRACK = function () {
  return this.getToken(Python3Parser.OPEN_BRACK, 0);
};
AtomContext.prototype.CLOSE_BRACK = function () {
  return this.getToken(Python3Parser.CLOSE_BRACK, 0);
};
AtomContext.prototype.OPEN_BRACE = function () {
  return this.getToken(Python3Parser.OPEN_BRACE, 0);
};
AtomContext.prototype.CLOSE_BRACE = function () {
  return this.getToken(Python3Parser.CLOSE_BRACE, 0);
};
AtomContext.prototype.dictorsetmaker = function () {
  return this.getTypedRuleContext(DictorsetmakerContext, 0);
};
AtomContext.prototype.NAME = function () {
  return this.getToken(Python3Parser.NAME, 0);
};
AtomContext.prototype.number = function () {
  return this.getTypedRuleContext(NumberContext, 0);
};
AtomContext.prototype.str = function (i) {
  if (i === undefined) {
    i = null;
  }
  if (i === null) {
    return this.getTypedRuleContexts(StrContext);
  } else {
    return this.getTypedRuleContext(StrContext, i);
  }
};
AtomContext.prototype.ELLIPSIS = function () {
  return this.getToken(Python3Parser.ELLIPSIS, 0);
};
AtomContext.prototype.NONE = function () {
  return this.getToken(Python3Parser.NONE, 0);
};
AtomContext.prototype.TRUE = function () {
  return this.getToken(Python3Parser.TRUE, 0);
};
AtomContext.prototype.FALSE = function () {
  return this.getToken(Python3Parser.FALSE, 0);
};
AtomContext.prototype.enterRule = function (listener) {
  if (listener instanceof Python3Listener) {
    listener.enterAtom(this);
  }
};
AtomContext.prototype.exitRule = function (listener) {
  if (listener instanceof Python3Listener) {
    listener.exitAtom(this);
  }
};
AtomContext.prototype.accept = function (visitor) {
  if (visitor instanceof Python3Visitor) {
    return visitor.visitAtom(this);
  } else {
    return visitor.visitChildren(this);
  }
};
Python3Parser.AtomContext = AtomContext;
Python3Parser.prototype.atom = function () {
  var localctx = new AtomContext(this, this._ctx, this.state);
  this.enterRule(localctx, 136, Python3Parser.RULE_atom);
  var _la = 0; // Token type
  try {
    this.state = 891;
    this._errHandler.sync(this);
    switch (this._input.LA(1)) {
      case Python3Parser.OPEN_PAREN:
        this.enterOuterAlt(localctx, 1);
        this.state = 864;
        this.match(Python3Parser.OPEN_PAREN);
        this.state = 867;
        this._errHandler.sync(this);
        switch (this._input.LA(1)) {
          case Python3Parser.YIELD:
            this.state = 865;
            this.yield_expr();
            break;
          case Python3Parser.LAMBDA:
          case Python3Parser.NOT:
          case Python3Parser.NONE:
          case Python3Parser.TRUE:
          case Python3Parser.FALSE:
          case Python3Parser.AWAIT:
          case Python3Parser.NAME:
          case Python3Parser.STRING_LITERAL:
          case Python3Parser.BYTES_LITERAL:
          case Python3Parser.DECIMAL_INTEGER:
          case Python3Parser.OCT_INTEGER:
          case Python3Parser.HEX_INTEGER:
          case Python3Parser.BIN_INTEGER:
          case Python3Parser.FLOAT_NUMBER:
          case Python3Parser.IMAG_NUMBER:
          case Python3Parser.ELLIPSIS:
          case Python3Parser.STAR:
          case Python3Parser.OPEN_PAREN:
          case Python3Parser.OPEN_BRACK:
          case Python3Parser.ADD:
          case Python3Parser.MINUS:
          case Python3Parser.NOT_OP:
          case Python3Parser.OPEN_BRACE:
            this.state = 866;
            this.testlist_comp();
            break;
          case Python3Parser.CLOSE_PAREN:
            break;
          default:
            break;
        }
        this.state = 869;
        this.match(Python3Parser.CLOSE_PAREN);
        break;
      case Python3Parser.OPEN_BRACK:
        this.enterOuterAlt(localctx, 2);
        this.state = 870;
        this.match(Python3Parser.OPEN_BRACK);
        this.state = 872;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if ((_la - 20 & ~0x1f) == 0 && (1 << _la - 20 & (1 << Python3Parser.LAMBDA - 20 | 1 << Python3Parser.NOT - 20 | 1 << Python3Parser.NONE - 20 | 1 << Python3Parser.TRUE - 20 | 1 << Python3Parser.FALSE - 20 | 1 << Python3Parser.AWAIT - 20 | 1 << Python3Parser.NAME - 20 | 1 << Python3Parser.STRING_LITERAL - 20 | 1 << Python3Parser.BYTES_LITERAL - 20 | 1 << Python3Parser.DECIMAL_INTEGER - 20 | 1 << Python3Parser.OCT_INTEGER - 20 | 1 << Python3Parser.HEX_INTEGER - 20 | 1 << Python3Parser.BIN_INTEGER - 20 | 1 << Python3Parser.FLOAT_NUMBER - 20 | 1 << Python3Parser.IMAG_NUMBER - 20 | 1 << Python3Parser.ELLIPSIS - 20 | 1 << Python3Parser.STAR - 20 | 1 << Python3Parser.OPEN_PAREN - 20)) !== 0 || (_la - 56 & ~0x1f) == 0 && (1 << _la - 56 & (1 << Python3Parser.OPEN_BRACK - 56 | 1 << Python3Parser.ADD - 56 | 1 << Python3Parser.MINUS - 56 | 1 << Python3Parser.NOT_OP - 56 | 1 << Python3Parser.OPEN_BRACE - 56)) !== 0) {
          this.state = 871;
          this.testlist_comp();
        }
        this.state = 874;
        this.match(Python3Parser.CLOSE_BRACK);
        break;
      case Python3Parser.OPEN_BRACE:
        this.enterOuterAlt(localctx, 3);
        this.state = 875;
        this.match(Python3Parser.OPEN_BRACE);
        this.state = 877;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if ((_la - 20 & ~0x1f) == 0 && (1 << _la - 20 & (1 << Python3Parser.LAMBDA - 20 | 1 << Python3Parser.NOT - 20 | 1 << Python3Parser.NONE - 20 | 1 << Python3Parser.TRUE - 20 | 1 << Python3Parser.FALSE - 20 | 1 << Python3Parser.AWAIT - 20 | 1 << Python3Parser.NAME - 20 | 1 << Python3Parser.STRING_LITERAL - 20 | 1 << Python3Parser.BYTES_LITERAL - 20 | 1 << Python3Parser.DECIMAL_INTEGER - 20 | 1 << Python3Parser.OCT_INTEGER - 20 | 1 << Python3Parser.HEX_INTEGER - 20 | 1 << Python3Parser.BIN_INTEGER - 20 | 1 << Python3Parser.FLOAT_NUMBER - 20 | 1 << Python3Parser.IMAG_NUMBER - 20 | 1 << Python3Parser.ELLIPSIS - 20 | 1 << Python3Parser.STAR - 20 | 1 << Python3Parser.OPEN_PAREN - 20)) !== 0 || (_la - 56 & ~0x1f) == 0 && (1 << _la - 56 & (1 << Python3Parser.OPEN_BRACK - 56 | 1 << Python3Parser.ADD - 56 | 1 << Python3Parser.MINUS - 56 | 1 << Python3Parser.NOT_OP - 56 | 1 << Python3Parser.OPEN_BRACE - 56)) !== 0) {
          this.state = 876;
          this.dictorsetmaker();
        }
        this.state = 879;
        this.match(Python3Parser.CLOSE_BRACE);
        break;
      case Python3Parser.NAME:
        this.enterOuterAlt(localctx, 4);
        this.state = 880;
        this.match(Python3Parser.NAME);
        break;
      case Python3Parser.DECIMAL_INTEGER:
      case Python3Parser.OCT_INTEGER:
      case Python3Parser.HEX_INTEGER:
      case Python3Parser.BIN_INTEGER:
      case Python3Parser.FLOAT_NUMBER:
      case Python3Parser.IMAG_NUMBER:
        this.enterOuterAlt(localctx, 5);
        this.state = 881;
        this.number();
        break;
      case Python3Parser.STRING_LITERAL:
      case Python3Parser.BYTES_LITERAL:
        this.enterOuterAlt(localctx, 6);
        this.state = 883;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
          this.state = 882;
          this.str();
          this.state = 885;
          this._errHandler.sync(this);
          _la = this._input.LA(1);
        } while (_la === Python3Parser.STRING_LITERAL || _la === Python3Parser.BYTES_LITERAL);
        break;
      case Python3Parser.ELLIPSIS:
        this.enterOuterAlt(localctx, 7);
        this.state = 887;
        this.match(Python3Parser.ELLIPSIS);
        break;
      case Python3Parser.NONE:
        this.enterOuterAlt(localctx, 8);
        this.state = 888;
        this.match(Python3Parser.NONE);
        break;
      case Python3Parser.TRUE:
        this.enterOuterAlt(localctx, 9);
        this.state = 889;
        this.match(Python3Parser.TRUE);
        break;
      case Python3Parser.FALSE:
        this.enterOuterAlt(localctx, 10);
        this.state = 890;
        this.match(Python3Parser.FALSE);
        break;
      default:
        throw new antlr4.error.NoViableAltException(this);
    }
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};
function Testlist_compContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null;
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = Python3Parser.RULE_testlist_comp;
  return this;
}
Testlist_compContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Testlist_compContext.prototype.constructor = Testlist_compContext;
Testlist_compContext.prototype.test = function (i) {
  if (i === undefined) {
    i = null;
  }
  if (i === null) {
    return this.getTypedRuleContexts(TestContext);
  } else {
    return this.getTypedRuleContext(TestContext, i);
  }
};
Testlist_compContext.prototype.comp_for = function () {
  return this.getTypedRuleContext(Comp_forContext, 0);
};
Testlist_compContext.prototype.COMMA = function (i) {
  if (i === undefined) {
    i = null;
  }
  if (i === null) {
    return this.getTokens(Python3Parser.COMMA);
  } else {
    return this.getToken(Python3Parser.COMMA, i);
  }
};
Testlist_compContext.prototype.enterRule = function (listener) {
  if (listener instanceof Python3Listener) {
    listener.enterTestlist_comp(this);
  }
};
Testlist_compContext.prototype.exitRule = function (listener) {
  if (listener instanceof Python3Listener) {
    listener.exitTestlist_comp(this);
  }
};
Testlist_compContext.prototype.accept = function (visitor) {
  if (visitor instanceof Python3Visitor) {
    return visitor.visitTestlist_comp(this);
  } else {
    return visitor.visitChildren(this);
  }
};
Python3Parser.Testlist_compContext = Testlist_compContext;
Python3Parser.prototype.testlist_comp = function () {
  var localctx = new Testlist_compContext(this, this._ctx, this.state);
  this.enterRule(localctx, 138, Python3Parser.RULE_testlist_comp);
  var _la = 0; // Token type
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 893;
    this.test();
    this.state = 905;
    this._errHandler.sync(this);
    switch (this._input.LA(1)) {
      case Python3Parser.FOR:
      case Python3Parser.ASYNC:
        this.state = 894;
        this.comp_for();
        break;
      case Python3Parser.CLOSE_PAREN:
      case Python3Parser.COMMA:
      case Python3Parser.CLOSE_BRACK:
        this.state = 899;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input, 116, this._ctx);
        while (_alt != 2 && _alt != antlr4.atn.ATN.INVALID_ALT_NUMBER) {
          if (_alt === 1) {
            this.state = 895;
            this.match(Python3Parser.COMMA);
            this.state = 896;
            this.test();
          }
          this.state = 901;
          this._errHandler.sync(this);
          _alt = this._interp.adaptivePredict(this._input, 116, this._ctx);
        }
        this.state = 903;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if (_la === Python3Parser.COMMA) {
          this.state = 902;
          this.match(Python3Parser.COMMA);
        }
        break;
      default:
        throw new antlr4.error.NoViableAltException(this);
    }
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};
function TrailerContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null;
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = Python3Parser.RULE_trailer;
  return this;
}
TrailerContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TrailerContext.prototype.constructor = TrailerContext;
TrailerContext.prototype.OPEN_PAREN = function () {
  return this.getToken(Python3Parser.OPEN_PAREN, 0);
};
TrailerContext.prototype.CLOSE_PAREN = function () {
  return this.getToken(Python3Parser.CLOSE_PAREN, 0);
};
TrailerContext.prototype.arglist = function () {
  return this.getTypedRuleContext(ArglistContext, 0);
};
TrailerContext.prototype.OPEN_BRACK = function () {
  return this.getToken(Python3Parser.OPEN_BRACK, 0);
};
TrailerContext.prototype.subscriptlist = function () {
  return this.getTypedRuleContext(SubscriptlistContext, 0);
};
TrailerContext.prototype.CLOSE_BRACK = function () {
  return this.getToken(Python3Parser.CLOSE_BRACK, 0);
};
TrailerContext.prototype.DOT = function () {
  return this.getToken(Python3Parser.DOT, 0);
};
TrailerContext.prototype.NAME = function () {
  return this.getToken(Python3Parser.NAME, 0);
};
TrailerContext.prototype.enterRule = function (listener) {
  if (listener instanceof Python3Listener) {
    listener.enterTrailer(this);
  }
};
TrailerContext.prototype.exitRule = function (listener) {
  if (listener instanceof Python3Listener) {
    listener.exitTrailer(this);
  }
};
TrailerContext.prototype.accept = function (visitor) {
  if (visitor instanceof Python3Visitor) {
    return visitor.visitTrailer(this);
  } else {
    return visitor.visitChildren(this);
  }
};
Python3Parser.TrailerContext = TrailerContext;
Python3Parser.prototype.trailer = function () {
  var localctx = new TrailerContext(this, this._ctx, this.state);
  this.enterRule(localctx, 140, Python3Parser.RULE_trailer);
  var _la = 0; // Token type
  try {
    this.state = 918;
    this._errHandler.sync(this);
    switch (this._input.LA(1)) {
      case Python3Parser.OPEN_PAREN:
        this.enterOuterAlt(localctx, 1);
        this.state = 907;
        this.match(Python3Parser.OPEN_PAREN);
        this.state = 909;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if ((_la - 20 & ~0x1f) == 0 && (1 << _la - 20 & (1 << Python3Parser.LAMBDA - 20 | 1 << Python3Parser.NOT - 20 | 1 << Python3Parser.NONE - 20 | 1 << Python3Parser.TRUE - 20 | 1 << Python3Parser.FALSE - 20 | 1 << Python3Parser.AWAIT - 20 | 1 << Python3Parser.NAME - 20 | 1 << Python3Parser.STRING_LITERAL - 20 | 1 << Python3Parser.BYTES_LITERAL - 20 | 1 << Python3Parser.DECIMAL_INTEGER - 20 | 1 << Python3Parser.OCT_INTEGER - 20 | 1 << Python3Parser.HEX_INTEGER - 20 | 1 << Python3Parser.BIN_INTEGER - 20 | 1 << Python3Parser.FLOAT_NUMBER - 20 | 1 << Python3Parser.IMAG_NUMBER - 20 | 1 << Python3Parser.ELLIPSIS - 20 | 1 << Python3Parser.STAR - 20 | 1 << Python3Parser.OPEN_PAREN - 20)) !== 0 || (_la - 54 & ~0x1f) == 0 && (1 << _la - 54 & (1 << Python3Parser.POWER - 54 | 1 << Python3Parser.OPEN_BRACK - 54 | 1 << Python3Parser.ADD - 54 | 1 << Python3Parser.MINUS - 54 | 1 << Python3Parser.NOT_OP - 54 | 1 << Python3Parser.OPEN_BRACE - 54)) !== 0) {
          this.state = 908;
          this.arglist();
        }
        this.state = 911;
        this.match(Python3Parser.CLOSE_PAREN);
        break;
      case Python3Parser.OPEN_BRACK:
        this.enterOuterAlt(localctx, 2);
        this.state = 912;
        this.match(Python3Parser.OPEN_BRACK);
        this.state = 913;
        this.subscriptlist();
        this.state = 914;
        this.match(Python3Parser.CLOSE_BRACK);
        break;
      case Python3Parser.DOT:
        this.enterOuterAlt(localctx, 3);
        this.state = 916;
        this.match(Python3Parser.DOT);
        this.state = 917;
        this.match(Python3Parser.NAME);
        break;
      default:
        throw new antlr4.error.NoViableAltException(this);
    }
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};
function SubscriptlistContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null;
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = Python3Parser.RULE_subscriptlist;
  return this;
}
SubscriptlistContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SubscriptlistContext.prototype.constructor = SubscriptlistContext;
SubscriptlistContext.prototype.subscript = function (i) {
  if (i === undefined) {
    i = null;
  }
  if (i === null) {
    return this.getTypedRuleContexts(SubscriptContext);
  } else {
    return this.getTypedRuleContext(SubscriptContext, i);
  }
};
SubscriptlistContext.prototype.COMMA = function (i) {
  if (i === undefined) {
    i = null;
  }
  if (i === null) {
    return this.getTokens(Python3Parser.COMMA);
  } else {
    return this.getToken(Python3Parser.COMMA, i);
  }
};
SubscriptlistContext.prototype.enterRule = function (listener) {
  if (listener instanceof Python3Listener) {
    listener.enterSubscriptlist(this);
  }
};
SubscriptlistContext.prototype.exitRule = function (listener) {
  if (listener instanceof Python3Listener) {
    listener.exitSubscriptlist(this);
  }
};
SubscriptlistContext.prototype.accept = function (visitor) {
  if (visitor instanceof Python3Visitor) {
    return visitor.visitSubscriptlist(this);
  } else {
    return visitor.visitChildren(this);
  }
};
Python3Parser.SubscriptlistContext = SubscriptlistContext;
Python3Parser.prototype.subscriptlist = function () {
  var localctx = new SubscriptlistContext(this, this._ctx, this.state);
  this.enterRule(localctx, 142, Python3Parser.RULE_subscriptlist);
  var _la = 0; // Token type
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 920;
    this.subscript();
    this.state = 925;
    this._errHandler.sync(this);
    var _alt = this._interp.adaptivePredict(this._input, 121, this._ctx);
    while (_alt != 2 && _alt != antlr4.atn.ATN.INVALID_ALT_NUMBER) {
      if (_alt === 1) {
        this.state = 921;
        this.match(Python3Parser.COMMA);
        this.state = 922;
        this.subscript();
      }
      this.state = 927;
      this._errHandler.sync(this);
      _alt = this._interp.adaptivePredict(this._input, 121, this._ctx);
    }
    this.state = 929;
    this._errHandler.sync(this);
    _la = this._input.LA(1);
    if (_la === Python3Parser.COMMA) {
      this.state = 928;
      this.match(Python3Parser.COMMA);
    }
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};
function SubscriptContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null;
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = Python3Parser.RULE_subscript;
  return this;
}
SubscriptContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SubscriptContext.prototype.constructor = SubscriptContext;
SubscriptContext.prototype.test = function (i) {
  if (i === undefined) {
    i = null;
  }
  if (i === null) {
    return this.getTypedRuleContexts(TestContext);
  } else {
    return this.getTypedRuleContext(TestContext, i);
  }
};
SubscriptContext.prototype.COLON = function () {
  return this.getToken(Python3Parser.COLON, 0);
};
SubscriptContext.prototype.sliceop = function () {
  return this.getTypedRuleContext(SliceopContext, 0);
};
SubscriptContext.prototype.enterRule = function (listener) {
  if (listener instanceof Python3Listener) {
    listener.enterSubscript(this);
  }
};
SubscriptContext.prototype.exitRule = function (listener) {
  if (listener instanceof Python3Listener) {
    listener.exitSubscript(this);
  }
};
SubscriptContext.prototype.accept = function (visitor) {
  if (visitor instanceof Python3Visitor) {
    return visitor.visitSubscript(this);
  } else {
    return visitor.visitChildren(this);
  }
};
Python3Parser.SubscriptContext = SubscriptContext;
Python3Parser.prototype.subscript = function () {
  var localctx = new SubscriptContext(this, this._ctx, this.state);
  this.enterRule(localctx, 144, Python3Parser.RULE_subscript);
  var _la = 0; // Token type
  try {
    this.state = 942;
    this._errHandler.sync(this);
    var la_ = this._interp.adaptivePredict(this._input, 126, this._ctx);
    switch (la_) {
      case 1:
        this.enterOuterAlt(localctx, 1);
        this.state = 931;
        this.test();
        break;
      case 2:
        this.enterOuterAlt(localctx, 2);
        this.state = 933;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if ((_la - 20 & ~0x1f) == 0 && (1 << _la - 20 & (1 << Python3Parser.LAMBDA - 20 | 1 << Python3Parser.NOT - 20 | 1 << Python3Parser.NONE - 20 | 1 << Python3Parser.TRUE - 20 | 1 << Python3Parser.FALSE - 20 | 1 << Python3Parser.AWAIT - 20 | 1 << Python3Parser.NAME - 20 | 1 << Python3Parser.STRING_LITERAL - 20 | 1 << Python3Parser.BYTES_LITERAL - 20 | 1 << Python3Parser.DECIMAL_INTEGER - 20 | 1 << Python3Parser.OCT_INTEGER - 20 | 1 << Python3Parser.HEX_INTEGER - 20 | 1 << Python3Parser.BIN_INTEGER - 20 | 1 << Python3Parser.FLOAT_NUMBER - 20 | 1 << Python3Parser.IMAG_NUMBER - 20 | 1 << Python3Parser.ELLIPSIS - 20 | 1 << Python3Parser.STAR - 20 | 1 << Python3Parser.OPEN_PAREN - 20)) !== 0 || (_la - 56 & ~0x1f) == 0 && (1 << _la - 56 & (1 << Python3Parser.OPEN_BRACK - 56 | 1 << Python3Parser.ADD - 56 | 1 << Python3Parser.MINUS - 56 | 1 << Python3Parser.NOT_OP - 56 | 1 << Python3Parser.OPEN_BRACE - 56)) !== 0) {
          this.state = 932;
          this.test();
        }
        this.state = 935;
        this.match(Python3Parser.COLON);
        this.state = 937;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if ((_la - 20 & ~0x1f) == 0 && (1 << _la - 20 & (1 << Python3Parser.LAMBDA - 20 | 1 << Python3Parser.NOT - 20 | 1 << Python3Parser.NONE - 20 | 1 << Python3Parser.TRUE - 20 | 1 << Python3Parser.FALSE - 20 | 1 << Python3Parser.AWAIT - 20 | 1 << Python3Parser.NAME - 20 | 1 << Python3Parser.STRING_LITERAL - 20 | 1 << Python3Parser.BYTES_LITERAL - 20 | 1 << Python3Parser.DECIMAL_INTEGER - 20 | 1 << Python3Parser.OCT_INTEGER - 20 | 1 << Python3Parser.HEX_INTEGER - 20 | 1 << Python3Parser.BIN_INTEGER - 20 | 1 << Python3Parser.FLOAT_NUMBER - 20 | 1 << Python3Parser.IMAG_NUMBER - 20 | 1 << Python3Parser.ELLIPSIS - 20 | 1 << Python3Parser.STAR - 20 | 1 << Python3Parser.OPEN_PAREN - 20)) !== 0 || (_la - 56 & ~0x1f) == 0 && (1 << _la - 56 & (1 << Python3Parser.OPEN_BRACK - 56 | 1 << Python3Parser.ADD - 56 | 1 << Python3Parser.MINUS - 56 | 1 << Python3Parser.NOT_OP - 56 | 1 << Python3Parser.OPEN_BRACE - 56)) !== 0) {
          this.state = 936;
          this.test();
        }
        this.state = 940;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if (_la === Python3Parser.COLON) {
          this.state = 939;
          this.sliceop();
        }
        break;
    }
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};
function SliceopContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null;
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = Python3Parser.RULE_sliceop;
  return this;
}
SliceopContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SliceopContext.prototype.constructor = SliceopContext;
SliceopContext.prototype.COLON = function () {
  return this.getToken(Python3Parser.COLON, 0);
};
SliceopContext.prototype.test = function () {
  return this.getTypedRuleContext(TestContext, 0);
};
SliceopContext.prototype.enterRule = function (listener) {
  if (listener instanceof Python3Listener) {
    listener.enterSliceop(this);
  }
};
SliceopContext.prototype.exitRule = function (listener) {
  if (listener instanceof Python3Listener) {
    listener.exitSliceop(this);
  }
};
SliceopContext.prototype.accept = function (visitor) {
  if (visitor instanceof Python3Visitor) {
    return visitor.visitSliceop(this);
  } else {
    return visitor.visitChildren(this);
  }
};
Python3Parser.SliceopContext = SliceopContext;
Python3Parser.prototype.sliceop = function () {
  var localctx = new SliceopContext(this, this._ctx, this.state);
  this.enterRule(localctx, 146, Python3Parser.RULE_sliceop);
  var _la = 0; // Token type
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 944;
    this.match(Python3Parser.COLON);
    this.state = 946;
    this._errHandler.sync(this);
    _la = this._input.LA(1);
    if ((_la - 20 & ~0x1f) == 0 && (1 << _la - 20 & (1 << Python3Parser.LAMBDA - 20 | 1 << Python3Parser.NOT - 20 | 1 << Python3Parser.NONE - 20 | 1 << Python3Parser.TRUE - 20 | 1 << Python3Parser.FALSE - 20 | 1 << Python3Parser.AWAIT - 20 | 1 << Python3Parser.NAME - 20 | 1 << Python3Parser.STRING_LITERAL - 20 | 1 << Python3Parser.BYTES_LITERAL - 20 | 1 << Python3Parser.DECIMAL_INTEGER - 20 | 1 << Python3Parser.OCT_INTEGER - 20 | 1 << Python3Parser.HEX_INTEGER - 20 | 1 << Python3Parser.BIN_INTEGER - 20 | 1 << Python3Parser.FLOAT_NUMBER - 20 | 1 << Python3Parser.IMAG_NUMBER - 20 | 1 << Python3Parser.ELLIPSIS - 20 | 1 << Python3Parser.STAR - 20 | 1 << Python3Parser.OPEN_PAREN - 20)) !== 0 || (_la - 56 & ~0x1f) == 0 && (1 << _la - 56 & (1 << Python3Parser.OPEN_BRACK - 56 | 1 << Python3Parser.ADD - 56 | 1 << Python3Parser.MINUS - 56 | 1 << Python3Parser.NOT_OP - 56 | 1 << Python3Parser.OPEN_BRACE - 56)) !== 0) {
      this.state = 945;
      this.test();
    }
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};
function ExprlistContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null;
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = Python3Parser.RULE_exprlist;
  return this;
}
ExprlistContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExprlistContext.prototype.constructor = ExprlistContext;
ExprlistContext.prototype.star_expr = function (i) {
  if (i === undefined) {
    i = null;
  }
  if (i === null) {
    return this.getTypedRuleContexts(Star_exprContext);
  } else {
    return this.getTypedRuleContext(Star_exprContext, i);
  }
};
ExprlistContext.prototype.COMMA = function (i) {
  if (i === undefined) {
    i = null;
  }
  if (i === null) {
    return this.getTokens(Python3Parser.COMMA);
  } else {
    return this.getToken(Python3Parser.COMMA, i);
  }
};
ExprlistContext.prototype.enterRule = function (listener) {
  if (listener instanceof Python3Listener) {
    listener.enterExprlist(this);
  }
};
ExprlistContext.prototype.exitRule = function (listener) {
  if (listener instanceof Python3Listener) {
    listener.exitExprlist(this);
  }
};
ExprlistContext.prototype.accept = function (visitor) {
  if (visitor instanceof Python3Visitor) {
    return visitor.visitExprlist(this);
  } else {
    return visitor.visitChildren(this);
  }
};
Python3Parser.ExprlistContext = ExprlistContext;
Python3Parser.prototype.exprlist = function () {
  var localctx = new ExprlistContext(this, this._ctx, this.state);
  this.enterRule(localctx, 148, Python3Parser.RULE_exprlist);
  var _la = 0; // Token type
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 948;
    this.star_expr();
    this.state = 953;
    this._errHandler.sync(this);
    var _alt = this._interp.adaptivePredict(this._input, 128, this._ctx);
    while (_alt != 2 && _alt != antlr4.atn.ATN.INVALID_ALT_NUMBER) {
      if (_alt === 1) {
        this.state = 949;
        this.match(Python3Parser.COMMA);
        this.state = 950;
        this.star_expr();
      }
      this.state = 955;
      this._errHandler.sync(this);
      _alt = this._interp.adaptivePredict(this._input, 128, this._ctx);
    }
    this.state = 957;
    this._errHandler.sync(this);
    _la = this._input.LA(1);
    if (_la === Python3Parser.COMMA) {
      this.state = 956;
      this.match(Python3Parser.COMMA);
    }
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};
function TestlistContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null;
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = Python3Parser.RULE_testlist;
  return this;
}
TestlistContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TestlistContext.prototype.constructor = TestlistContext;
TestlistContext.prototype.test = function (i) {
  if (i === undefined) {
    i = null;
  }
  if (i === null) {
    return this.getTypedRuleContexts(TestContext);
  } else {
    return this.getTypedRuleContext(TestContext, i);
  }
};
TestlistContext.prototype.COMMA = function (i) {
  if (i === undefined) {
    i = null;
  }
  if (i === null) {
    return this.getTokens(Python3Parser.COMMA);
  } else {
    return this.getToken(Python3Parser.COMMA, i);
  }
};
TestlistContext.prototype.enterRule = function (listener) {
  if (listener instanceof Python3Listener) {
    listener.enterTestlist(this);
  }
};
TestlistContext.prototype.exitRule = function (listener) {
  if (listener instanceof Python3Listener) {
    listener.exitTestlist(this);
  }
};
TestlistContext.prototype.accept = function (visitor) {
  if (visitor instanceof Python3Visitor) {
    return visitor.visitTestlist(this);
  } else {
    return visitor.visitChildren(this);
  }
};
Python3Parser.TestlistContext = TestlistContext;
Python3Parser.prototype.testlist = function () {
  var localctx = new TestlistContext(this, this._ctx, this.state);
  this.enterRule(localctx, 150, Python3Parser.RULE_testlist);
  var _la = 0; // Token type
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 959;
    this.test();
    this.state = 964;
    this._errHandler.sync(this);
    var _alt = this._interp.adaptivePredict(this._input, 130, this._ctx);
    while (_alt != 2 && _alt != antlr4.atn.ATN.INVALID_ALT_NUMBER) {
      if (_alt === 1) {
        this.state = 960;
        this.match(Python3Parser.COMMA);
        this.state = 961;
        this.test();
      }
      this.state = 966;
      this._errHandler.sync(this);
      _alt = this._interp.adaptivePredict(this._input, 130, this._ctx);
    }
    this.state = 968;
    this._errHandler.sync(this);
    _la = this._input.LA(1);
    if (_la === Python3Parser.COMMA) {
      this.state = 967;
      this.match(Python3Parser.COMMA);
    }
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};
function DictorsetmakerContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null;
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = Python3Parser.RULE_dictorsetmaker;
  return this;
}
DictorsetmakerContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DictorsetmakerContext.prototype.constructor = DictorsetmakerContext;
DictorsetmakerContext.prototype.test = function (i) {
  if (i === undefined) {
    i = null;
  }
  if (i === null) {
    return this.getTypedRuleContexts(TestContext);
  } else {
    return this.getTypedRuleContext(TestContext, i);
  }
};
DictorsetmakerContext.prototype.COLON = function (i) {
  if (i === undefined) {
    i = null;
  }
  if (i === null) {
    return this.getTokens(Python3Parser.COLON);
  } else {
    return this.getToken(Python3Parser.COLON, i);
  }
};
DictorsetmakerContext.prototype.comp_for = function () {
  return this.getTypedRuleContext(Comp_forContext, 0);
};
DictorsetmakerContext.prototype.COMMA = function (i) {
  if (i === undefined) {
    i = null;
  }
  if (i === null) {
    return this.getTokens(Python3Parser.COMMA);
  } else {
    return this.getToken(Python3Parser.COMMA, i);
  }
};
DictorsetmakerContext.prototype.enterRule = function (listener) {
  if (listener instanceof Python3Listener) {
    listener.enterDictorsetmaker(this);
  }
};
DictorsetmakerContext.prototype.exitRule = function (listener) {
  if (listener instanceof Python3Listener) {
    listener.exitDictorsetmaker(this);
  }
};
DictorsetmakerContext.prototype.accept = function (visitor) {
  if (visitor instanceof Python3Visitor) {
    return visitor.visitDictorsetmaker(this);
  } else {
    return visitor.visitChildren(this);
  }
};
Python3Parser.DictorsetmakerContext = DictorsetmakerContext;
Python3Parser.prototype.dictorsetmaker = function () {
  var localctx = new DictorsetmakerContext(this, this._ctx, this.state);
  this.enterRule(localctx, 152, Python3Parser.RULE_dictorsetmaker);
  var _la = 0; // Token type
  try {
    this.state = 1003;
    this._errHandler.sync(this);
    var la_ = this._interp.adaptivePredict(this._input, 138, this._ctx);
    switch (la_) {
      case 1:
        this.enterOuterAlt(localctx, 1);
        this.state = 970;
        this.test();
        this.state = 971;
        this.match(Python3Parser.COLON);
        this.state = 972;
        this.test();
        this.state = 987;
        this._errHandler.sync(this);
        switch (this._input.LA(1)) {
          case Python3Parser.FOR:
          case Python3Parser.ASYNC:
            this.state = 973;
            this.comp_for();
            break;
          case Python3Parser.COMMA:
          case Python3Parser.CLOSE_BRACE:
            this.state = 981;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input, 132, this._ctx);
            while (_alt != 2 && _alt != antlr4.atn.ATN.INVALID_ALT_NUMBER) {
              if (_alt === 1) {
                this.state = 974;
                this.match(Python3Parser.COMMA);
                this.state = 975;
                this.test();
                this.state = 976;
                this.match(Python3Parser.COLON);
                this.state = 977;
                this.test();
              }
              this.state = 983;
              this._errHandler.sync(this);
              _alt = this._interp.adaptivePredict(this._input, 132, this._ctx);
            }
            this.state = 985;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === Python3Parser.COMMA) {
              this.state = 984;
              this.match(Python3Parser.COMMA);
            }
            break;
          default:
            throw new antlr4.error.NoViableAltException(this);
        }
        break;
      case 2:
        this.enterOuterAlt(localctx, 2);
        this.state = 989;
        this.test();
        this.state = 1001;
        this._errHandler.sync(this);
        switch (this._input.LA(1)) {
          case Python3Parser.FOR:
          case Python3Parser.ASYNC:
            this.state = 990;
            this.comp_for();
            break;
          case Python3Parser.COMMA:
          case Python3Parser.CLOSE_BRACE:
            this.state = 995;
            this._errHandler.sync(this);
            var _alt = this._interp.adaptivePredict(this._input, 135, this._ctx);
            while (_alt != 2 && _alt != antlr4.atn.ATN.INVALID_ALT_NUMBER) {
              if (_alt === 1) {
                this.state = 991;
                this.match(Python3Parser.COMMA);
                this.state = 992;
                this.test();
              }
              this.state = 997;
              this._errHandler.sync(this);
              _alt = this._interp.adaptivePredict(this._input, 135, this._ctx);
            }
            this.state = 999;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if (_la === Python3Parser.COMMA) {
              this.state = 998;
              this.match(Python3Parser.COMMA);
            }
            break;
          default:
            throw new antlr4.error.NoViableAltException(this);
        }
        break;
    }
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};
function ClassdefContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null;
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = Python3Parser.RULE_classdef;
  return this;
}
ClassdefContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ClassdefContext.prototype.constructor = ClassdefContext;
ClassdefContext.prototype.CLASS = function () {
  return this.getToken(Python3Parser.CLASS, 0);
};
ClassdefContext.prototype.NAME = function () {
  return this.getToken(Python3Parser.NAME, 0);
};
ClassdefContext.prototype.COLON = function () {
  return this.getToken(Python3Parser.COLON, 0);
};
ClassdefContext.prototype.suite = function () {
  return this.getTypedRuleContext(SuiteContext, 0);
};
ClassdefContext.prototype.OPEN_PAREN = function () {
  return this.getToken(Python3Parser.OPEN_PAREN, 0);
};
ClassdefContext.prototype.CLOSE_PAREN = function () {
  return this.getToken(Python3Parser.CLOSE_PAREN, 0);
};
ClassdefContext.prototype.arglist = function () {
  return this.getTypedRuleContext(ArglistContext, 0);
};
ClassdefContext.prototype.enterRule = function (listener) {
  if (listener instanceof Python3Listener) {
    listener.enterClassdef(this);
  }
};
ClassdefContext.prototype.exitRule = function (listener) {
  if (listener instanceof Python3Listener) {
    listener.exitClassdef(this);
  }
};
ClassdefContext.prototype.accept = function (visitor) {
  if (visitor instanceof Python3Visitor) {
    return visitor.visitClassdef(this);
  } else {
    return visitor.visitChildren(this);
  }
};
Python3Parser.ClassdefContext = ClassdefContext;
Python3Parser.prototype.classdef = function () {
  var localctx = new ClassdefContext(this, this._ctx, this.state);
  this.enterRule(localctx, 154, Python3Parser.RULE_classdef);
  var _la = 0; // Token type
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 1005;
    this.match(Python3Parser.CLASS);
    this.state = 1006;
    this.match(Python3Parser.NAME);
    this.state = 1012;
    this._errHandler.sync(this);
    _la = this._input.LA(1);
    if (_la === Python3Parser.OPEN_PAREN) {
      this.state = 1007;
      this.match(Python3Parser.OPEN_PAREN);
      this.state = 1009;
      this._errHandler.sync(this);
      _la = this._input.LA(1);
      if ((_la - 20 & ~0x1f) == 0 && (1 << _la - 20 & (1 << Python3Parser.LAMBDA - 20 | 1 << Python3Parser.NOT - 20 | 1 << Python3Parser.NONE - 20 | 1 << Python3Parser.TRUE - 20 | 1 << Python3Parser.FALSE - 20 | 1 << Python3Parser.AWAIT - 20 | 1 << Python3Parser.NAME - 20 | 1 << Python3Parser.STRING_LITERAL - 20 | 1 << Python3Parser.BYTES_LITERAL - 20 | 1 << Python3Parser.DECIMAL_INTEGER - 20 | 1 << Python3Parser.OCT_INTEGER - 20 | 1 << Python3Parser.HEX_INTEGER - 20 | 1 << Python3Parser.BIN_INTEGER - 20 | 1 << Python3Parser.FLOAT_NUMBER - 20 | 1 << Python3Parser.IMAG_NUMBER - 20 | 1 << Python3Parser.ELLIPSIS - 20 | 1 << Python3Parser.STAR - 20 | 1 << Python3Parser.OPEN_PAREN - 20)) !== 0 || (_la - 54 & ~0x1f) == 0 && (1 << _la - 54 & (1 << Python3Parser.POWER - 54 | 1 << Python3Parser.OPEN_BRACK - 54 | 1 << Python3Parser.ADD - 54 | 1 << Python3Parser.MINUS - 54 | 1 << Python3Parser.NOT_OP - 54 | 1 << Python3Parser.OPEN_BRACE - 54)) !== 0) {
        this.state = 1008;
        this.arglist();
      }
      this.state = 1011;
      this.match(Python3Parser.CLOSE_PAREN);
    }
    this.state = 1014;
    this.match(Python3Parser.COLON);
    this.state = 1015;
    this.suite();
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};
function ArglistContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null;
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = Python3Parser.RULE_arglist;
  return this;
}
ArglistContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ArglistContext.prototype.constructor = ArglistContext;
ArglistContext.prototype.argument = function (i) {
  if (i === undefined) {
    i = null;
  }
  if (i === null) {
    return this.getTypedRuleContexts(ArgumentContext);
  } else {
    return this.getTypedRuleContext(ArgumentContext, i);
  }
};
ArglistContext.prototype.STAR = function () {
  return this.getToken(Python3Parser.STAR, 0);
};
ArglistContext.prototype.test = function (i) {
  if (i === undefined) {
    i = null;
  }
  if (i === null) {
    return this.getTypedRuleContexts(TestContext);
  } else {
    return this.getTypedRuleContext(TestContext, i);
  }
};
ArglistContext.prototype.POWER = function () {
  return this.getToken(Python3Parser.POWER, 0);
};
ArglistContext.prototype.COMMA = function (i) {
  if (i === undefined) {
    i = null;
  }
  if (i === null) {
    return this.getTokens(Python3Parser.COMMA);
  } else {
    return this.getToken(Python3Parser.COMMA, i);
  }
};
ArglistContext.prototype.enterRule = function (listener) {
  if (listener instanceof Python3Listener) {
    listener.enterArglist(this);
  }
};
ArglistContext.prototype.exitRule = function (listener) {
  if (listener instanceof Python3Listener) {
    listener.exitArglist(this);
  }
};
ArglistContext.prototype.accept = function (visitor) {
  if (visitor instanceof Python3Visitor) {
    return visitor.visitArglist(this);
  } else {
    return visitor.visitChildren(this);
  }
};
Python3Parser.ArglistContext = ArglistContext;
Python3Parser.prototype.arglist = function () {
  var localctx = new ArglistContext(this, this._ctx, this.state);
  this.enterRule(localctx, 156, Python3Parser.RULE_arglist);
  var _la = 0; // Token type
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 1022;
    this._errHandler.sync(this);
    var _alt = this._interp.adaptivePredict(this._input, 141, this._ctx);
    while (_alt != 2 && _alt != antlr4.atn.ATN.INVALID_ALT_NUMBER) {
      if (_alt === 1) {
        this.state = 1017;
        this.argument();
        this.state = 1018;
        this.match(Python3Parser.COMMA);
      }
      this.state = 1024;
      this._errHandler.sync(this);
      _alt = this._interp.adaptivePredict(this._input, 141, this._ctx);
    }
    this.state = 1045;
    this._errHandler.sync(this);
    var la_ = this._interp.adaptivePredict(this._input, 145, this._ctx);
    switch (la_) {
      case 1:
        this.state = 1025;
        this.argument();
        this.state = 1027;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if (_la === Python3Parser.COMMA) {
          this.state = 1026;
          this.match(Python3Parser.COMMA);
        }
        break;
      case 2:
        this.state = 1029;
        this.match(Python3Parser.STAR);
        this.state = 1030;
        this.test();
        this.state = 1035;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input, 143, this._ctx);
        while (_alt != 2 && _alt != antlr4.atn.ATN.INVALID_ALT_NUMBER) {
          if (_alt === 1) {
            this.state = 1031;
            this.match(Python3Parser.COMMA);
            this.state = 1032;
            this.argument();
          }
          this.state = 1037;
          this._errHandler.sync(this);
          _alt = this._interp.adaptivePredict(this._input, 143, this._ctx);
        }
        this.state = 1041;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if (_la === Python3Parser.COMMA) {
          this.state = 1038;
          this.match(Python3Parser.COMMA);
          this.state = 1039;
          this.match(Python3Parser.POWER);
          this.state = 1040;
          this.test();
        }
        break;
      case 3:
        this.state = 1043;
        this.match(Python3Parser.POWER);
        this.state = 1044;
        this.test();
        break;
    }
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};
function ArgumentContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null;
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = Python3Parser.RULE_argument;
  return this;
}
ArgumentContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ArgumentContext.prototype.constructor = ArgumentContext;
ArgumentContext.prototype.test = function (i) {
  if (i === undefined) {
    i = null;
  }
  if (i === null) {
    return this.getTypedRuleContexts(TestContext);
  } else {
    return this.getTypedRuleContext(TestContext, i);
  }
};
ArgumentContext.prototype.comp_for = function () {
  return this.getTypedRuleContext(Comp_forContext, 0);
};
ArgumentContext.prototype.ASSIGN = function () {
  return this.getToken(Python3Parser.ASSIGN, 0);
};
ArgumentContext.prototype.enterRule = function (listener) {
  if (listener instanceof Python3Listener) {
    listener.enterArgument(this);
  }
};
ArgumentContext.prototype.exitRule = function (listener) {
  if (listener instanceof Python3Listener) {
    listener.exitArgument(this);
  }
};
ArgumentContext.prototype.accept = function (visitor) {
  if (visitor instanceof Python3Visitor) {
    return visitor.visitArgument(this);
  } else {
    return visitor.visitChildren(this);
  }
};
Python3Parser.ArgumentContext = ArgumentContext;
Python3Parser.prototype.argument = function () {
  var localctx = new ArgumentContext(this, this._ctx, this.state);
  this.enterRule(localctx, 158, Python3Parser.RULE_argument);
  var _la = 0; // Token type
  try {
    this.state = 1055;
    this._errHandler.sync(this);
    var la_ = this._interp.adaptivePredict(this._input, 147, this._ctx);
    switch (la_) {
      case 1:
        this.enterOuterAlt(localctx, 1);
        this.state = 1047;
        this.test();
        this.state = 1049;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if (_la === Python3Parser.FOR || _la === Python3Parser.ASYNC) {
          this.state = 1048;
          this.comp_for();
        }
        break;
      case 2:
        this.enterOuterAlt(localctx, 2);
        this.state = 1051;
        this.test();
        this.state = 1052;
        this.match(Python3Parser.ASSIGN);
        this.state = 1053;
        this.test();
        break;
    }
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};
function Comp_iterContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null;
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = Python3Parser.RULE_comp_iter;
  return this;
}
Comp_iterContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Comp_iterContext.prototype.constructor = Comp_iterContext;
Comp_iterContext.prototype.comp_for = function () {
  return this.getTypedRuleContext(Comp_forContext, 0);
};
Comp_iterContext.prototype.comp_if = function () {
  return this.getTypedRuleContext(Comp_ifContext, 0);
};
Comp_iterContext.prototype.enterRule = function (listener) {
  if (listener instanceof Python3Listener) {
    listener.enterComp_iter(this);
  }
};
Comp_iterContext.prototype.exitRule = function (listener) {
  if (listener instanceof Python3Listener) {
    listener.exitComp_iter(this);
  }
};
Comp_iterContext.prototype.accept = function (visitor) {
  if (visitor instanceof Python3Visitor) {
    return visitor.visitComp_iter(this);
  } else {
    return visitor.visitChildren(this);
  }
};
Python3Parser.Comp_iterContext = Comp_iterContext;
Python3Parser.prototype.comp_iter = function () {
  var localctx = new Comp_iterContext(this, this._ctx, this.state);
  this.enterRule(localctx, 160, Python3Parser.RULE_comp_iter);
  try {
    this.state = 1059;
    this._errHandler.sync(this);
    switch (this._input.LA(1)) {
      case Python3Parser.FOR:
      case Python3Parser.ASYNC:
        this.enterOuterAlt(localctx, 1);
        this.state = 1057;
        this.comp_for();
        break;
      case Python3Parser.IF:
        this.enterOuterAlt(localctx, 2);
        this.state = 1058;
        this.comp_if();
        break;
      default:
        throw new antlr4.error.NoViableAltException(this);
    }
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};
function Comp_forContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null;
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = Python3Parser.RULE_comp_for;
  return this;
}
Comp_forContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Comp_forContext.prototype.constructor = Comp_forContext;
Comp_forContext.prototype.FOR = function () {
  return this.getToken(Python3Parser.FOR, 0);
};
Comp_forContext.prototype.exprlist = function () {
  return this.getTypedRuleContext(ExprlistContext, 0);
};
Comp_forContext.prototype.IN = function () {
  return this.getToken(Python3Parser.IN, 0);
};
Comp_forContext.prototype.or_test = function () {
  return this.getTypedRuleContext(Or_testContext, 0);
};
Comp_forContext.prototype.ASYNC = function () {
  return this.getToken(Python3Parser.ASYNC, 0);
};
Comp_forContext.prototype.comp_iter = function () {
  return this.getTypedRuleContext(Comp_iterContext, 0);
};
Comp_forContext.prototype.enterRule = function (listener) {
  if (listener instanceof Python3Listener) {
    listener.enterComp_for(this);
  }
};
Comp_forContext.prototype.exitRule = function (listener) {
  if (listener instanceof Python3Listener) {
    listener.exitComp_for(this);
  }
};
Comp_forContext.prototype.accept = function (visitor) {
  if (visitor instanceof Python3Visitor) {
    return visitor.visitComp_for(this);
  } else {
    return visitor.visitChildren(this);
  }
};
Python3Parser.Comp_forContext = Comp_forContext;
Python3Parser.prototype.comp_for = function () {
  var localctx = new Comp_forContext(this, this._ctx, this.state);
  this.enterRule(localctx, 162, Python3Parser.RULE_comp_for);
  var _la = 0; // Token type
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 1062;
    this._errHandler.sync(this);
    _la = this._input.LA(1);
    if (_la === Python3Parser.ASYNC) {
      this.state = 1061;
      this.match(Python3Parser.ASYNC);
    }
    this.state = 1064;
    this.match(Python3Parser.FOR);
    this.state = 1065;
    this.exprlist();
    this.state = 1066;
    this.match(Python3Parser.IN);
    this.state = 1067;
    this.or_test();
    this.state = 1069;
    this._errHandler.sync(this);
    _la = this._input.LA(1);
    if ((_la - 10 & ~0x1f) == 0 && (1 << _la - 10 & (1 << Python3Parser.IF - 10 | 1 << Python3Parser.FOR - 10 | 1 << Python3Parser.ASYNC - 10)) !== 0) {
      this.state = 1068;
      this.comp_iter();
    }
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};
function Comp_ifContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null;
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = Python3Parser.RULE_comp_if;
  return this;
}
Comp_ifContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Comp_ifContext.prototype.constructor = Comp_ifContext;
Comp_ifContext.prototype.IF = function () {
  return this.getToken(Python3Parser.IF, 0);
};
Comp_ifContext.prototype.test_nocond = function () {
  return this.getTypedRuleContext(Test_nocondContext, 0);
};
Comp_ifContext.prototype.comp_iter = function () {
  return this.getTypedRuleContext(Comp_iterContext, 0);
};
Comp_ifContext.prototype.enterRule = function (listener) {
  if (listener instanceof Python3Listener) {
    listener.enterComp_if(this);
  }
};
Comp_ifContext.prototype.exitRule = function (listener) {
  if (listener instanceof Python3Listener) {
    listener.exitComp_if(this);
  }
};
Comp_ifContext.prototype.accept = function (visitor) {
  if (visitor instanceof Python3Visitor) {
    return visitor.visitComp_if(this);
  } else {
    return visitor.visitChildren(this);
  }
};
Python3Parser.Comp_ifContext = Comp_ifContext;
Python3Parser.prototype.comp_if = function () {
  var localctx = new Comp_ifContext(this, this._ctx, this.state);
  this.enterRule(localctx, 164, Python3Parser.RULE_comp_if);
  var _la = 0; // Token type
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 1071;
    this.match(Python3Parser.IF);
    this.state = 1072;
    this.test_nocond();
    this.state = 1074;
    this._errHandler.sync(this);
    _la = this._input.LA(1);
    if ((_la - 10 & ~0x1f) == 0 && (1 << _la - 10 & (1 << Python3Parser.IF - 10 | 1 << Python3Parser.FOR - 10 | 1 << Python3Parser.ASYNC - 10)) !== 0) {
      this.state = 1073;
      this.comp_iter();
    }
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};
function Yield_exprContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null;
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = Python3Parser.RULE_yield_expr;
  return this;
}
Yield_exprContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Yield_exprContext.prototype.constructor = Yield_exprContext;
Yield_exprContext.prototype.YIELD = function () {
  return this.getToken(Python3Parser.YIELD, 0);
};
Yield_exprContext.prototype.yield_arg = function () {
  return this.getTypedRuleContext(Yield_argContext, 0);
};
Yield_exprContext.prototype.enterRule = function (listener) {
  if (listener instanceof Python3Listener) {
    listener.enterYield_expr(this);
  }
};
Yield_exprContext.prototype.exitRule = function (listener) {
  if (listener instanceof Python3Listener) {
    listener.exitYield_expr(this);
  }
};
Yield_exprContext.prototype.accept = function (visitor) {
  if (visitor instanceof Python3Visitor) {
    return visitor.visitYield_expr(this);
  } else {
    return visitor.visitChildren(this);
  }
};
Python3Parser.Yield_exprContext = Yield_exprContext;
Python3Parser.prototype.yield_expr = function () {
  var localctx = new Yield_exprContext(this, this._ctx, this.state);
  this.enterRule(localctx, 166, Python3Parser.RULE_yield_expr);
  var _la = 0; // Token type
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 1076;
    this.match(Python3Parser.YIELD);
    this.state = 1078;
    this._errHandler.sync(this);
    _la = this._input.LA(1);
    if ((_la & ~0x1f) == 0 && (1 << _la & (1 << Python3Parser.FROM | 1 << Python3Parser.LAMBDA | 1 << Python3Parser.NOT | 1 << Python3Parser.NONE | 1 << Python3Parser.TRUE | 1 << Python3Parser.FALSE)) !== 0 || (_la - 35 & ~0x1f) == 0 && (1 << _la - 35 & (1 << Python3Parser.AWAIT - 35 | 1 << Python3Parser.NAME - 35 | 1 << Python3Parser.STRING_LITERAL - 35 | 1 << Python3Parser.BYTES_LITERAL - 35 | 1 << Python3Parser.DECIMAL_INTEGER - 35 | 1 << Python3Parser.OCT_INTEGER - 35 | 1 << Python3Parser.HEX_INTEGER - 35 | 1 << Python3Parser.BIN_INTEGER - 35 | 1 << Python3Parser.FLOAT_NUMBER - 35 | 1 << Python3Parser.IMAG_NUMBER - 35 | 1 << Python3Parser.ELLIPSIS - 35 | 1 << Python3Parser.STAR - 35 | 1 << Python3Parser.OPEN_PAREN - 35 | 1 << Python3Parser.OPEN_BRACK - 35 | 1 << Python3Parser.ADD - 35 | 1 << Python3Parser.MINUS - 35)) !== 0 || _la === Python3Parser.NOT_OP || _la === Python3Parser.OPEN_BRACE) {
      this.state = 1077;
      this.yield_arg();
    }
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};
function Yield_argContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null;
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = Python3Parser.RULE_yield_arg;
  return this;
}
Yield_argContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Yield_argContext.prototype.constructor = Yield_argContext;
Yield_argContext.prototype.FROM = function () {
  return this.getToken(Python3Parser.FROM, 0);
};
Yield_argContext.prototype.test = function () {
  return this.getTypedRuleContext(TestContext, 0);
};
Yield_argContext.prototype.testlist = function () {
  return this.getTypedRuleContext(TestlistContext, 0);
};
Yield_argContext.prototype.enterRule = function (listener) {
  if (listener instanceof Python3Listener) {
    listener.enterYield_arg(this);
  }
};
Yield_argContext.prototype.exitRule = function (listener) {
  if (listener instanceof Python3Listener) {
    listener.exitYield_arg(this);
  }
};
Yield_argContext.prototype.accept = function (visitor) {
  if (visitor instanceof Python3Visitor) {
    return visitor.visitYield_arg(this);
  } else {
    return visitor.visitChildren(this);
  }
};
Python3Parser.Yield_argContext = Yield_argContext;
Python3Parser.prototype.yield_arg = function () {
  var localctx = new Yield_argContext(this, this._ctx, this.state);
  this.enterRule(localctx, 168, Python3Parser.RULE_yield_arg);
  try {
    this.state = 1083;
    this._errHandler.sync(this);
    switch (this._input.LA(1)) {
      case Python3Parser.FROM:
        this.enterOuterAlt(localctx, 1);
        this.state = 1080;
        this.match(Python3Parser.FROM);
        this.state = 1081;
        this.test();
        break;
      case Python3Parser.LAMBDA:
      case Python3Parser.NOT:
      case Python3Parser.NONE:
      case Python3Parser.TRUE:
      case Python3Parser.FALSE:
      case Python3Parser.AWAIT:
      case Python3Parser.NAME:
      case Python3Parser.STRING_LITERAL:
      case Python3Parser.BYTES_LITERAL:
      case Python3Parser.DECIMAL_INTEGER:
      case Python3Parser.OCT_INTEGER:
      case Python3Parser.HEX_INTEGER:
      case Python3Parser.BIN_INTEGER:
      case Python3Parser.FLOAT_NUMBER:
      case Python3Parser.IMAG_NUMBER:
      case Python3Parser.ELLIPSIS:
      case Python3Parser.STAR:
      case Python3Parser.OPEN_PAREN:
      case Python3Parser.OPEN_BRACK:
      case Python3Parser.ADD:
      case Python3Parser.MINUS:
      case Python3Parser.NOT_OP:
      case Python3Parser.OPEN_BRACE:
        this.enterOuterAlt(localctx, 2);
        this.state = 1082;
        this.testlist();
        break;
      default:
        throw new antlr4.error.NoViableAltException(this);
    }
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};
function StrContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null;
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = Python3Parser.RULE_str;
  return this;
}
StrContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
StrContext.prototype.constructor = StrContext;
StrContext.prototype.STRING_LITERAL = function () {
  return this.getToken(Python3Parser.STRING_LITERAL, 0);
};
StrContext.prototype.BYTES_LITERAL = function () {
  return this.getToken(Python3Parser.BYTES_LITERAL, 0);
};
StrContext.prototype.enterRule = function (listener) {
  if (listener instanceof Python3Listener) {
    listener.enterStr(this);
  }
};
StrContext.prototype.exitRule = function (listener) {
  if (listener instanceof Python3Listener) {
    listener.exitStr(this);
  }
};
StrContext.prototype.accept = function (visitor) {
  if (visitor instanceof Python3Visitor) {
    return visitor.visitStr(this);
  } else {
    return visitor.visitChildren(this);
  }
};
Python3Parser.StrContext = StrContext;
Python3Parser.prototype.str = function () {
  var localctx = new StrContext(this, this._ctx, this.state);
  this.enterRule(localctx, 170, Python3Parser.RULE_str);
  var _la = 0; // Token type
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 1085;
    _la = this._input.LA(1);
    if (!(_la === Python3Parser.STRING_LITERAL || _la === Python3Parser.BYTES_LITERAL)) {
      this._errHandler.recoverInline(this);
    } else {
      this._errHandler.reportMatch(this);
      this.consume();
    }
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};
function NumberContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null;
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = Python3Parser.RULE_number;
  return this;
}
NumberContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
NumberContext.prototype.constructor = NumberContext;
NumberContext.prototype.integer = function () {
  return this.getTypedRuleContext(IntegerContext, 0);
};
NumberContext.prototype.FLOAT_NUMBER = function () {
  return this.getToken(Python3Parser.FLOAT_NUMBER, 0);
};
NumberContext.prototype.IMAG_NUMBER = function () {
  return this.getToken(Python3Parser.IMAG_NUMBER, 0);
};
NumberContext.prototype.enterRule = function (listener) {
  if (listener instanceof Python3Listener) {
    listener.enterNumber(this);
  }
};
NumberContext.prototype.exitRule = function (listener) {
  if (listener instanceof Python3Listener) {
    listener.exitNumber(this);
  }
};
NumberContext.prototype.accept = function (visitor) {
  if (visitor instanceof Python3Visitor) {
    return visitor.visitNumber(this);
  } else {
    return visitor.visitChildren(this);
  }
};
Python3Parser.NumberContext = NumberContext;
Python3Parser.prototype.number = function () {
  var localctx = new NumberContext(this, this._ctx, this.state);
  this.enterRule(localctx, 172, Python3Parser.RULE_number);
  try {
    this.state = 1090;
    this._errHandler.sync(this);
    switch (this._input.LA(1)) {
      case Python3Parser.DECIMAL_INTEGER:
      case Python3Parser.OCT_INTEGER:
      case Python3Parser.HEX_INTEGER:
      case Python3Parser.BIN_INTEGER:
        this.enterOuterAlt(localctx, 1);
        this.state = 1087;
        this.integer();
        break;
      case Python3Parser.FLOAT_NUMBER:
        this.enterOuterAlt(localctx, 2);
        this.state = 1088;
        this.match(Python3Parser.FLOAT_NUMBER);
        break;
      case Python3Parser.IMAG_NUMBER:
        this.enterOuterAlt(localctx, 3);
        this.state = 1089;
        this.match(Python3Parser.IMAG_NUMBER);
        break;
      default:
        throw new antlr4.error.NoViableAltException(this);
    }
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};
function IntegerContext(parser, parent, invokingState) {
  if (parent === undefined) {
    parent = null;
  }
  if (invokingState === undefined || invokingState === null) {
    invokingState = -1;
  }
  antlr4.ParserRuleContext.call(this, parent, invokingState);
  this.parser = parser;
  this.ruleIndex = Python3Parser.RULE_integer;
  return this;
}
IntegerContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
IntegerContext.prototype.constructor = IntegerContext;
IntegerContext.prototype.DECIMAL_INTEGER = function () {
  return this.getToken(Python3Parser.DECIMAL_INTEGER, 0);
};
IntegerContext.prototype.OCT_INTEGER = function () {
  return this.getToken(Python3Parser.OCT_INTEGER, 0);
};
IntegerContext.prototype.HEX_INTEGER = function () {
  return this.getToken(Python3Parser.HEX_INTEGER, 0);
};
IntegerContext.prototype.BIN_INTEGER = function () {
  return this.getToken(Python3Parser.BIN_INTEGER, 0);
};
IntegerContext.prototype.enterRule = function (listener) {
  if (listener instanceof Python3Listener) {
    listener.enterInteger(this);
  }
};
IntegerContext.prototype.exitRule = function (listener) {
  if (listener instanceof Python3Listener) {
    listener.exitInteger(this);
  }
};
IntegerContext.prototype.accept = function (visitor) {
  if (visitor instanceof Python3Visitor) {
    return visitor.visitInteger(this);
  } else {
    return visitor.visitChildren(this);
  }
};
Python3Parser.IntegerContext = IntegerContext;
Python3Parser.prototype.integer = function () {
  var localctx = new IntegerContext(this, this._ctx, this.state);
  this.enterRule(localctx, 174, Python3Parser.RULE_integer);
  var _la = 0; // Token type
  try {
    this.enterOuterAlt(localctx, 1);
    this.state = 1092;
    _la = this._input.LA(1);
    if (!((_la - 40 & ~0x1f) == 0 && (1 << _la - 40 & (1 << Python3Parser.DECIMAL_INTEGER - 40 | 1 << Python3Parser.OCT_INTEGER - 40 | 1 << Python3Parser.HEX_INTEGER - 40 | 1 << Python3Parser.BIN_INTEGER - 40)) !== 0)) {
      this._errHandler.recoverInline(this);
    } else {
      this._errHandler.reportMatch(this);
      this.consume();
    }
  } catch (re) {
    if (re instanceof antlr4.error.RecognitionException) {
      localctx.exception = re;
      this._errHandler.reportError(this, re);
      this._errHandler.recover(this, re);
    } else {
      throw re;
    }
  } finally {
    this.exitRule();
  }
  return localctx;
};
exports.Python3Parser = Python3Parser;